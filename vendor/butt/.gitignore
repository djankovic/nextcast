# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app
# http://www.gnu.org/software/automake

Makefile.in
/ar-lib
/mdate-sh
/py-compile
/test-driver
/ylwrap
.deps/
.dirstamp

# http://www.gnu.org/software/autoconf

autom4te.cache
/autoscan.log
/autoscan-*.log
/aclocal.m4
/compile
/config.cache
/config.guess
/config.h.in
/config.log
/config.status
/config.sub
/configure
/configure.scan
/depcomp
/install-sh
/missing
/stamp-h1

# https://www.gnu.org/software/libtool/

/ltmain.sh

# http://www.gnu.org/software/texinfo

/texinfo.tex

# http://www.gnu.org/software/m4/

m4/libtool.m4
m4/ltoptions.m4
m4/ltsugar.m4
m4/ltversion.m4
m4/lt~obsolete.m4

# Generated Makefile
# (meta build system like autotools,
# can automatically generate from config.status script
# (which is called by configure script))
Makefile
*.diff
*.patch
*.orig
*.rej

*~
.#*
*#
.*.swp

*.flt
*.gmo
*.info
*.la
*.lo
*.o
*.pyc
*.tmp
*.a

.deps
.libs

autom4te.cache
config.cache
# GCC does not support in-tree builds, do not conceal a stray config.h:
# config.h
config.intl
config.log
config.status
libtool
POTFILES
*-POTFILES

TAGS
TAGS.sub
cscope.out

.local.vimrc
.lvimrc

.clang-format
.clang-tidy
.clangd
.cache
compile_commands.json

.gdbinit
.gdb_history

perf.data
perf.data.old

# ignore core files, but not java/net/protocol/core/
core
!core/

lost+found

# ignore ./contrib/gcc_update output
LAST_UPDATED
REVISION

stamp-*
*.stamp

# ignore in-tree prerequisites
/mpfr*
/mpc*
/gmp*
/isl*
/gettext*

# Proprietary (?)
# Generate with `sdef $PATH_TO_APP | sdp -fh --basename $HEADER_NAME`
# from /System/Applications/Music.app
iTunes.h
# from /Applications/VOX.app
VOX.h
# from /Applications/Spotify.app
Spotify.h

# Generate with automake && \
# CXXFLAGS="-ObjC++ -framework Foundation -framework AVFoundation -framework ScriptingBridge -DHAVE_LIBFDK_AAC=1" \
# CPPFLAGS="-DHAVE_LIBFDK_AAC=1" \
# LDFLAGS="-L/opt/homebrew/lib -lintl -lfdk-aac" \
# ./configure
config.h
configure
