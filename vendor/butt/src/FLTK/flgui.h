// generated by Fast Light User Interface Designer (fluid) version 1.0308

#ifndef flgui_h
#define flgui_h
#include <FL/Fl.H>
#include "FL/Fl_My_Double_Window.H"
#include <stdlib.h> 
#include "config.h"
#include "flgui.h"
#include "fl_timer_funcs.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include "Fl_ILM216.h"
#include "fl_callbacks.h"
#include "cfg.h"
#include <FL/Fl_Button.H>
#include "Fl_vu_meter.h"
#include "FL/Fl_My_Invisible_Box.H"
#include <FL/Fl_Text_Display.H>
#include "FL/Fl_My_Value_Slider.H"
#include "fl_timer_funcs.h"
#include <FL/Fl_Choice.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Value_Input.H>
#include "Fl_LED.h"
#include <FL/Fl_Browser.H>
#include <FL/filename.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Int_Input.H>
#include <FL/Fl_Check_Browser.H>
#include <FL/Fl_Output.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Light_Button.H>

class flgui {
public:
  bool info_visible; 
  Fl_Text_Buffer *info_buffer; 
  flgui();
  Fl_My_Double_Window *window_main;
private:
  inline void cb_window_main_i(Fl_My_Double_Window*, void*);
  static void cb_window_main(Fl_My_Double_Window*, void*);
public:
  Fl_Box *label_volume;
  Fl_Tabs *vu_tabs;
private:
  inline void cb_vu_tabs_i(Fl_Tabs*, void*);
  static void cb_vu_tabs(Fl_Tabs*, void*);
public:
  Fl_ILM216 *lcd;
private:
  inline void cb_lcd_i(Fl_ILM216*, void*);
  static void cb_lcd(Fl_ILM216*, void*);
public:
  Fl_Button *button_connect;
private:
  inline void cb_button_connect_i(Fl_Button*, void*);
  static void cb_button_connect(Fl_Button*, void*);
public:
  Fl_Button *button_disconnect;
private:
  inline void cb_button_disconnect_i(Fl_Button*, void*);
  static void cb_button_disconnect(Fl_Button*, void*);
public:
  Fl_Button *button_record;
private:
  inline void cb_button_record_i(Fl_Button*, void*);
  static void cb_button_record(Fl_Button*, void*);
public:
  Fl_Button *button_info;
private:
  inline void cb_button_info_i(Fl_Button*, void*);
  static void cb_button_info(Fl_Button*, void*);
public:
  VUMeter *vumeter;
  Fl_My_Invisible_Box *invisible_tab_box;
  Fl_Text_Display *info_output;
  Fl_Button *button_cfg;
private:
  inline void cb_button_cfg_i(Fl_Button*, void*);
  static void cb_button_cfg(Fl_Button*, void*);
public:
  Fl_Box *label_n24dB;
  Fl_My_Value_Slider *slider_gain;
private:
  inline void cb_slider_gain_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_gain(Fl_My_Value_Slider*, void*);
public:
  Fl_Box *label_p24dB;
  Fl_Button *radio_co_logo;
private:
  inline void cb_radio_co_logo_i(Fl_Button*, void*);
  static void cb_radio_co_logo(Fl_Button*, void*);
public:
  Fl_Box *label_current_listeners;
  Fl_Button *button_mixer;
private:
  inline void cb_button_mixer_i(Fl_Button*, void*);
  static void cb_button_mixer(Fl_Button*, void*);
public:
  Fl_My_Double_Window *window_cfg;
private:
  inline void cb_window_cfg_i(Fl_My_Double_Window*, void*);
  static void cb_window_cfg(Fl_My_Double_Window*, void*);
public:
  Fl_Tabs *Settings;
  Fl_Choice *choice_cfg_act_srv;
private:
  inline void cb_choice_cfg_act_srv_i(Fl_Choice*, void*);
  static void cb_choice_cfg_act_srv(Fl_Choice*, void*);
  inline void cb_ADD_i(Fl_Button*, void*);
  static void cb_ADD(Fl_Button*, void*);
public:
  Fl_Button *button_cfg_edit_srv;
private:
  inline void cb_button_cfg_edit_srv_i(Fl_Button*, void*);
  static void cb_button_cfg_edit_srv(Fl_Button*, void*);
public:
  Fl_Button *button_cfg_del_srv;
private:
  inline void cb_button_cfg_del_srv_i(Fl_Button*, void*);
  static void cb_button_cfg_del_srv(Fl_Button*, void*);
public:
  Fl_Choice *choice_cfg_act_icy;
private:
  inline void cb_choice_cfg_act_icy_i(Fl_Choice*, void*);
  static void cb_choice_cfg_act_icy(Fl_Choice*, void*);
  inline void cb_ADD1_i(Fl_Button*, void*);
  static void cb_ADD1(Fl_Button*, void*);
public:
  Fl_Button *button_cfg_edit_icy;
private:
  inline void cb_button_cfg_edit_icy_i(Fl_Button*, void*);
  static void cb_button_cfg_edit_icy(Fl_Button*, void*);
public:
  Fl_Button *button_cfg_del_icy;
private:
  inline void cb_button_cfg_del_icy_i(Fl_Button*, void*);
  static void cb_button_cfg_del_icy(Fl_Button*, void*);
public:
  Fl_Input *input_log_filename;
private:
  inline void cb_input_log_filename_i(Fl_Input*, void*);
  static void cb_input_log_filename(Fl_Input*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_Import_i(Fl_Button*, void*);
  static void cb_Import(Fl_Button*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  inline void cb_Export_i(Fl_Button*, void*);
  static void cb_Export(Fl_Button*, void*);
  inline void cb_Check_i(Fl_Button*, void*);
  static void cb_Check(Fl_Button*, void*);
public:
  Fl_Check_Button *check_update_at_startup;
private:
  inline void cb_check_update_at_startup_i(Fl_Check_Button*, void*);
  static void cb_check_update_at_startup(Fl_Check_Button*, void*);
public:
  Fl_Group *group_agent;
  Fl_Check_Button *check_start_agent;
private:
  inline void cb_check_start_agent_i(Fl_Check_Button*, void*);
  static void cb_check_start_agent(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_minimize_to_tray;
private:
  inline void cb_check_minimize_to_tray_i(Fl_Check_Button*, void*);
  static void cb_check_minimize_to_tray(Fl_Check_Button*, void*);
  inline void cb_Start_i(Fl_Button*, void*);
  static void cb_Start(Fl_Button*, void*);
  inline void cb_Stop_i(Fl_Button*, void*);
  static void cb_Stop(Fl_Button*, void*);
public:
  Fl_Choice *choice_cfg_dev;
private:
  inline void cb_choice_cfg_dev_i(Fl_Choice*, void*);
  static void cb_choice_cfg_dev(Fl_Choice*, void*);
public:
  Fl_Choice *choice_cfg_channel;
  static unsigned char menu_choice_cfg_channel_i18n_done;
  static Fl_Menu_Item menu_choice_cfg_channel[];
private:
  inline void cb_Stereo_i(Fl_Menu_*, void*);
  static void cb_Stereo(Fl_Menu_*, void*);
  inline void cb_Mono_i(Fl_Menu_*, void*);
  static void cb_Mono(Fl_Menu_*, void*);
public:
  Fl_Choice *choice_cfg_samplerate;
private:
  inline void cb_choice_cfg_samplerate_i(Fl_Choice*, void*);
  static void cb_choice_cfg_samplerate(Fl_Choice*, void*);
public:
  Fl_Choice *choice_cfg_left_channel;
private:
  inline void cb_choice_cfg_left_channel_i(Fl_Choice*, void*);
  static void cb_choice_cfg_left_channel(Fl_Choice*, void*);
public:
  Fl_Choice *choice_cfg_right_channel;
private:
  inline void cb_choice_cfg_right_channel_i(Fl_Choice*, void*);
  static void cb_choice_cfg_right_channel(Fl_Choice*, void*);
public:
  Fl_Round_Button *radio_cfg_ID;
private:
  inline void cb_radio_cfg_ID_i(Fl_Round_Button*, void*);
  static void cb_radio_cfg_ID(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_cfg_name;
private:
  inline void cb_radio_cfg_name_i(Fl_Round_Button*, void*);
  static void cb_radio_cfg_name(Fl_Round_Button*, void*);
public:
  Fl_Button *button_cfg_rescan_devices;
private:
  inline void cb_button_cfg_rescan_devices_i(Fl_Button*, void*);
  static void cb_button_cfg_rescan_devices(Fl_Button*, void*);
public:
  Fl_Choice *choice_cfg_dev2;
private:
  inline void cb_choice_cfg_dev2_i(Fl_Choice*, void*);
  static void cb_choice_cfg_dev2(Fl_Choice*, void*);
public:
  Fl_Choice *choice_cfg_left_channel2;
private:
  inline void cb_choice_cfg_left_channel2_i(Fl_Choice*, void*);
  static void cb_choice_cfg_left_channel2(Fl_Choice*, void*);
public:
  Fl_Choice *choice_cfg_right_channel2;
private:
  inline void cb_choice_cfg_right_channel2_i(Fl_Choice*, void*);
  static void cb_choice_cfg_right_channel2(Fl_Choice*, void*);
public:
  Fl_Choice *choice_cfg_codec;
  static unsigned char menu_choice_cfg_codec_i18n_done;
  static Fl_Menu_Item menu_choice_cfg_codec[];
private:
  inline void cb_MP3_i(Fl_Menu_*, void*);
  static void cb_MP3(Fl_Menu_*, void*);
  inline void cb_OGG_i(Fl_Menu_*, void*);
  static void cb_OGG(Fl_Menu_*, void*);
  inline void cb_OPUS_i(Fl_Menu_*, void*);
  static void cb_OPUS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menu_item_cfg_aac;
private:
  inline void cb_menu_item_cfg_aac_i(Fl_Menu_*, void*);
  static void cb_menu_item_cfg_aac(Fl_Menu_*, void*);
  inline void cb_FLAC_i(Fl_Menu_*, void*);
  static void cb_FLAC(Fl_Menu_*, void*);
public:
  Fl_Choice *choice_cfg_bitrate;
private:
  inline void cb_choice_cfg_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_cfg_bitrate(Fl_Choice*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Choice *choice_rec_codec;
  static unsigned char menu_choice_rec_codec_i18n_done;
  static Fl_Menu_Item menu_choice_rec_codec[];
private:
  inline void cb_MP31_i(Fl_Menu_*, void*);
  static void cb_MP31(Fl_Menu_*, void*);
  inline void cb_OGG1_i(Fl_Menu_*, void*);
  static void cb_OGG1(Fl_Menu_*, void*);
  inline void cb_OPUS1_i(Fl_Menu_*, void*);
  static void cb_OPUS1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menu_item_rec_aac;
private:
  inline void cb_menu_item_rec_aac_i(Fl_Menu_*, void*);
  static void cb_menu_item_rec_aac(Fl_Menu_*, void*);
  inline void cb_FLAC1_i(Fl_Menu_*, void*);
  static void cb_FLAC1(Fl_Menu_*, void*);
  inline void cb_WAV_i(Fl_Menu_*, void*);
  static void cb_WAV(Fl_Menu_*, void*);
public:
  Fl_Choice *choice_rec_bitrate;
private:
  inline void cb_choice_rec_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_rec_bitrate(Fl_Choice*, void*);
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
public:
  Fl_Button *button_advanced;
private:
  inline void cb_button_advanced_i(Fl_Button*, void*);
  static void cb_button_advanced(Fl_Button*, void*);
public:
  Fl_Value_Input *input_cfg_buffer;
private:
  inline void cb_input_cfg_buffer_i(Fl_Value_Input*, void*);
  static void cb_input_cfg_buffer(Fl_Value_Input*, void*);
public:
  Fl_Choice *choice_cfg_resample_mode;
private:
  inline void cb_choice_cfg_resample_mode_i(Fl_Choice*, void*);
  static void cb_choice_cfg_resample_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_cfg_resample_mode_i18n_done;
  static Fl_Menu_Item menu_choice_cfg_resample_mode[];
public:
  Fl_Value_Input *input_cfg_present_level;
private:
  inline void cb_input_cfg_present_level_i(Fl_Value_Input*, void*);
  static void cb_input_cfg_present_level(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *input_cfg_absent_level;
private:
  inline void cb_input_cfg_absent_level_i(Fl_Value_Input*, void*);
  static void cb_input_cfg_absent_level(Fl_Value_Input*, void*);
public:
  Fl_Input *input_cfg_song_file;
private:
  inline void cb_input_cfg_song_file_i(Fl_Input*, void*);
  static void cb_input_cfg_song_file(Fl_Input*, void*);
public:
  Fl_Button *button_songfile_browse;
private:
  inline void cb_button_songfile_browse_i(Fl_Button*, void*);
  static void cb_button_songfile_browse(Fl_Button*, void*);
public:
  Fl_Check_Button *check_song_update_active;
private:
  inline void cb_check_song_update_active_i(Fl_Check_Button*, void*);
  static void cb_check_song_update_active(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_read_last_line;
private:
  inline void cb_check_read_last_line_i(Fl_Check_Button*, void*);
  static void cb_check_read_last_line(Fl_Check_Button*, void*);
public:
  Fl_Input *input_cfg_song;
private:
  inline void cb_input_cfg_song_i(Fl_Input*, void*);
  static void cb_input_cfg_song(Fl_Input*, void*);
public:
  Fl_Button *button_cfg_song_go;
private:
  inline void cb_button_cfg_song_go_i(Fl_Button*, void*);
  static void cb_button_cfg_song_go(Fl_Button*, void*);
public:
  Fl_Check_Button *check_cfg_use_app;
private:
  inline void cb_check_cfg_use_app_i(Fl_Check_Button*, void*);
  static void cb_check_cfg_use_app(Fl_Check_Button*, void*);
public:
  Fl_Choice *choice_cfg_app;
private:
  inline void cb_choice_cfg_app_i(Fl_Choice*, void*);
  static void cb_choice_cfg_app(Fl_Choice*, void*);
public:
  Fl_Round_Button *radio_cfg_title_artist;
private:
  inline void cb_radio_cfg_title_artist_i(Fl_Round_Button*, void*);
  static void cb_radio_cfg_title_artist(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_cfg_artist_title;
private:
  inline void cb_radio_cfg_artist_title_i(Fl_Round_Button*, void*);
  static void cb_radio_cfg_artist_title(Fl_Round_Button*, void*);
public:
  Fl_Check_Button *check_cfg_connect;
private:
  inline void cb_check_cfg_connect_i(Fl_Check_Button*, void*);
  static void cb_check_cfg_connect(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *input_cfg_silence;
private:
  inline void cb_input_cfg_silence_i(Fl_Value_Input*, void*);
  static void cb_input_cfg_silence(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *input_cfg_signal;
private:
  inline void cb_input_cfg_signal_i(Fl_Value_Input*, void*);
  static void cb_input_cfg_signal(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *check_cfg_force_reconnecting;
private:
  inline void cb_check_cfg_force_reconnecting_i(Fl_Check_Button*, void*);
  static void cb_check_cfg_force_reconnecting(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *input_cfg_reconnect_delay;
private:
  inline void cb_input_cfg_reconnect_delay_i(Fl_Value_Input*, void*);
  static void cb_input_cfg_reconnect_delay(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *check_stream_signal;
private:
  inline void cb_check_stream_signal_i(Fl_Check_Button*, void*);
  static void cb_check_stream_signal(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_stream_silence;
private:
  inline void cb_check_stream_silence_i(Fl_Check_Button*, void*);
  static void cb_check_stream_silence(Fl_Check_Button*, void*);
public:
  Fl_Input *input_cfg_song_prefix;
private:
  inline void cb_input_cfg_song_prefix_i(Fl_Input*, void*);
  static void cb_input_cfg_song_prefix(Fl_Input*, void*);
public:
  Fl_Input *input_cfg_song_suffix;
private:
  inline void cb_input_cfg_song_suffix_i(Fl_Input*, void*);
  static void cb_input_cfg_song_suffix(Fl_Input*, void*);
public:
  Fl_Choice *choice_cfg_song_delay;
private:
  inline void cb_choice_cfg_song_delay_i(Fl_Choice*, void*);
  static void cb_choice_cfg_song_delay(Fl_Choice*, void*);
public:
  Fl_Input *input_rec_filename;
private:
  inline void cb_input_rec_filename_i(Fl_Input*, void*);
  static void cb_input_rec_filename(Fl_Input*, void*);
public:
  Fl_Input *input_rec_folder;
private:
  inline void cb_input_rec_folder_i(Fl_Input*, void*);
  static void cb_input_rec_folder(Fl_Input*, void*);
public:
  Fl_Button *button_rec_browse;
private:
  inline void cb_button_rec_browse_i(Fl_Button*, void*);
  static void cb_button_rec_browse(Fl_Button*, void*);
public:
  Fl_Value_Input *input_rec_split_time;
private:
  inline void cb_input_rec_split_time_i(Fl_Value_Input*, void*);
  static void cb_input_rec_split_time(Fl_Value_Input*, void*);
public:
  Fl_Box *text_rec_split_time;
  Fl_Check_Button *check_sync_to_full_hour;
private:
  inline void cb_check_sync_to_full_hour_i(Fl_Check_Button*, void*);
  static void cb_check_sync_to_full_hour(Fl_Check_Button*, void*);
  inline void cb_Split_i(Fl_Button*, void*);
  static void cb_Split(Fl_Button*, void*);
public:
  Fl_Check_Button *check_cfg_auto_start_rec;
private:
  inline void cb_check_cfg_auto_start_rec_i(Fl_Check_Button*, void*);
  static void cb_check_cfg_auto_start_rec(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_cfg_rec_after_launch;
private:
  inline void cb_check_cfg_rec_after_launch_i(Fl_Check_Button*, void*);
  static void cb_check_cfg_rec_after_launch(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *input_rec_signal;
private:
  inline void cb_input_rec_signal_i(Fl_Value_Input*, void*);
  static void cb_input_rec_signal(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *check_cfg_auto_stop_rec;
private:
  inline void cb_check_cfg_auto_stop_rec_i(Fl_Check_Button*, void*);
  static void cb_check_cfg_auto_stop_rec(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *input_rec_silence;
private:
  inline void cb_input_rec_silence_i(Fl_Value_Input*, void*);
  static void cb_input_rec_silence(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *check_rec_signal;
private:
  inline void cb_check_rec_signal_i(Fl_Check_Button*, void*);
  static void cb_check_rec_signal(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_rec_silence;
private:
  inline void cb_check_rec_silence_i(Fl_Check_Button*, void*);
  static void cb_check_rec_silence(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_stream_eq;
private:
  inline void cb_check_stream_eq_i(Fl_Check_Button*, void*);
  static void cb_check_stream_eq(Fl_Check_Button*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider1;
private:
  inline void cb_equalizerSlider1_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider1(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider2;
private:
  inline void cb_equalizerSlider2_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider2(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider3;
private:
  inline void cb_equalizerSlider3_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider3(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider4;
private:
  inline void cb_equalizerSlider4_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider4(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider5;
private:
  inline void cb_equalizerSlider5_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider5(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *equalizerGain1;
  Fl_Text_Display *equalizerGain2;
  Fl_Text_Display *equalizerGain3;
  Fl_Text_Display *equalizerGain4;
  Fl_Text_Display *equalizerGain5;
  Fl_My_Value_Slider *equalizerSlider6;
private:
  inline void cb_equalizerSlider6_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider6(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider7;
private:
  inline void cb_equalizerSlider7_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider7(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider8;
private:
  inline void cb_equalizerSlider8_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider8(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider9;
private:
  inline void cb_equalizerSlider9_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider9(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *equalizerSlider10;
private:
  inline void cb_equalizerSlider10_i(Fl_My_Value_Slider*, void*);
  static void cb_equalizerSlider10(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *equalizerGain6;
  Fl_Text_Display *equalizerGain7;
  Fl_Text_Display *equalizerGain8;
  Fl_Text_Display *equalizerGain9;
  Fl_Text_Display *equalizerGain10;
  Fl_Choice *choice_eq_preset;
private:
  inline void cb_choice_eq_preset_i(Fl_Choice*, void*);
  static void cb_choice_eq_preset(Fl_Choice*, void*);
  static unsigned char menu_choice_eq_preset_i18n_done;
  static Fl_Menu_Item menu_choice_eq_preset[];
public:
  Fl_Check_Button *check_rec_eq;
private:
  inline void cb_check_rec_eq_i(Fl_Check_Button*, void*);
  static void cb_check_rec_eq(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_stream_drc;
private:
  inline void cb_check_stream_drc_i(Fl_Check_Button*, void*);
  static void cb_check_stream_drc(Fl_Check_Button*, void*);
public:
  Fl_My_Value_Slider *thresholdSlider;
private:
  inline void cb_thresholdSlider_i(Fl_My_Value_Slider*, void*);
  static void cb_thresholdSlider(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *ratioSlider;
private:
  inline void cb_ratioSlider_i(Fl_My_Value_Slider*, void*);
  static void cb_ratioSlider(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *attackSlider;
private:
  inline void cb_attackSlider_i(Fl_My_Value_Slider*, void*);
  static void cb_attackSlider(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *releaseSlider;
private:
  inline void cb_releaseSlider_i(Fl_My_Value_Slider*, void*);
  static void cb_releaseSlider(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *threshold;
  Fl_Text_Display *ratio;
  Fl_Text_Display *attack;
  Fl_Text_Display *release;
  Fl_My_Value_Slider *makeupSlider;
private:
  inline void cb_makeupSlider_i(Fl_My_Value_Slider*, void*);
  static void cb_makeupSlider(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *makeup;
  Fl_Check_Button *check_aggressive_mode;
private:
  inline void cb_check_aggressive_mode_i(Fl_Check_Button*, void*);
  static void cb_check_aggressive_mode(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_rec_drc;
private:
  inline void cb_check_rec_drc_i(Fl_Check_Button*, void*);
  static void cb_check_rec_drc(Fl_Check_Button*, void*);
public:
  LED *LED_comp_threshold;
private:
  inline void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
  inline void cb_Reset1_i(Fl_Button*, void*);
  static void cb_Reset1(Fl_Button*, void*);
public:
  Fl_Choice *choice_midi_dev;
private:
  inline void cb_choice_midi_dev_i(Fl_Choice*, void*);
  static void cb_choice_midi_dev(Fl_Choice*, void*);
public:
  Fl_Button *button_midi_rescan_devices;
private:
  inline void cb_button_midi_rescan_devices_i(Fl_Button*, void*);
  static void cb_button_midi_rescan_devices(Fl_Button*, void*);
public:
  LED *LED_midi_command;
  Fl_Browser *browser_midi_command;
private:
  inline void cb_browser_midi_command_i(Fl_Browser*, void*);
  static void cb_browser_midi_command(Fl_Browser*, void*);
public:
  Fl_Check_Button *check_midi_command_enable;
private:
  inline void cb_check_midi_command_enable_i(Fl_Check_Button*, void*);
  static void cb_check_midi_command_enable(Fl_Check_Button*, void*);
public:
  Fl_Group *group_midi_command_settings;
  Fl_Choice *choice_midi_channel;
private:
  inline void cb_choice_midi_channel_i(Fl_Choice*, void*);
  static void cb_choice_midi_channel(Fl_Choice*, void*);
  static unsigned char menu_choice_midi_channel_i18n_done;
  static Fl_Menu_Item menu_choice_midi_channel[];
public:
  Fl_Value_Input *input_midi_msg_num;
private:
  inline void cb_input_midi_msg_num_i(Fl_Value_Input*, void*);
  static void cb_input_midi_msg_num(Fl_Value_Input*, void*);
public:
  Fl_Button *button_midi_learn;
private:
  inline void cb_button_midi_learn_i(Fl_Button*, void*);
  static void cb_button_midi_learn(Fl_Button*, void*);
public:
  Fl_Choice *choice_midi_cc_mode;
private:
  inline void cb_choice_midi_cc_mode_i(Fl_Choice*, void*);
  static void cb_choice_midi_cc_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_midi_cc_mode_i18n_done;
  static Fl_Menu_Item menu_choice_midi_cc_mode[];
public:
  Fl_Check_Button *check_midi_soft_takeover;
private:
  inline void cb_check_midi_soft_takeover_i(Fl_Check_Button*, void*);
  static void cb_check_midi_soft_takeover(Fl_Check_Button*, void*);
public:
  Fl_Input *input_tls_cert_file;
private:
  inline void cb_input_tls_cert_file_i(Fl_Input*, void*);
  static void cb_input_tls_cert_file(Fl_Input*, void*);
public:
  Fl_Input *input_tls_cert_dir;
private:
  inline void cb_input_tls_cert_dir_i(Fl_Input*, void*);
  static void cb_input_tls_cert_dir(Fl_Input*, void*);
public:
  Fl_Button *button_tls_browse_dir;
private:
  inline void cb_button_tls_browse_dir_i(Fl_Button*, void*);
  static void cb_button_tls_browse_dir(Fl_Button*, void*);
public:
  Fl_Button *button_tls_browse_file;
private:
  inline void cb_button_tls_browse_file_i(Fl_Button*, void*);
  static void cb_button_tls_browse_file(Fl_Button*, void*);
public:
  Fl_Button *button_gui_text_color;
private:
  inline void cb_button_gui_text_color_i(Fl_Button*, void*);
  static void cb_button_gui_text_color(Fl_Button*, void*);
public:
  Fl_Button *button_gui_bg_color;
private:
  inline void cb_button_gui_bg_color_i(Fl_Button*, void*);
  static void cb_button_gui_bg_color(Fl_Button*, void*);
public:
  Fl_Check_Button *check_gui_attach;
private:
  inline void cb_check_gui_attach_i(Fl_Check_Button*, void*);
  static void cb_check_gui_attach(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_ontop;
private:
  inline void cb_check_gui_ontop_i(Fl_Check_Button*, void*);
  static void cb_check_gui_ontop(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_lcd_auto;
private:
  inline void cb_check_gui_lcd_auto_i(Fl_Check_Button*, void*);
  static void cb_check_gui_lcd_auto(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_hide_log_window;
private:
  inline void cb_check_gui_hide_log_window_i(Fl_Check_Button*, void*);
  static void cb_check_gui_hide_log_window(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_remember_pos;
private:
  inline void cb_check_gui_remember_pos_i(Fl_Check_Button*, void*);
  static void cb_check_gui_remember_pos(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_start_minimized;
private:
  inline void cb_check_gui_start_minimized_i(Fl_Check_Button*, void*);
  static void cb_check_gui_start_minimized(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_disable_gain_slider;
private:
  inline void cb_check_gui_disable_gain_slider_i(Fl_Check_Button*, void*);
  static void cb_check_gui_disable_gain_slider(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *check_gui_show_listeners;
private:
  inline void cb_check_gui_show_listeners_i(Fl_Check_Button*, void*);
  static void cb_check_gui_show_listeners(Fl_Check_Button*, void*);
public:
  Fl_Input *input_gui_window_title;
private:
  inline void cb_input_gui_window_title_i(Fl_Input*, void*);
  static void cb_input_gui_window_title(Fl_Input*, void*);
public:
  Fl_Choice *choice_gui_language;
private:
  inline void cb_choice_gui_language_i(Fl_Choice*, void*);
  static void cb_choice_gui_language(Fl_Choice*, void*);
  static unsigned char menu_choice_gui_language_i18n_done;
  static Fl_Menu_Item menu_choice_gui_language[];
public:
  Fl_Round_Button *radio_gui_vu_gradient;
private:
  inline void cb_radio_gui_vu_gradient_i(Fl_Round_Button*, void*);
  static void cb_radio_gui_vu_gradient(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_gui_vu_solid;
private:
  inline void cb_radio_gui_vu_solid_i(Fl_Round_Button*, void*);
  static void cb_radio_gui_vu_solid(Fl_Round_Button*, void*);
public:
  Fl_Check_Button *check_gui_always_show_vu_tabs;
private:
  inline void cb_check_gui_always_show_vu_tabs_i(Fl_Check_Button*, void*);
  static void cb_check_gui_always_show_vu_tabs(Fl_Check_Button*, void*);
  inline void cb_Donate_i(Fl_Button*, void*);
  static void cb_Donate(Fl_Button*, void*);
  inline void cb_Become_i(Fl_Button*, void*);
  static void cb_Become(Fl_Button*, void*);
  inline void cb_Bitcoin_i(Fl_Button*, void*);
  static void cb_Bitcoin(Fl_Button*, void*);
  inline void cb_Apple_i(Fl_Button*, void*);
  static void cb_Apple(Fl_Button*, void*);
public:
  Fl_Double_Window *window_add_srv;
  Fl_Input *input_add_srv_name;
  Fl_Input *input_add_srv_addr;
  Fl_Int_Input *input_add_srv_port;
  Fl_Input *input_add_srv_pwd;
  Fl_Input *input_add_srv_mount;
  Fl_Input *input_add_srv_usr;
  Fl_Button *button_cfg_show_pw;
private:
  inline void cb_button_cfg_show_pw_i(Fl_Button*, void*);
  static void cb_button_cfg_show_pw(Fl_Button*, void*);
public:
  Fl_Round_Button *radio_add_srv_shoutcast;
private:
  inline void cb_radio_add_srv_shoutcast_i(Fl_Round_Button*, void*);
  static void cb_radio_add_srv_shoutcast(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_add_srv_icecast;
private:
  inline void cb_radio_add_srv_icecast_i(Fl_Round_Button*, void*);
  static void cb_radio_add_srv_icecast(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_add_srv_radioco;
private:
  inline void cb_radio_add_srv_radioco_i(Fl_Round_Button*, void*);
  static void cb_radio_add_srv_radioco(Fl_Round_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Button *button_add_srv_add;
private:
  inline void cb_button_add_srv_add_i(Fl_Button*, void*);
  static void cb_button_add_srv_add(Fl_Button*, void*);
public:
  Fl_Button *button_add_srv_save;
private:
  inline void cb_button_add_srv_save_i(Fl_Button*, void*);
  static void cb_button_add_srv_save(Fl_Button*, void*);
public:
  Fl_Group *frame_add_srv_tls;
  Fl_Check_Button *check_add_srv_tls;
  Fl_Button *button_add_srv_revoke_cert;
private:
  inline void cb_button_add_srv_revoke_cert_i(Fl_Button*, void*);
  static void cb_button_add_srv_revoke_cert(Fl_Button*, void*);
public:
  Fl_Check_Browser *browser_add_srv_station_list;
  Fl_Button *button_add_srv_get_stations;
private:
  inline void cb_button_add_srv_get_stations_i(Fl_Button*, void*);
  static void cb_button_add_srv_get_stations(Fl_Button*, void*);
public:
  Fl_Button *button_add_srv_select_all;
private:
  inline void cb_button_add_srv_select_all_i(Fl_Button*, void*);
  static void cb_button_add_srv_select_all(Fl_Button*, void*);
public:
  Fl_Button *button_add_srv_deselect_all;
private:
  inline void cb_button_add_srv_deselect_all_i(Fl_Button*, void*);
  static void cb_button_add_srv_deselect_all(Fl_Button*, void*);
public:
  Fl_Check_Button *check_add_srv_protocol;
  Fl_Double_Window *window_add_icy;
  Fl_Input *input_add_icy_name;
  Fl_Input *input_add_icy_desc;
  Fl_Input *input_add_icy_genre;
  Fl_Input *input_add_icy_url;
  Fl_Input *input_add_icy_icq;
  Fl_Input *input_add_icy_irc;
  Fl_Input *input_add_icy_aim;
  Fl_Check_Button *check_add_icy_pub;
private:
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
public:
  Fl_Button *button_add_icy_add;
private:
  inline void cb_button_add_icy_add_i(Fl_Button*, void*);
  static void cb_button_add_icy_add(Fl_Button*, void*);
public:
  Fl_Button *button_add_icy_save;
private:
  inline void cb_button_add_icy_save_i(Fl_Button*, void*);
  static void cb_button_add_icy_save(Fl_Button*, void*);
public:
  Fl_Check_Button *check_expand_variables;
  Fl_My_Double_Window *window_donate_crypto;
  Fl_Output *output_bitcoin_addr;
private:
  inline void cb_Copy_i(Fl_Button*, void*);
  static void cb_Copy(Fl_Button*, void*);
public:
  Fl_Output *output_litecoin_addr;
private:
  inline void cb_Copy1_i(Fl_Button*, void*);
  static void cb_Copy1(Fl_Button*, void*);
public:
  Fl_Output *output_monero_addr;
private:
  inline void cb_Copy2_i(Fl_Button*, void*);
  static void cb_Copy2(Fl_Button*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_My_Double_Window *window_stream_codec_settings;
  Fl_Choice *choice_stream_mp3_enc_quality;
private:
  inline void cb_choice_stream_mp3_enc_quality_i(Fl_Choice*, void*);
  static void cb_choice_stream_mp3_enc_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_mp3_enc_quality_i18n_done;
  static Fl_Menu_Item menu_choice_stream_mp3_enc_quality[];
public:
  Fl_Choice *choice_stream_mp3_stereo_mode;
private:
  inline void cb_choice_stream_mp3_stereo_mode_i(Fl_Choice*, void*);
  static void cb_choice_stream_mp3_stereo_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_mp3_stereo_mode_i18n_done;
  static Fl_Menu_Item menu_choice_stream_mp3_stereo_mode[];
public:
  Fl_Choice *choice_stream_mp3_bitrate_mode;
private:
  inline void cb_choice_stream_mp3_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_stream_mp3_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_mp3_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_stream_mp3_bitrate_mode[];
public:
  Fl_Choice *choice_stream_mp3_vbr_quality;
private:
  inline void cb_choice_stream_mp3_vbr_quality_i(Fl_Choice*, void*);
  static void cb_choice_stream_mp3_vbr_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_mp3_vbr_quality_i18n_done;
  static Fl_Menu_Item menu_choice_stream_mp3_vbr_quality[];
public:
  Fl_Choice *choice_stream_mp3_vbr_min_bitrate;
private:
  inline void cb_choice_stream_mp3_vbr_min_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_stream_mp3_vbr_min_bitrate(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_mp3_vbr_min_bitrate_i18n_done;
  static Fl_Menu_Item menu_choice_stream_mp3_vbr_min_bitrate[];
public:
  Fl_Choice *choice_stream_mp3_vbr_max_bitrate;
private:
  inline void cb_choice_stream_mp3_vbr_max_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_stream_mp3_vbr_max_bitrate(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_mp3_vbr_max_bitrate_i18n_done;
  static Fl_Menu_Item menu_choice_stream_mp3_vbr_max_bitrate[];
public:
  Fl_Choice *choice_stream_vorbis_bitrate_mode;
private:
  inline void cb_choice_stream_vorbis_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_stream_vorbis_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_vorbis_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_stream_vorbis_bitrate_mode[];
public:
  Fl_Choice *choice_stream_vorbis_vbr_quality;
private:
  inline void cb_choice_stream_vorbis_vbr_quality_i(Fl_Choice*, void*);
  static void cb_choice_stream_vorbis_vbr_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_vorbis_vbr_quality_i18n_done;
  static Fl_Menu_Item menu_choice_stream_vorbis_vbr_quality[];
public:
  Fl_Choice *choice_stream_vorbis_vbr_min_bitrate;
private:
  inline void cb_choice_stream_vorbis_vbr_min_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_stream_vorbis_vbr_min_bitrate(Fl_Choice*, void*);
public:
  Fl_Choice *choice_stream_vorbis_vbr_max_bitrate;
private:
  inline void cb_choice_stream_vorbis_vbr_max_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_stream_vorbis_vbr_max_bitrate(Fl_Choice*, void*);
public:
  Fl_Choice *choice_stream_opus_audio_type;
private:
  inline void cb_choice_stream_opus_audio_type_i(Fl_Choice*, void*);
  static void cb_choice_stream_opus_audio_type(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_opus_audio_type_i18n_done;
  static Fl_Menu_Item menu_choice_stream_opus_audio_type[];
public:
  Fl_Choice *choice_stream_opus_bitrate_mode;
private:
  inline void cb_choice_stream_opus_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_stream_opus_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_opus_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_stream_opus_bitrate_mode[];
public:
  Fl_Choice *choice_stream_opus_quality;
private:
  inline void cb_choice_stream_opus_quality_i(Fl_Choice*, void*);
  static void cb_choice_stream_opus_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_opus_quality_i18n_done;
  static Fl_Menu_Item menu_choice_stream_opus_quality[];
public:
  Fl_Choice *choice_stream_opus_bandwidth;
private:
  inline void cb_choice_stream_opus_bandwidth_i(Fl_Choice*, void*);
  static void cb_choice_stream_opus_bandwidth(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_opus_bandwidth_i18n_done;
  static Fl_Menu_Item menu_choice_stream_opus_bandwidth[];
public:
  Fl_Group *tab_stream_aac;
  Fl_Choice *choice_stream_aac_profile;
private:
  inline void cb_choice_stream_aac_profile_i(Fl_Choice*, void*);
  static void cb_choice_stream_aac_profile(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_aac_profile_i18n_done;
  static Fl_Menu_Item menu_choice_stream_aac_profile[];
public:
  Fl_Choice *choice_stream_aac_afterburner;
private:
  inline void cb_choice_stream_aac_afterburner_i(Fl_Choice*, void*);
  static void cb_choice_stream_aac_afterburner(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_aac_afterburner_i18n_done;
  static Fl_Menu_Item menu_choice_stream_aac_afterburner[];
public:
  Fl_Choice *choice_stream_aac_bitrate_mode;
private:
  inline void cb_choice_stream_aac_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_stream_aac_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_stream_aac_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_stream_aac_bitrate_mode[];
public:
  Fl_Round_Button *radio_stream_flac_bit_depth_16;
private:
  inline void cb_radio_stream_flac_bit_depth_16_i(Fl_Round_Button*, void*);
  static void cb_radio_stream_flac_bit_depth_16(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_stream_flac_bit_depth_24;
private:
  inline void cb_radio_stream_flac_bit_depth_24_i(Fl_Round_Button*, void*);
  static void cb_radio_stream_flac_bit_depth_24(Fl_Round_Button*, void*);
  inline void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_My_Double_Window *window_rec_codec_settings;
  Fl_Choice *choice_rec_mp3_enc_quality;
private:
  inline void cb_choice_rec_mp3_enc_quality_i(Fl_Choice*, void*);
  static void cb_choice_rec_mp3_enc_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_mp3_enc_quality_i18n_done;
  static Fl_Menu_Item menu_choice_rec_mp3_enc_quality[];
public:
  Fl_Choice *choice_rec_mp3_stereo_mode;
private:
  inline void cb_choice_rec_mp3_stereo_mode_i(Fl_Choice*, void*);
  static void cb_choice_rec_mp3_stereo_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_mp3_stereo_mode_i18n_done;
  static Fl_Menu_Item menu_choice_rec_mp3_stereo_mode[];
public:
  Fl_Choice *choice_rec_mp3_bitrate_mode;
private:
  inline void cb_choice_rec_mp3_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_rec_mp3_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_mp3_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_rec_mp3_bitrate_mode[];
public:
  Fl_Choice *choice_rec_mp3_vbr_quality;
private:
  inline void cb_choice_rec_mp3_vbr_quality_i(Fl_Choice*, void*);
  static void cb_choice_rec_mp3_vbr_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_mp3_vbr_quality_i18n_done;
  static Fl_Menu_Item menu_choice_rec_mp3_vbr_quality[];
public:
  Fl_Choice *choice_rec_mp3_vbr_min_bitrate;
private:
  inline void cb_choice_rec_mp3_vbr_min_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_rec_mp3_vbr_min_bitrate(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_mp3_vbr_min_bitrate_i18n_done;
  static Fl_Menu_Item menu_choice_rec_mp3_vbr_min_bitrate[];
public:
  Fl_Choice *choice_rec_mp3_vbr_max_bitrate;
private:
  inline void cb_choice_rec_mp3_vbr_max_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_rec_mp3_vbr_max_bitrate(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_mp3_vbr_max_bitrate_i18n_done;
  static Fl_Menu_Item menu_choice_rec_mp3_vbr_max_bitrate[];
public:
  Fl_Choice *choice_rec_vorbis_bitrate_mode;
private:
  inline void cb_choice_rec_vorbis_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_rec_vorbis_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_vorbis_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_rec_vorbis_bitrate_mode[];
public:
  Fl_Choice *choice_rec_vorbis_vbr_quality;
private:
  inline void cb_choice_rec_vorbis_vbr_quality_i(Fl_Choice*, void*);
  static void cb_choice_rec_vorbis_vbr_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_vorbis_vbr_quality_i18n_done;
  static Fl_Menu_Item menu_choice_rec_vorbis_vbr_quality[];
public:
  Fl_Choice *choice_rec_vorbis_vbr_min_bitrate;
private:
  inline void cb_choice_rec_vorbis_vbr_min_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_rec_vorbis_vbr_min_bitrate(Fl_Choice*, void*);
public:
  Fl_Choice *choice_rec_vorbis_vbr_max_bitrate;
private:
  inline void cb_choice_rec_vorbis_vbr_max_bitrate_i(Fl_Choice*, void*);
  static void cb_choice_rec_vorbis_vbr_max_bitrate(Fl_Choice*, void*);
public:
  Fl_Choice *choice_rec_opus_audio_type;
private:
  inline void cb_choice_rec_opus_audio_type_i(Fl_Choice*, void*);
  static void cb_choice_rec_opus_audio_type(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_opus_audio_type_i18n_done;
  static Fl_Menu_Item menu_choice_rec_opus_audio_type[];
public:
  Fl_Choice *choice_rec_opus_bitrate_mode;
private:
  inline void cb_choice_rec_opus_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_rec_opus_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_opus_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_rec_opus_bitrate_mode[];
public:
  Fl_Choice *choice_rec_opus_quality;
private:
  inline void cb_choice_rec_opus_quality_i(Fl_Choice*, void*);
  static void cb_choice_rec_opus_quality(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_opus_quality_i18n_done;
  static Fl_Menu_Item menu_choice_rec_opus_quality[];
public:
  Fl_Choice *choice_rec_opus_bandwidth;
private:
  inline void cb_choice_rec_opus_bandwidth_i(Fl_Choice*, void*);
  static void cb_choice_rec_opus_bandwidth(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_opus_bandwidth_i18n_done;
  static Fl_Menu_Item menu_choice_rec_opus_bandwidth[];
public:
  Fl_Group *tab_rec_aac;
  Fl_Choice *choice_rec_aac_profile;
private:
  inline void cb_choice_rec_aac_profile_i(Fl_Choice*, void*);
  static void cb_choice_rec_aac_profile(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_aac_profile_i18n_done;
  static Fl_Menu_Item menu_choice_rec_aac_profile[];
public:
  Fl_Choice *choice_rec_aac_afterburner;
private:
  inline void cb_choice_rec_aac_afterburner_i(Fl_Choice*, void*);
  static void cb_choice_rec_aac_afterburner(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_aac_afterburner_i18n_done;
  static Fl_Menu_Item menu_choice_rec_aac_afterburner[];
public:
  Fl_Choice *choice_rec_aac_bitrate_mode;
private:
  inline void cb_choice_rec_aac_bitrate_mode_i(Fl_Choice*, void*);
  static void cb_choice_rec_aac_bitrate_mode(Fl_Choice*, void*);
  static unsigned char menu_choice_rec_aac_bitrate_mode_i18n_done;
  static Fl_Menu_Item menu_choice_rec_aac_bitrate_mode[];
public:
  Fl_Round_Button *radio_rec_flac_bit_depth_16;
private:
  inline void cb_radio_rec_flac_bit_depth_16_i(Fl_Round_Button*, void*);
  static void cb_radio_rec_flac_bit_depth_16(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_rec_flac_bit_depth_24;
private:
  inline void cb_radio_rec_flac_bit_depth_24_i(Fl_Round_Button*, void*);
  static void cb_radio_rec_flac_bit_depth_24(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_rec_wav_bit_depth_16;
private:
  inline void cb_radio_rec_wav_bit_depth_16_i(Fl_Round_Button*, void*);
  static void cb_radio_rec_wav_bit_depth_16(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_rec_wav_bit_depth_32;
private:
  inline void cb_radio_rec_wav_bit_depth_32_i(Fl_Round_Button*, void*);
  static void cb_radio_rec_wav_bit_depth_32(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *radio_rec_wav_bit_depth_24;
private:
  inline void cb_radio_rec_wav_bit_depth_24_i(Fl_Round_Button*, void*);
  static void cb_radio_rec_wav_bit_depth_24(Fl_Round_Button*, void*);
  inline void cb_Close2_i(Fl_Button*, void*);
  static void cb_Close2(Fl_Button*, void*);
public:
  Fl_My_Double_Window *window_mixer;
  Fl_My_Value_Slider *slider_mixer_primary_device;
private:
  inline void cb_slider_mixer_primary_device_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_mixer_primary_device(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *slider_mixer_secondary_device;
private:
  inline void cb_slider_mixer_secondary_device_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_mixer_secondary_device(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *text_mixer_primary_device_volume;
  Fl_Text_Display *text_mixer_secondary_device_volume;
  Fl_My_Value_Slider *slider_mixer_recording_gain;
private:
  inline void cb_slider_mixer_recording_gain_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_mixer_recording_gain(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *text_mixer_recording_volume;
  Fl_My_Value_Slider *slider_mixer_streaming_gain;
private:
  inline void cb_slider_mixer_streaming_gain_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_mixer_streaming_gain(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *text_mixer_streaming_volume;
  Fl_Light_Button *button_mixer_mute_primary_device;
private:
  inline void cb_button_mixer_mute_primary_device_i(Fl_Light_Button*, void*);
  static void cb_button_mixer_mute_primary_device(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *button_mixer_mute_secondary_device;
private:
  inline void cb_button_mixer_mute_secondary_device_i(Fl_Light_Button*, void*);
  static void cb_button_mixer_mute_secondary_device(Fl_Light_Button*, void*);
public:
  Fl_My_Value_Slider *slider_mixer_cross_fader;
private:
  inline void cb_slider_mixer_cross_fader_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_mixer_cross_fader(Fl_My_Value_Slider*, void*);
public:
  Fl_My_Value_Slider *slider_mixer_master_gain;
private:
  inline void cb_slider_mixer_master_gain_i(Fl_My_Value_Slider*, void*);
  static void cb_slider_mixer_master_gain(Fl_My_Value_Slider*, void*);
public:
  Fl_Text_Display *text_mixer_master_volume;
private:
  inline void cb_Reset2_i(Fl_Button*, void*);
  static void cb_Reset2(Fl_Button*, void*);
public:
  ~flgui();
};
#endif
