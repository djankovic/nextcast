// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "../../gettext.h"
#include "flgui.h"

void flgui::cb_window_main_i(Fl_My_Double_Window*, void*) {
  window_main_close_cb(true);
}
void flgui::cb_window_main(Fl_My_Double_Window* o, void* v) {
  ((flgui*)(o->user_data()))->cb_window_main_i(o,v);
}

void flgui::cb_vu_tabs_i(Fl_Tabs*, void*) {
  vu_tabs_cb();
}
void flgui::cb_vu_tabs(Fl_Tabs* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_vu_tabs_i(o,v);
}

void flgui::cb_lcd_i(Fl_ILM216*, void*) {
  ILM216_cb();
}
void flgui::cb_lcd(Fl_ILM216* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_lcd_i(o,v);
}

void flgui::cb_button_connect_i(Fl_Button*, void*) {
  button_connect_cb();
}
void flgui::cb_button_connect(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_connect_i(o,v);
}

void flgui::cb_button_disconnect_i(Fl_Button*, void*) {
  button_disconnect_cb(true);
}
void flgui::cb_button_disconnect(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_disconnect_i(o,v);
}

void flgui::cb_button_record_i(Fl_Button*, void*) {
  button_record_cb(true);
}
void flgui::cb_button_record(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_record_i(o,v);
}

void flgui::cb_button_info_i(Fl_Button*, void*) {
  button_info_cb();
}
void flgui::cb_button_info(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_info_i(o,v);
}

void flgui::cb_button_cfg_i(Fl_Button*, void*) {
  button_cfg_cb();
}
void flgui::cb_button_cfg(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_cfg_i(o,v);
}

void flgui::cb_slider_gain_i(Fl_My_Value_Slider*, void* v) {
  slider_gain_cb(v);
}
void flgui::cb_slider_gain(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_slider_gain_i(o,v);
}

void flgui::cb_radio_co_logo_i(Fl_Button*, void*) {
  fl_open_uri("https://radio.co/?utm_source=butt&utm_medium=app");
}
void flgui::cb_radio_co_logo(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_radio_co_logo_i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_radio_co_badge[] =
{0,0,0,0,255,255,255,19,255,255,255,68,255,255,255,66,255,255,255,66,255,
255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,
255,67,255,255,255,67,255,255,255,67,255,255,255,66,255,255,255,66,255,255,255,
67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,
255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,
255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,
255,66,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,
67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,
255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,
255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,
255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,66,255,255,255,
67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,
255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,
255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,
255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,
67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,
255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,66,255,255,255,67,255,
255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,
255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,
67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,
255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,
255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,255,67,255,255,
255,67,255,255,255,67,255,255,255,67,255,255,255,66,255,255,255,66,255,255,255,
67,255,255,255,66,255,255,255,12,0,0,0,0,255,255,255,62,255,255,255,242,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,230,255,255,255,45,255,255,255,223,255,255,255,255,255,255,255,249,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,
255,255,253,255,255,255,253,255,255,255,253,255,255,255,248,255,255,255,255,255,
255,255,194,255,255,255,255,255,255,255,252,255,255,255,255,255,255,255,255,255,
255,255,254,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,
255,255,254,255,255,255,254,255,255,255,255,255,255,255,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,255,255,255,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,233,255,
255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,253,255,255,255,255,255,255,255,231,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,
255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,
255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,253,253,253,255,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,253,
253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,241,241,241,255,210,
210,210,255,234,234,234,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,222,222,222,255,247,247,247,255,255,255,255,255,254,
254,254,255,255,255,255,255,243,243,243,255,225,225,225,255,255,255,255,255,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,
255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
253,253,255,255,255,255,255,221,221,221,255,35,35,35,255,102,102,102,255,38,38,
38,255,212,212,212,255,255,255,255,255,252,252,252,255,254,254,254,255,255,255,
255,255,254,254,254,255,254,254,254,255,255,255,255,255,254,254,254,255,253,253,
253,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,
255,255,254,254,254,255,254,254,254,255,255,255,255,255,253,253,253,255,255,255,
255,255,255,255,255,255,253,253,253,255,255,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,253,253,253,255,254,254,254,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,
255,255,255,255,255,255,253,253,253,255,255,255,255,255,254,254,254,255,254,254,
254,255,255,255,255,255,254,254,254,255,253,253,253,255,255,255,255,255,251,251,
251,255,66,66,66,255,226,226,226,255,255,255,255,255,252,252,252,255,255,255,
255,255,208,208,208,255,98,98,98,255,255,255,255,255,254,254,254,255,253,253,
253,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,
255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,
255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,
255,255,116,116,116,255,174,174,174,255,255,255,255,255,237,237,237,255,245,245,
245,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,253,253,253,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,102,102,
102,255,227,227,227,255,255,255,255,255,252,252,252,255,255,255,255,255,210,210,
210,255,125,125,125,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,253,253,253,255,255,255,255,255,174,174,
174,255,81,81,81,255,229,229,229,255,255,255,255,255,255,255,255,255,252,252,
252,255,166,166,166,255,148,148,148,255,105,105,105,255,131,131,131,255,237,237,
237,255,255,255,255,255,252,252,252,255,168,168,168,255,97,97,97,255,127,127,
127,255,230,230,230,255,255,255,255,255,212,212,212,255,143,143,143,255,133,133,
133,255,97,97,97,255,207,207,207,255,255,255,255,255,253,253,253,255,178,178,
178,255,103,103,103,255,137,137,137,255,244,244,244,255,255,255,255,255,201,201,
201,255,105,105,105,255,106,106,106,255,202,202,202,255,255,255,255,255,239,239,
239,255,158,158,158,255,139,139,139,255,155,155,155,255,255,255,255,255,185,185,
185,255,110,110,110,255,132,132,132,255,232,232,232,255,255,255,255,255,251,251,
251,255,163,163,163,255,95,95,95,255,144,144,144,255,68,68,68,255,229,229,229,
255,255,255,255,255,252,252,252,255,255,255,255,255,214,214,214,255,71,71,71,
255,143,143,143,255,91,91,91,255,178,178,178,255,255,255,255,255,180,180,180,
255,196,196,196,255,255,255,255,255,253,253,253,255,154,154,154,255,227,227,227,
255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,255,255,255,255,255,253,253,253,255,174,174,174,
255,34,34,34,255,123,123,123,255,243,243,243,255,255,255,255,255,61,61,61,255,
142,142,142,255,233,233,233,255,158,158,158,255,87,87,87,255,255,255,255,255,
164,164,164,255,94,94,94,255,231,231,231,255,173,173,173,255,53,53,53,255,255,
255,255,255,194,194,194,255,0,0,0,255,215,215,215,255,208,208,208,255,0,0,0,255,
239,239,239,255,223,223,223,255,0,0,0,255,233,233,233,255,219,219,219,255,255,
255,255,255,218,218,218,255,0,0,0,255,212,212,212,255,212,212,212,255,0,0,0,255,
222,222,222,255,244,244,244,255,0,0,0,255,170,170,170,255,245,245,245,255,201,
201,201,255,58,58,58,255,231,231,231,255,182,182,182,255,72,72,72,255,255,255,
255,255,163,163,163,255,98,98,98,255,230,230,230,255,186,186,186,255,0,0,0,255,
232,232,232,255,255,255,255,255,252,252,252,255,255,255,255,255,217,217,217,255,
0,0,0,255,201,201,201,255,224,224,224,255,48,48,48,255,197,197,197,255,225,
225,225,255,19,19,19,255,255,255,255,255,217,217,217,255,62,62,62,255,252,252,
252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,250,250,250,255,138,138,138,255,131,131,131,255,255,255,255,255,101,101,
101,255,238,238,238,255,255,255,255,255,255,255,255,255,86,86,86,255,221,221,
221,255,105,105,105,255,230,230,230,255,255,255,255,255,255,255,255,255,99,99,
99,255,225,225,225,255,200,200,200,255,146,146,146,255,255,255,255,255,255,255,
255,255,137,137,137,255,193,193,193,255,254,254,254,255,116,116,116,255,110,110,
110,255,199,199,199,255,255,255,255,255,151,151,151,255,176,176,176,255,255,255,
255,255,255,255,255,255,175,175,175,255,161,161,161,255,246,246,246,255,85,85,
85,255,254,254,254,255,255,255,255,255,145,145,145,255,93,93,93,255,145,145,
145,255,134,134,134,255,85,85,85,255,229,229,229,255,98,98,98,255,231,231,231,
255,255,255,255,255,255,255,255,255,98,98,98,255,227,227,227,255,255,255,255,
255,252,252,252,255,255,255,255,255,210,210,210,255,123,123,123,255,255,255,255,
255,255,255,255,255,216,216,216,255,98,98,98,255,255,255,255,255,114,114,114,
255,199,199,199,255,147,147,147,255,185,185,185,255,255,255,255,255,252,252,252,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,200,200,200,255,237,237,237,255,255,255,255,
255,211,211,211,255,73,73,73,255,255,255,255,255,94,94,94,255,217,217,217,255,
255,255,255,255,235,235,235,255,35,35,35,255,239,239,239,255,114,114,114,255,
195,195,195,255,255,255,255,255,245,245,245,255,38,38,38,255,238,238,238,255,
198,198,198,255,139,139,139,255,255,255,255,255,255,255,255,255,149,149,149,255,
190,190,190,255,255,255,255,255,249,249,249,255,233,233,233,255,44,44,44,255,
206,206,206,255,189,189,189,255,125,125,125,255,255,255,255,255,255,255,255,255,
127,127,127,255,183,183,183,255,245,245,245,255,85,85,85,255,244,244,244,255,
255,255,255,255,158,158,158,255,146,146,146,255,255,255,255,255,246,246,246,255,
233,233,233,255,255,255,255,255,99,99,99,255,196,196,196,255,255,255,255,255,
247,247,247,255,76,76,76,255,229,229,229,255,255,255,255,255,252,252,252,255,
255,255,255,255,213,213,213,255,99,99,99,255,255,255,255,255,255,255,255,255,
174,174,174,255,125,125,125,255,255,255,255,255,217,217,217,255,0,0,0,255,90,90,
90,255,245,245,245,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,
255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,146,146,146,255,46,46,46,255,136,136,136,255,0,0,0,255,195,195,195,255,
255,255,255,255,95,95,95,255,67,67,67,255,151,151,151,255,43,43,43,255,169,169,
169,255,255,255,255,255,214,214,214,255,17,17,17,255,147,147,147,255,74,74,74,
255,152,152,152,255,255,255,255,255,182,182,182,255,131,131,131,255,255,255,255,
255,255,255,255,255,132,132,132,255,194,194,194,255,234,234,234,255,92,92,92,
255,181,181,181,255,79,79,79,255,216,216,216,255,252,252,252,255,84,84,84,255,
122,122,122,255,122,122,122,255,89,89,89,255,251,251,251,255,236,236,236,255,57,
57,57,255,247,247,247,255,255,255,255,255,239,239,239,255,90,90,90,255,156,156,
156,255,144,144,144,255,133,133,133,255,255,255,255,255,214,214,214,255,0,0,0,
255,143,143,143,255,111,111,111,255,0,0,0,255,230,230,230,255,255,255,255,255,
252,252,252,255,255,255,255,255,215,215,215,255,0,0,0,255,126,126,126,255,134,
134,134,255,34,34,34,255,228,228,228,255,255,255,255,255,255,255,255,255,97,97,
97,255,164,164,164,255,255,255,255,255,253,253,253,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,
255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,221,221,221,255,190,190,190,255,223,223,
223,255,255,255,255,255,253,253,253,255,110,110,110,255,205,205,205,255,198,198,
198,255,217,217,217,255,255,255,255,255,254,254,254,255,255,255,255,255,235,235,
235,255,190,190,190,255,215,215,215,255,255,255,255,255,255,255,255,255,236,236,
236,255,227,227,227,255,255,255,255,255,255,255,255,255,228,228,228,255,237,237,
237,255,255,255,255,255,219,219,219,255,185,185,185,255,225,225,225,255,255,255,
255,255,255,255,255,255,249,249,249,255,199,199,199,255,199,199,199,255,249,249,
249,255,255,255,255,255,248,248,248,255,221,221,221,255,253,253,253,255,254,254,
254,255,255,255,255,255,246,246,246,255,195,195,195,255,199,199,199,255,245,245,
245,255,255,255,255,255,255,255,255,255,234,234,234,255,190,190,190,255,219,219,
219,255,222,222,222,255,246,246,246,255,255,255,255,255,254,254,254,255,255,255,
255,255,243,243,243,255,223,223,223,255,214,214,214,255,191,191,191,255,241,241,
241,255,255,255,255,255,255,255,255,255,247,247,247,255,81,81,81,255,233,233,
233,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,
255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,253,253,255,80,80,80,255,232,232,232,255,255,255,255,255,255,255,
255,255,254,254,254,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,
255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,255,255,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,251,
251,255,255,255,255,255,175,175,175,255,124,124,124,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,253,253,255,253,253,253,255,253,253,253,255,255,255,255,255,254,254,
254,255,145,145,145,255,232,232,232,255,255,255,255,255,252,252,252,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,253,255,253,253,
253,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,
255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,253,253,
253,255,253,253,253,255,253,253,253,255,255,255,255,255,255,255,255,255,254,254,
254,255,253,253,253,255,253,253,253,255,254,254,254,255,255,255,255,255,255,255,
255,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,253,253,253,255,253,253,253,255,254,254,254,255,255,255,255,255,255,255,
255,255,254,254,254,255,253,253,253,255,253,253,253,255,253,253,253,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,
253,255,253,253,253,255,253,253,253,255,254,254,254,255,255,255,255,255,255,255,
255,255,142,142,142,255,220,220,220,255,255,255,255,255,253,253,253,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,253,253,255,255,255,255,255,255,255,255,255,254,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,252,243,243,255,253,248,248,255,255,255,255,255,255,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,
255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,255,254,253,253,255,255,255,255,255,255,255,255,255,241,197,
197,255,224,87,87,255,226,110,110,255,245,218,218,255,255,255,255,255,255,254,
254,255,254,253,253,255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,
255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,255,254,253,253,255,255,255,
255,255,255,255,255,255,255,255,255,255,252,243,243,255,222,71,71,255,222,77,77,
255,220,44,44,255,228,124,124,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,253,253,255,255,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,253,253,255,255,255,255,255,255,255,255,255,247,225,225,255,237,181,181,
255,255,255,255,255,252,244,244,255,224,97,97,255,223,84,84,255,222,70,70,255,
229,132,132,255,255,255,255,255,251,241,241,255,237,178,178,255,251,240,240,255,
255,255,255,255,255,255,255,255,254,253,253,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,253,253,255,255,255,255,255,255,255,255,255,
252,243,243,255,235,172,172,255,221,55,55,255,223,74,74,255,254,249,249,255,252,
246,246,255,224,91,91,255,223,82,82,255,222,65,65,255,228,129,129,255,255,255,
255,255,248,229,229,255,219,0,0,255,224,93,93,255,240,192,192,255,254,252,252,
255,255,255,255,255,255,254,254,255,255,253,253,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,
255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
255,255,255,255,255,254,253,253,255,240,195,195,255,224,93,93,255,221,43,43,255,
222,78,78,255,226,107,107,255,254,250,250,255,252,245,245,255,224,91,91,255,223,
83,83,255,222,65,65,255,228,129,129,255,255,255,255,255,248,231,231,255,222,75,
75,255,223,81,81,255,220,31,31,255,227,119,119,255,244,213,213,255,255,255,255,
255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,255,253,253,253,255,254,254,254,255,255,255,255,
255,253,253,253,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,245,217,217,255,227,122,122,
255,220,31,31,255,222,78,78,255,224,92,92,255,222,75,75,255,225,101,101,255,254,
250,250,255,252,246,246,255,224,91,91,255,223,83,83,255,222,65,65,255,228,129,
129,255,255,255,255,255,248,230,230,255,221,63,63,255,223,86,86,255,224,91,91,
255,222,68,68,255,221,42,42,255,231,147,147,255,249,233,233,255,255,255,255,255,
255,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,254,253,253,255,255,255,255,255,
241,200,200,255,219,0,0,255,222,70,70,255,224,90,90,255,223,84,84,255,223,83,83,
255,222,74,74,255,225,103,103,255,254,250,250,255,252,245,245,255,224,91,91,255,
223,83,83,255,222,65,65,255,228,129,129,255,255,255,255,255,248,231,231,255,222,
65,65,255,223,84,84,255,223,81,81,255,223,86,86,255,223,89,89,255,221,53,53,
255,222,63,63,255,248,227,227,255,255,255,255,255,255,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,250,250,250,255,231,232,232,255,230,230,230,255,242,242,242,255,255,255,255,
255,212,212,213,255,233,233,233,255,255,255,255,255,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,229,132,132,255,221,63,63,255,224,91,91,255,
223,81,81,255,223,82,82,255,223,84,84,255,223,81,81,255,225,97,97,255,253,249,
249,255,252,245,245,255,224,90,90,255,223,83,83,255,222,66,66,255,228,128,128,
255,255,255,255,255,248,229,229,255,221,61,61,255,224,90,90,255,223,81,81,255,
223,82,82,255,223,81,81,255,224,96,96,255,220,31,31,255,236,174,174,255,255,255,
255,255,254,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,254,254,254,255,254,254,254,255,255,255,255,255,253,253,253,255,254,254,
254,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,253,255,253,253,
253,255,253,253,253,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,
253,255,252,252,252,255,255,255,255,255,228,228,228,255,0,0,0,255,0,0,0,255,172,
172,172,255,193,193,193,255,0,0,0,255,47,48,50,255,239,239,239,255,255,255,255,
255,254,254,254,255,254,254,254,255,253,253,253,255,253,253,253,255,253,253,253,
255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
255,253,253,253,255,253,253,253,255,253,253,253,255,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,253,253,253,255,253,253,253,255,253,253,253,255,253,253,253,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,
232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,229,136,136,255,221,63,63,
255,223,86,86,255,223,82,82,255,223,82,82,255,223,86,86,255,220,27,27,255,227,
118,118,255,254,252,252,255,252,246,246,255,224,94,94,255,223,82,82,255,222,64,
64,255,229,133,133,255,255,255,255,255,249,235,235,255,222,70,70,255,221,59,59,
255,223,86,86,255,223,81,81,255,223,82,82,255,223,88,88,255,221,46,46,255,236,
172,172,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,255,253,253,253,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,253,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,227,227,227,255,0,0,
0,255,0,0,0,255,175,175,175,255,184,184,184,255,0,0,0,255,0,0,0,255,234,234,
235,255,255,255,255,255,252,252,252,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,253,253,253,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,
255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,229,135,
135,255,221,61,61,255,223,87,87,255,223,82,82,255,223,86,86,255,222,67,67,255,
234,167,167,255,252,245,245,255,255,255,255,255,249,231,231,255,222,73,73,255,
223,87,87,255,222,72,72,255,226,114,114,255,254,251,251,255,255,255,255,255,249,
234,234,255,229,138,138,255,222,68,68,255,223,86,86,255,223,81,81,255,224,89,89,
255,220,41,41,255,236,173,173,255,255,255,255,255,254,253,253,255,255,255,255,
255,255,255,255,255,255,255,255,255,250,250,250,255,246,246,246,255,247,247,247,
255,255,255,255,255,221,221,221,255,236,236,236,255,255,255,255,255,255,255,255,
255,247,247,247,255,217,217,217,255,208,208,208,255,218,218,219,255,252,252,252,
255,252,252,252,255,245,245,245,255,247,247,247,255,254,254,254,255,255,255,255,
255,255,255,255,255,239,239,239,255,214,214,214,255,211,211,211,255,243,243,243,
255,235,235,235,255,0,0,0,255,0,0,0,255,166,166,166,255,251,251,252,255,170,170,
170,255,206,206,206,255,255,255,255,255,253,253,253,255,255,255,255,255,253,253,
253,255,224,224,224,255,212,212,212,255,216,216,216,255,242,242,242,255,255,255,
255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,255,255,255,255,255,251,251,251,255,221,221,221,255,211,212,
212,255,220,220,220,255,248,248,248,255,255,255,255,255,254,254,254,255,255,255,
255,255,254,254,254,255,255,255,255,255,255,255,255,255,232,233,233,255,213,213,
213,255,213,213,214,255,232,232,232,255,255,255,255,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,229,135,135,255,221,61,61,255,223,87,87,255,223,83,83,
255,223,80,80,255,224,85,85,255,253,245,245,255,255,255,255,255,244,211,211,255,
226,110,110,255,222,74,74,255,223,84,84,255,223,85,85,255,222,70,70,255,229,135,
135,255,247,227,227,255,255,255,255,255,246,222,222,255,221,44,44,255,223,88,88,
255,223,81,81,255,224,89,89,255,220,41,41,255,236,172,172,255,255,255,255,255,
254,253,253,255,255,255,255,255,253,253,253,255,255,255,255,255,176,176,176,255,
0,0,0,255,94,95,95,255,145,146,146,255,0,0,0,255,191,191,191,255,255,255,255,
255,198,198,198,255,61,62,63,255,0,0,0,255,0,0,0,255,0,0,0,255,124,124,125,255,
126,127,128,255,30,31,32,255,98,99,99,255,247,247,247,255,255,255,255,255,172,
172,173,255,0,0,3,255,0,0,0,255,0,0,0,255,57,58,59,255,146,147,147,255,47,48,49,
255,0,0,0,255,171,171,172,255,176,177,177,255,76,77,77,255,86,87,88,255,223,223,
223,255,255,255,255,255,215,215,215,255,96,97,98,255,0,0,0,255,0,0,0,255,0,0,0,
255,44,45,47,255,175,175,175,255,255,255,255,255,255,255,255,255,254,254,254,
255,255,255,255,255,254,254,254,255,255,255,255,255,210,210,211,255,84,85,86,
255,0,0,0,255,0,0,0,255,0,0,0,255,71,72,73,255,197,197,197,255,255,255,255,255,
253,253,253,255,255,255,255,255,241,241,241,255,136,137,137,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,135,135,135,255,240,240,240,255,255,255,255,255,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,229,135,135,255,221,61,61,255,223,87,87,255,223,83,83,255,223,79,79,255,
224,90,90,255,252,243,243,255,253,246,246,255,222,69,69,255,221,62,62,255,223,
87,87,255,223,81,81,255,223,81,81,255,224,90,90,255,220,8,8,255,228,126,126,
255,255,255,255,255,246,220,220,255,221,52,52,255,223,87,87,255,223,81,81,255,
224,89,89,255,220,41,41,255,236,172,172,255,255,255,255,255,254,253,253,255,255,
255,255,255,253,253,253,255,255,255,255,255,167,167,167,255,0,0,0,255,6,10,14,
255,0,0,0,255,0,0,0,255,202,202,202,255,215,215,215,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,52,53,55,255,252,252,
252,255,172,172,172,255,0,0,0,255,22,24,25,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,42,44,45,255,0,0,0,255,173,173,173,255,163,163,163,255,0,0,0,255,0,0,
0,255,230,230,231,255,224,224,224,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,154,154,155,255,255,255,255,255,254,254,254,255,
253,253,253,255,255,255,255,255,208,208,208,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,189,189,189,255,255,255,255,255,243,243,
244,255,82,83,84,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,77,78,79,255,244,244,244,255,255,255,255,255,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,
232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,229,135,135,255,221,61,61,
255,223,87,87,255,223,83,83,255,223,79,79,255,224,88,88,255,252,245,245,255,253,
246,246,255,224,95,95,255,223,82,82,255,223,83,83,255,223,82,82,255,223,82,82,
255,223,87,87,255,222,68,68,255,229,134,134,255,255,255,255,255,246,221,221,255,
221,50,50,255,223,87,87,255,223,81,81,255,224,89,89,255,220,41,41,255,236,172,
172,255,255,255,255,255,254,253,253,255,255,255,255,255,253,253,253,255,255,255,
255,255,169,169,170,255,0,0,0,255,29,31,32,255,57,58,59,255,153,154,154,255,221,
221,221,255,92,93,94,255,0,0,0,255,0,0,0,255,131,131,131,255,210,210,210,255,
191,192,192,255,71,72,73,255,0,0,0,255,0,0,0,255,95,96,96,255,219,219,219,255,0,
0,0,255,30,32,33,255,0,0,0,255,158,159,159,255,213,213,213,255,179,179,180,
255,35,36,38,255,25,27,29,255,0,0,0,255,172,172,173,255,166,167,167,255,0,0,0,
255,0,0,0,255,220,220,221,255,111,111,112,255,0,0,0,255,0,0,0,255,135,135,136,
255,211,211,212,255,180,180,180,255,11,15,18,255,39,40,41,255,0,0,0,255,214,214,
214,255,255,255,255,255,255,255,255,255,248,248,248,255,69,70,71,255,0,0,0,255,
0,0,0,255,148,148,148,255,213,213,213,255,176,176,176,255,0,0,0,255,0,0,0,255,
0,0,0,255,238,238,239,255,175,175,175,255,0,0,0,255,17,20,22,255,85,85,86,255,
200,200,200,255,201,201,202,255,88,89,89,255,12,15,18,255,0,0,0,255,162,162,162,
255,255,255,255,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,229,135,135,255,221,61,61,255,223,87,87,255,223,83,83,255,
223,79,79,255,224,88,88,255,252,245,245,255,253,247,247,255,224,95,95,255,222,
77,77,255,223,84,84,255,223,82,82,255,223,82,82,255,223,87,87,255,221,61,61,
255,229,136,136,255,255,255,255,255,246,221,221,255,221,51,51,255,223,87,87,255,
223,81,81,255,224,89,89,255,220,41,41,255,236,172,172,255,255,255,255,255,254,
253,253,255,255,255,255,255,253,253,253,255,255,255,255,255,169,169,169,255,0,0,
0,255,0,0,0,255,196,197,197,255,255,255,255,255,223,223,223,255,0,0,0,255,0,0,
0,255,115,116,116,255,255,255,255,255,255,255,255,255,255,255,255,255,222,222,
222,255,0,0,0,255,0,0,0,255,105,105,106,255,172,172,173,255,0,0,0,255,0,0,0,255,
165,165,165,255,255,255,255,255,255,255,255,255,255,255,255,255,200,200,200,255,
0,0,0,255,0,0,0,255,172,172,173,255,166,166,167,255,0,0,0,255,52,53,55,255,
182,182,183,255,38,40,41,255,0,0,0,255,120,120,121,255,255,255,255,255,255,255,
255,255,255,255,255,255,193,194,194,255,0,0,0,255,0,0,0,255,157,157,158,255,255,
255,255,255,255,255,255,255,212,212,212,255,0,0,0,255,0,0,0,255,136,137,137,255,
255,255,255,255,255,255,255,255,255,255,255,255,204,204,204,255,151,152,152,255,
154,154,154,255,211,212,212,255,108,109,109,255,0,0,0,255,29,31,33,255,233,233,
233,255,255,255,255,255,255,255,255,255,234,234,234,255,35,37,39,255,0,0,0,255,
82,83,84,255,249,249,249,255,255,255,255,255,254,254,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,229,135,135,255,221,61,61,255,223,87,87,255,223,
83,83,255,223,79,79,255,224,88,88,255,252,244,244,255,252,245,245,255,223,72,
72,255,223,84,84,255,223,88,88,255,223,81,81,255,223,81,81,255,224,93,93,255,
221,61,61,255,227,122,122,255,255,255,255,255,246,220,220,255,221,51,51,255,223,
87,87,255,223,81,81,255,224,89,89,255,220,41,41,255,236,172,172,255,255,255,
255,255,254,253,253,255,255,255,255,255,253,253,253,255,255,255,255,255,169,169,
169,255,0,0,0,255,0,0,0,255,225,225,225,255,255,255,255,255,200,200,201,255,0,0,
0,255,0,0,0,255,184,185,185,255,255,255,255,255,249,249,249,255,252,252,252,
255,254,254,254,255,100,101,102,255,0,0,0,255,104,104,105,255,147,148,148,255,0,
0,0,255,0,0,0,255,220,221,221,255,255,255,255,255,249,249,249,255,255,255,255,
255,244,244,244,255,62,63,64,255,0,0,0,255,173,174,174,255,166,167,167,255,0,0,
0,255,63,64,65,255,157,158,158,255,20,22,24,255,0,0,0,255,187,187,187,255,255,
255,255,255,248,248,248,255,255,255,255,255,240,240,240,255,33,35,37,255,0,0,0,
255,133,134,134,255,255,255,255,255,255,255,255,255,196,196,196,255,0,0,0,255,0,
0,0,255,201,201,201,255,255,255,255,255,249,249,249,255,251,251,251,255,255,
255,255,255,255,255,255,255,255,255,255,255,247,247,247,255,45,46,48,255,0,0,0,
255,125,125,125,255,255,255,255,255,251,251,251,255,250,250,250,255,255,255,255,
255,127,127,128,255,0,0,0,255,46,48,49,255,238,238,238,255,255,255,255,255,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,
255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,229,135,135,255,221,
61,61,255,223,87,87,255,223,83,83,255,222,78,78,255,224,91,91,255,253,246,246,
255,255,254,254,255,232,149,149,255,220,26,26,255,222,71,71,255,224,91,91,255,
223,89,89,255,221,61,61,255,221,42,42,255,237,180,180,255,255,255,255,255,247,
224,224,255,221,50,50,255,223,88,88,255,223,81,81,255,224,89,89,255,220,41,41,
255,236,172,172,255,255,255,255,255,254,253,253,255,255,255,255,255,253,253,253,
255,255,255,255,255,169,169,169,255,0,0,0,255,0,0,0,255,222,222,222,255,255,255,
255,255,209,209,209,255,0,0,0,255,0,0,0,255,154,154,155,255,255,255,255,255,255,
255,255,255,255,255,255,255,244,244,244,255,57,59,60,255,0,0,0,255,105,105,106,
255,160,160,161,255,0,0,0,255,0,0,0,255,198,198,198,255,255,255,255,255,254,254,
254,255,255,255,255,255,227,227,227,255,0,0,0,255,0,0,0,255,173,173,173,255,166,
167,167,255,0,0,0,255,60,61,62,255,167,167,168,255,26,28,30,255,0,0,0,255,158,
159,159,255,255,255,255,255,254,254,254,255,255,255,255,255,224,224,224,255,0,0,
0,255,0,0,0,255,142,142,142,255,255,255,255,255,255,255,255,255,203,203,203,
255,0,0,0,255,0,0,0,255,176,176,176,255,255,255,255,255,255,255,255,255,255,255,
255,255,241,241,241,255,215,215,216,255,221,221,221,255,224,225,225,255,80,81,
82,255,0,0,0,255,86,87,88,255,252,252,252,255,255,255,255,255,255,255,255,255,
254,254,254,255,92,93,93,255,0,0,0,255,64,65,66,255,243,243,243,255,255,255,255,
255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,
255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,229,135,135,
255,221,61,61,255,223,87,87,255,223,82,82,255,223,85,85,255,222,70,70,255,245,
215,215,255,255,255,255,255,255,255,255,255,243,208,208,255,226,113,113,255,220,
32,32,255,221,44,44,255,230,138,138,255,247,225,225,255,255,255,255,255,255,
255,255,255,238,187,187,255,221,52,52,255,223,88,88,255,223,81,81,255,224,89,89,
255,220,41,41,255,236,172,172,255,255,255,255,255,254,253,253,255,255,255,255,
255,253,253,253,255,255,255,255,255,169,169,169,255,0,0,0,255,0,0,0,255,224,224,
224,255,255,255,255,255,235,235,235,255,0,0,0,255,24,25,27,255,0,0,0,255,196,
196,196,255,249,249,249,255,241,241,242,255,146,146,146,255,0,0,0,255,0,0,0,255,
100,101,101,255,200,200,200,255,0,0,0,255,7,11,14,255,67,68,69,255,220,220,221,
255,250,250,250,255,233,233,233,255,114,114,115,255,0,0,0,255,0,0,0,255,172,172,
172,255,166,166,166,255,0,0,0,255,24,26,29,255,204,204,204,255,67,67,68,255,0,0,
0,255,0,0,0,255,201,202,202,255,251,251,251,255,234,235,235,255,110,110,111,
255,0,0,0,255,0,0,0,255,196,196,196,255,248,248,248,255,229,229,229,255,239,239,
239,255,0,0,0,255,0,0,3,255,41,43,44,255,213,213,213,255,251,251,251,255,230,
231,231,255,96,97,98,255,0,0,0,255,0,0,0,255,214,214,214,255,144,144,144,255,0,
0,0,255,0,0,0,255,160,161,161,255,245,245,246,255,246,246,247,255,166,166,166,
255,0,0,0,255,0,0,0,255,127,127,128,255,255,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,
255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,136,136,255,221,60,
60,255,223,87,87,255,223,82,82,255,223,83,83,255,223,79,79,255,222,74,74,255,
236,174,174,255,252,244,244,255,255,255,255,255,254,251,251,255,238,186,186,255,
242,201,201,255,255,255,255,255,255,255,255,255,249,232,232,255,232,150,150,255,
221,62,62,255,223,84,84,255,223,82,82,255,223,82,82,255,223,89,89,255,220,41,41,
255,236,173,173,255,255,255,255,255,254,253,253,255,255,255,255,255,253,253,253,
255,255,255,255,255,171,171,171,255,0,0,0,255,0,0,0,255,226,226,226,255,255,255,
255,255,255,255,255,255,155,155,155,255,0,0,0,255,46,47,48,255,0,0,0,255,77,78,
79,255,54,55,56,255,0,0,0,255,33,34,35,255,0,0,2,255,82,83,83,255,245,245,245,
255,113,113,114,255,0,0,0,255,27,29,30,255,0,0,0,255,85,86,87,255,23,26,28,255,
0,0,0,255,53,54,55,255,0,0,0,255,174,174,174,255,168,168,169,255,0,0,0,255,0,
0,0,255,232,232,232,255,179,179,180,255,0,0,0,255,37,38,40,255,0,0,0,255,81,
81,82,255,29,31,33,255,0,0,0,255,0,0,0,255,92,92,93,255,232,232,232,255,86,86,
87,255,0,0,0,255,209,209,209,255,179,179,179,255,0,0,0,255,27,29,30,255,0,0,0,
255,84,85,86,255,12,16,19,255,0,0,1,255,0,0,0,255,127,128,128,255,255,255,255,
255,217,218,218,255,0,0,0,255,11,14,16,255,0,0,0,255,62,63,64,255,65,66,67,255,
0,0,0,255,8,12,14,255,0,0,0,255,218,218,218,255,255,255,255,255,253,253,253,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,
255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,229,132,132,
255,222,69,69,255,223,86,86,255,223,82,82,255,223,82,82,255,223,83,83,255,223,
83,83,255,220,39,39,255,224,96,96,255,240,195,195,255,255,255,255,255,255,255,
255,255,255,255,255,255,253,246,246,255,236,175,175,255,222,71,71,255,221,52,52,
255,223,86,86,255,223,82,82,255,223,82,82,255,223,81,81,255,224,90,90,255,221,
51,51,255,235,170,170,255,255,255,255,255,254,253,253,255,255,255,255,255,253,
253,253,255,255,255,255,255,160,160,161,255,0,0,0,255,0,0,0,255,223,223,223,255,
255,255,255,255,255,255,255,255,249,249,249,255,127,128,128,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,19,22,25,255,28,31,34,255,0,0,0,255,0,0,0,255,250,250,
250,255,239,239,239,255,81,82,83,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,93,
94,94,255,0,0,0,255,0,0,0,255,165,165,165,255,157,157,158,255,0,0,0,255,0,0,0,
255,222,222,222,255,255,255,255,255,150,151,151,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,76,77,78,255,239,239,239,255,232,232,232,255,0,0,0,255,
0,0,0,255,170,171,171,255,255,255,255,255,150,150,151,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,124,124,125,255,246,246,246,255,255,255,255,255,
255,255,255,255,199,200,200,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,199,199,199,255,255,255,255,255,253,253,253,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,
255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,234,162,162,255,
219,0,0,255,224,93,93,255,223,86,86,255,223,81,81,255,223,82,82,255,223,83,83,
255,224,90,90,255,222,76,76,255,220,29,29,255,228,125,125,255,244,213,213,255,
241,200,200,255,225,98,98,255,220,35,35,255,223,83,83,255,223,89,89,255,223,82,
82,255,223,82,82,255,223,82,82,255,223,88,88,255,223,89,89,255,218,0,0,255,241,
200,200,255,255,255,255,255,254,253,253,255,255,255,255,255,254,254,254,255,255,
255,255,255,223,224,224,255,194,195,195,255,197,197,198,255,243,243,243,255,255,
255,255,255,253,253,253,255,255,255,255,255,255,255,255,255,204,204,205,255,156,
156,156,255,142,143,143,255,158,158,159,255,223,223,223,255,219,219,219,255,193,
193,193,255,204,205,205,255,250,250,250,255,255,255,255,255,248,248,248,255,191,
191,191,255,149,149,149,255,143,143,144,255,184,184,184,255,242,242,242,255,206,
206,206,255,191,191,192,255,225,225,225,255,223,223,223,255,194,194,194,255,197,
198,198,255,241,242,242,255,255,255,255,255,255,255,255,255,218,218,219,255,166,
166,167,255,143,144,144,255,152,152,153,255,195,195,195,255,249,249,249,255,255,
255,255,255,255,255,255,255,199,200,200,255,168,168,168,255,245,245,246,255,255,
255,255,255,255,255,255,255,217,217,218,255,164,164,164,255,142,142,143,255,157,
158,158,255,206,207,207,255,255,255,255,255,255,255,255,255,254,254,254,255,254,
254,254,255,255,255,255,255,235,235,235,255,179,179,180,255,146,147,147,255,147,
147,147,255,178,178,179,255,234,235,235,255,255,255,255,255,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,
255,255,255,252,245,245,255,232,152,152,255,221,44,44,255,222,65,65,255,224,90,
90,255,223,84,84,255,223,82,82,255,223,81,81,255,223,85,85,255,224,90,90,255,
222,64,64,255,221,47,47,255,221,45,45,255,222,73,73,255,224,90,90,255,223,83,83,
255,223,81,81,255,223,82,82,255,223,86,86,255,223,89,89,255,221,53,53,255,222,
64,64,255,237,180,180,255,255,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,253,253,253,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,255,255,255,255,255,255,255,255,255,253,253,253,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,245,
216,216,255,228,124,124,255,220,30,30,255,222,77,77,255,224,90,90,255,223,82,82,
255,223,82,82,255,223,81,81,255,223,86,86,255,223,88,88,255,223,88,88,255,223,
85,85,255,223,82,82,255,223,81,81,255,223,84,84,255,224,90,90,255,222,67,67,
255,221,41,41,255,231,148,148,255,249,231,231,255,255,255,255,255,255,255,255,
255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,255,253,253,253,255,253,253,253,255,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,255,253,253,253,
255,254,254,254,255,253,253,253,255,253,253,253,255,253,253,253,255,253,253,253,
255,253,253,253,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,253,
255,254,254,254,255,254,254,254,255,253,253,253,255,254,254,254,255,253,253,253,
255,253,253,253,255,254,254,254,255,254,254,254,255,253,253,253,255,253,253,253,
255,254,254,254,255,255,255,255,255,255,255,255,255,253,253,253,255,253,253,253,
255,254,254,254,255,254,254,254,255,253,253,253,255,254,254,254,255,255,255,255,
255,255,255,255,255,253,253,253,255,253,253,253,255,254,254,254,255,255,255,255,
255,255,255,255,255,253,253,253,255,253,253,253,255,254,254,254,255,253,253,253,
255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,255,253,253,253,255,254,254,254,255,254,254,254,
255,253,253,253,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,255,255,254,254,255,255,255,255,255,255,253,253,255,240,196,196,
255,224,95,95,255,220,38,38,255,223,85,85,255,223,88,88,255,223,82,82,255,223,
81,81,255,223,82,82,255,223,82,82,255,223,81,81,255,223,83,83,255,224,90,90,
255,222,78,78,255,220,30,30,255,227,120,120,255,245,214,214,255,255,255,255,255,
255,255,255,255,254,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,253,253,255,255,255,255,255,255,255,255,255,252,243,243,255,235,172,172,255,
222,65,65,255,221,54,54,255,223,89,89,255,223,86,86,255,223,81,81,255,223,81,81,
255,223,88,88,255,223,85,85,255,220,38,38,255,224,91,91,255,240,193,193,255,254,
252,252,255,255,255,255,255,255,254,254,255,255,253,253,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,254,
253,253,255,255,255,255,255,255,255,255,255,248,230,230,255,231,145,145,255,221,
41,41,255,222,68,68,255,224,90,90,255,223,89,89,255,221,56,56,255,222,63,63,
255,235,170,170,255,252,242,242,255,255,255,255,255,255,255,255,255,254,253,253,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,
255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
255,254,253,253,255,255,255,255,255,255,255,255,255,244,212,212,255,227,118,118,
255,220,37,37,255,221,47,47,255,230,142,142,255,248,228,228,255,255,255,255,255,
255,255,255,255,254,253,253,255,255,254,254,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,253,253,255,255,254,254,255,255,255,255,255,254,250,250,255,244,212,212,255,
246,220,220,255,255,255,255,255,255,255,255,255,254,253,253,255,255,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,253,253,255,254,253,253,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,
255,255,255,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,232,255,255,255,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,253,255,255,255,255,255,255,255,231,255,255,255,255,255,255,255,252,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
255,255,255,255,255,255,255,233,255,255,255,223,255,255,255,255,255,255,255,249,
255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,252,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,252,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,252,255,255,255,253,255,255,255,252,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,253,255,255,255,253,
255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,
255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,252,255,255,255,253,255,255,255,252,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,
255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,252,255,255,255,253,
255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,252,255,255,255,252,
255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,
255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,248,255,255,255,255,
255,255,255,194,255,255,255,62,255,255,255,242,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,255,255,255,45,
0,0,0,0,255,255,255,20,255,255,255,68,255,255,255,66,255,255,255,66,255,255,
255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,
66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,
255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,
255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,
255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,
66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,
255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,
255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,
255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,
66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,
255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,
255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,
255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,
66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,
255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,
255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,
255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,
66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,
255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,
255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,
255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,
66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,255,255,255,66,
255,255,255,66,255,255,255,13,0,0,0,0};
static Fl_Image *image_radio_co_badge() {
  static Fl_Image *image = new Fl_RGB_Image(idata_radio_co_badge, 124, 61, 4, 0);
  return image;
}

void flgui::cb_button_mixer_i(Fl_Button*, void*) {
  button_mixer_cb();
}
void flgui::cb_button_mixer(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_mixer_i(o,v);
}

void flgui::cb_window_cfg_i(Fl_My_Double_Window*, void*) {
  if(window_cfg->shown())
{
    window_cfg->hide();
    Fl::remove_timeout(&cfg_win_pos_timer);
};
}
void flgui::cb_window_cfg(Fl_My_Double_Window* o, void* v) {
  ((flgui*)(o->user_data()))->cb_window_cfg_i(o,v);
}

void flgui::cb_choice_cfg_act_srv_i(Fl_Choice*, void*) {
  choice_cfg_act_srv_cb();
}
void flgui::cb_choice_cfg_act_srv(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_act_srv_i(o,v);
}

void flgui::cb_ADD_i(Fl_Button*, void*) {
  button_cfg_add_srv_cb();
}
void flgui::cb_ADD(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ADD_i(o,v);
}

void flgui::cb_button_cfg_edit_srv_i(Fl_Button*, void*) {
  button_cfg_edit_srv_cb();
}
void flgui::cb_button_cfg_edit_srv(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_edit_srv_i(o,v);
}

void flgui::cb_button_cfg_del_srv_i(Fl_Button*, void*) {
  button_cfg_del_srv_cb();
}
void flgui::cb_button_cfg_del_srv(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_del_srv_i(o,v);
}

void flgui::cb_choice_cfg_act_icy_i(Fl_Choice*, void*) {
  choice_cfg_act_icy_cb();
}
void flgui::cb_choice_cfg_act_icy(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_act_icy_i(o,v);
}

void flgui::cb_ADD1_i(Fl_Button*, void*) {
  button_cfg_add_icy_cb();
}
void flgui::cb_ADD1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ADD1_i(o,v);
}

void flgui::cb_button_cfg_edit_icy_i(Fl_Button*, void*) {
  button_cfg_edit_icy_cb();
}
void flgui::cb_button_cfg_edit_icy(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_edit_icy_i(o,v);
}

void flgui::cb_button_cfg_del_icy_i(Fl_Button*, void*) {
  button_cfg_del_icy_cb();
}
void flgui::cb_button_cfg_del_icy(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_del_icy_i(o,v);
}

void flgui::cb_input_log_filename_i(Fl_Input*, void*) {
  input_log_filename_cb();
}
void flgui::cb_input_log_filename(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_log_filename_i(o,v);
}

void flgui::cb__i(Fl_Button*, void*) {
  button_cfg_log_browse_cb();
}
void flgui::cb_(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

static const unsigned char idata_folder[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,0,
4,4,4,0,2,2,2,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,
36,12,4,4,4,58,3,3,3,62,1,1,1,62,0,0,0,61,0,0,0,14,0,0,0,0,0,0,0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,14,2,2,2,156,1,1,1,105,0,0,0,95,0,0,0,95,
0,0,0,89,0,0,0,180,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,5,5,5,
98,5,5,5,123,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,154,0,0,0,
111,0,0,0,113,0,0,0,113,0,0,0,113,0,0,0,113,0,0,0,118,0,0,0,81,0,0,0,0,0,0,0,5,
0,0,0,3,5,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,2,2,2,72,2,2,2,25,0,0,0,2,7,
7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,15,0,0,0,15,0,0,0,15,0,0,
0,15,0,0,0,15,0,0,0,1,0,0,0,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,95,0,0,0,48,2,2,2,5,4,4,4,3,0,0,0,0,7,7,7,94,3,3,3,140,0,0,0,
140,0,0,0,141,0,0,0,144,0,0,0,144,0,0,0,144,0,0,0,144,0,0,0,144,0,0,0,144,3,3,3,
139,6,6,6,196,0,0,0,141,0,0,0,141,0,0,0,138,4,4,4,136,0,0,0,16,0,0,0,0,0,0,0,0,
0,0,0,96,0,0,0,46,0,0,0,2,0,0,0,0,0,0,0,78,0,0,0,110,0,0,0,0,1,1,1,7,0,0,0,7,
0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,1,1,1,7,0,0,0,7,0,0,0,1,2,2,2,7,0,0,0,
11,0,0,0,0,0,0,0,177,1,1,1,15,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,45,0,0,0,1,0,0,0,
0,0,0,0,157,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,105,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,96,0,0,0,46,0,0,0,0,0,0,0,100,0,0,0,57,0,0,0,1,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,167,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,48,0,0,
0,14,0,0,0,125,0,0,0,12,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,79,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,46,0,0,0,68,0,0,0,95,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,2,0,0,0,11,0,0,0,127,0,0,0,18,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,
0,0,36,0,0,0,166,0,0,0,0,0,0,0,0,2,2,2,0,2,2,2,0,2,2,2,0,2,2,2,0,2,2,2,0,2,2,
2,0,2,2,2,0,2,2,2,0,2,2,2,0,2,2,2,0,1,1,1,1,1,1,1,2,0,0,0,50,0,0,0,111,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,10,10,10,152,0,0,0,71,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,3,0,0,0,0,0,0,0,160,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,6,6,6,91,4,4,4,196,0,0,0,13,4,4,4,23,3,3,3,20,4,4,4,20,4,4,4,20,4,4,4,20,
4,4,4,20,4,4,4,20,4,4,4,20,4,4,4,20,4,4,4,20,4,4,4,20,3,3,3,20,16,16,16,11,5,
5,5,95,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,
0,118,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,
0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,133,0,0,0,135,0,0,0,113,
4,4,4,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_folder() {
  static Fl_Image *image = new Fl_RGB_Image(idata_folder, 24, 24, 4, 0);
  return image;
}

void flgui::cb_Import_i(Fl_Button*, void*) {
  button_cfg_import_cb();
}
void flgui::cb_Import(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Import_i(o,v);
}

void flgui::cb_Save_i(Fl_Button*, void*) {
  cfg_write_file(NULL);
}
void flgui::cb_Save(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void flgui::cb_Export_i(Fl_Button*, void*) {
  button_cfg_export_cb();
}
void flgui::cb_Export(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Export_i(o,v);
}

void flgui::cb_Check_i(Fl_Button*, void*) {
  button_cfg_check_for_updates_cb();
}
void flgui::cb_Check(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Check_i(o,v);
}

void flgui::cb_check_update_at_startup_i(Fl_Check_Button*, void*) {
  check_update_at_startup_cb();
}
void flgui::cb_check_update_at_startup(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_update_at_startup_i(o,v);
}

void flgui::cb_check_start_agent_i(Fl_Check_Button*, void*) {
  check_start_agent_cb();
}
void flgui::cb_check_start_agent(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_start_agent_i(o,v);
}

void flgui::cb_check_minimize_to_tray_i(Fl_Check_Button*, void*) {
  check_minimize_to_tray_cb();
}
void flgui::cb_check_minimize_to_tray(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_minimize_to_tray_i(o,v);
}

void flgui::cb_Start_i(Fl_Button*, void*) {
  button_start_agent_cb();
}
void flgui::cb_Start(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Start_i(o,v);
}

void flgui::cb_Stop_i(Fl_Button*, void*) {
  button_stop_agent_cb();
}
void flgui::cb_Stop(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Stop_i(o,v);
}

void flgui::cb_choice_cfg_dev_i(Fl_Choice*, void*) {
  choice_cfg_dev_cb();
}
void flgui::cb_choice_cfg_dev(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_dev_i(o,v);
}

void flgui::cb_Stereo_i(Fl_Menu_*, void*) {
  choice_cfg_channel_stereo_cb();
}
void flgui::cb_Stereo(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Stereo_i(o,v);
}

void flgui::cb_Mono_i(Fl_Menu_*, void*) {
  choice_cfg_channel_mono_cb();
}
void flgui::cb_Mono(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Mono_i(o,v);
}

unsigned char flgui::menu_choice_cfg_channel_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_cfg_channel[] = {
 {"Stereo", 0,  (Fl_Callback*)flgui::cb_Stereo, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Mono", 0,  (Fl_Callback*)flgui::cb_Mono, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_cfg_samplerate_i(Fl_Choice*, void*) {
  choice_cfg_samplerate_cb();
}
void flgui::cb_choice_cfg_samplerate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_samplerate_i(o,v);
}

void flgui::cb_choice_cfg_left_channel_i(Fl_Choice*, void*) {
  choice_cfg_left_channel_cb();
}
void flgui::cb_choice_cfg_left_channel(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_left_channel_i(o,v);
}

void flgui::cb_choice_cfg_right_channel_i(Fl_Choice*, void*) {
  choice_cfg_right_channel_cb();
}
void flgui::cb_choice_cfg_right_channel(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_right_channel_i(o,v);
}

void flgui::cb_radio_cfg_ID_i(Fl_Round_Button*, void*) {
  radio_cfg_ID_cb();
}
void flgui::cb_radio_cfg_ID(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_radio_cfg_ID_i(o,v);
}

void flgui::cb_radio_cfg_name_i(Fl_Round_Button*, void*) {
  radio_cfg_name_cb();
}
void flgui::cb_radio_cfg_name(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_radio_cfg_name_i(o,v);
}

void flgui::cb_button_cfg_rescan_devices_i(Fl_Button*, void*) {
  button_cfg_rescan_devices_cb();
}
void flgui::cb_button_cfg_rescan_devices(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_rescan_devices_i(o,v);
}

void flgui::cb_choice_cfg_dev2_i(Fl_Choice*, void*) {
  choice_cfg_dev2_cb();
}
void flgui::cb_choice_cfg_dev2(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_dev2_i(o,v);
}

void flgui::cb_choice_cfg_left_channel2_i(Fl_Choice*, void*) {
  choice_cfg_left_channel2_cb();
}
void flgui::cb_choice_cfg_left_channel2(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_left_channel2_i(o,v);
}

void flgui::cb_choice_cfg_right_channel2_i(Fl_Choice*, void*) {
  choice_cfg_right_channel2_cb();
}
void flgui::cb_choice_cfg_right_channel2(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_right_channel2_i(o,v);
}

void flgui::cb_MP3_i(Fl_Menu_*, void*) {
  choice_cfg_codec_mp3_cb();
}
void flgui::cb_MP3(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MP3_i(o,v);
}

void flgui::cb_OGG_i(Fl_Menu_*, void*) {
  choice_cfg_codec_ogg_cb();
}
void flgui::cb_OGG(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OGG_i(o,v);
}

void flgui::cb_OPUS_i(Fl_Menu_*, void*) {
  choice_cfg_codec_opus_cb();
}
void flgui::cb_OPUS(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OPUS_i(o,v);
}

void flgui::cb_menu_item_cfg_aac_i(Fl_Menu_*, void*) {
  choice_cfg_codec_aac_cb();
}
void flgui::cb_menu_item_cfg_aac(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_item_cfg_aac_i(o,v);
}

void flgui::cb_FLAC_i(Fl_Menu_*, void*) {
  choice_cfg_codec_flac_cb();
}
void flgui::cb_FLAC(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_FLAC_i(o,v);
}

unsigned char flgui::menu_choice_cfg_codec_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_cfg_codec[] = {
 {"MP3", 0,  (Fl_Callback*)flgui::cb_MP3, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OGG/VORBIS", 0,  (Fl_Callback*)flgui::cb_OGG, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OPUS", 0,  (Fl_Callback*)flgui::cb_OPUS, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC+", 0,  (Fl_Callback*)flgui::cb_menu_item_cfg_aac, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"FLAC", 0,  (Fl_Callback*)flgui::cb_FLAC, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* flgui::menu_item_cfg_aac = flgui::menu_choice_cfg_codec + 3;

void flgui::cb_choice_cfg_bitrate_i(Fl_Choice*, void*) {
  choice_cfg_bitrate_cb();
}
void flgui::cb_choice_cfg_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_bitrate_i(o,v);
}

void flgui::cb_1_i(Fl_Button*, void*) {
  button_stream_codec_settings_cb();
}
void flgui::cb_1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

static const unsigned char idata_settings[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
112,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,42,0,0,0,223,0,0,0,255,0,0,0,55,0,0,0,55,0,0,0,255,0,0,0,223,0,0,0,42,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,193,0,0,0,174,0,0,0,86,0,0,0,148,0,0,0,254,0,0,0,255,
0,0,0,251,0,0,0,9,0,0,0,9,0,0,0,251,0,0,0,255,0,0,0,253,0,0,0,148,0,0,0,86,0,
0,0,174,0,0,0,193,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,95,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,248,0,0,0,146,0,0,0,41,0,0,
0,0,0,0,0,0,0,0,0,41,0,0,0,147,0,0,0,248,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,230,0,0,0,
255,0,0,0,155,0,0,0,199,0,0,0,219,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,46,0,0,0,219,0,0,0,199,0,0,0,155,0,0,0,255,0,0,0,230,0,0,0,
13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,0,0,0,255,0,0,0,230,0,0,0,5,0,0,0,
0,0,0,0,3,0,0,0,0,0,0,0,38,0,0,0,174,0,0,0,242,0,0,0,242,0,0,0,173,0,0,0,37,0,
0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,231,0,0,0,255,0,0,0,135,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,81,0,0,0,245,0,0,0,255,0,0,0,183,0,0,0,12,0,0,0,0,0,0,0,
38,0,0,0,238,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,236,0,0,0,27,0,0,0,
0,0,0,0,12,0,0,0,184,0,0,0,255,0,0,0,245,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,54,0,0,0,246,0,0,0,255,0,0,0,44,0,0,0,0,0,0,0,174,0,0,0,255,
0,0,0,179,0,0,0,27,0,0,0,28,0,0,0,181,0,0,0,255,0,0,0,169,0,0,0,0,0,0,0,44,0,
0,0,255,0,0,0,246,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,244,0,0,0,255,0,0,0,11,0,0,0,0,0,0,0,242,0,0,0,255,0,0,0,27,0,0,0,
0,0,0,0,0,0,0,0,29,0,0,0,255,0,0,0,240,0,0,0,0,0,0,0,12,0,0,0,255,0,0,0,244,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,0,0,0,
255,0,0,0,11,0,0,0,0,0,0,0,241,0,0,0,255,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,29,0,0,
0,255,0,0,0,240,0,0,0,0,0,0,0,12,0,0,0,255,0,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,246,0,0,0,255,0,0,0,44,0,0,0,0,
0,0,0,173,0,0,0,255,0,0,0,181,0,0,0,28,0,0,0,29,0,0,0,182,0,0,0,255,0,0,0,171,
0,0,0,0,0,0,0,45,0,0,0,255,0,0,0,246,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,80,0,0,0,245,0,0,0,255,0,0,0,183,0,0,0,12,0,0,0,0,0,0,0,37,0,0,
0,236,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,237,0,0,0,36,0,0,0,0,0,0,
0,12,0,0,0,184,0,0,0,255,0,0,0,245,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,135,0,0,0,255,0,0,0,230,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,27,0,0,0,
169,0,0,0,241,0,0,0,241,0,0,0,171,0,0,0,36,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,
0,231,0,0,0,255,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,230,
0,0,0,255,0,0,0,155,0,0,0,199,0,0,0,219,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,219,0,0,0,198,0,0,0,156,0,0,0,255,0,0,0,
230,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,248,0,0,0,147,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,42,0,
0,0,148,0,0,0,249,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,95,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,192,0,0,0,173,0,0,0,86,0,
0,0,147,0,0,0,253,0,0,0,255,0,0,0,251,0,0,0,9,0,0,0,10,0,0,0,251,0,0,0,255,0,
0,0,253,0,0,0,147,0,0,0,86,0,0,0,173,0,0,0,192,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,
0,0,223,0,0,0,255,0,0,0,55,0,0,0,56,0,0,0,255,0,0,0,223,0,0,0,41,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,109,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_settings() {
  static Fl_Image *image = new Fl_RGB_Image(idata_settings, 24, 24, 4, 0);
  return image;
}

void flgui::cb_MP31_i(Fl_Menu_*, void*) {
  choice_rec_codec_mp3_cb();
}
void flgui::cb_MP31(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MP31_i(o,v);
}

void flgui::cb_OGG1_i(Fl_Menu_*, void*) {
  choice_rec_codec_ogg_cb();
}
void flgui::cb_OGG1(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OGG1_i(o,v);
}

void flgui::cb_OPUS1_i(Fl_Menu_*, void*) {
  choice_rec_codec_opus_cb();
}
void flgui::cb_OPUS1(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OPUS1_i(o,v);
}

void flgui::cb_menu_item_rec_aac_i(Fl_Menu_*, void*) {
  choice_rec_codec_aac_cb();
}
void flgui::cb_menu_item_rec_aac(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_item_rec_aac_i(o,v);
}

void flgui::cb_FLAC1_i(Fl_Menu_*, void*) {
  choice_rec_codec_flac_cb();
}
void flgui::cb_FLAC1(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_FLAC1_i(o,v);
}

void flgui::cb_WAV_i(Fl_Menu_*, void*) {
  choice_rec_codec_wav_cb();
}
void flgui::cb_WAV(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_WAV_i(o,v);
}

unsigned char flgui::menu_choice_rec_codec_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_codec[] = {
 {"MP3", 0,  (Fl_Callback*)flgui::cb_MP31, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OGG/VORBIS", 0,  (Fl_Callback*)flgui::cb_OGG1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OPUS", 0,  (Fl_Callback*)flgui::cb_OPUS1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC+", 0,  (Fl_Callback*)flgui::cb_menu_item_rec_aac, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"FLAC", 0,  (Fl_Callback*)flgui::cb_FLAC1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"WAV", 0,  (Fl_Callback*)flgui::cb_WAV, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* flgui::menu_item_rec_aac = flgui::menu_choice_rec_codec + 3;

void flgui::cb_choice_rec_bitrate_i(Fl_Choice*, void*) {
  choice_rec_bitrate_cb();
}
void flgui::cb_choice_rec_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_rec_bitrate_i(o,v);
}

void flgui::cb_2_i(Fl_Button*, void*) {
  button_rec_codec_settings_cb();
}
void flgui::cb_2(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void flgui::cb_button_advanced_i(Fl_Button*, void*) {
  static int show_advanced = 0;
if (!show_advanced)
{
	window_cfg->size(window_cfg->w(), 450);
	show_advanced = 1;
	fl_g->button_advanced->label("Standard...");
}
else
{
	window_cfg->size(window_cfg->w(), 380);
	show_advanced = 0;
	fl_g->button_advanced->label("Advanced...");

};
}
void flgui::cb_button_advanced(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_button_advanced_i(o,v);
}

void flgui::cb_input_cfg_buffer_i(Fl_Value_Input*, void*) {
  input_cfg_buffer_cb(1);
}
void flgui::cb_input_cfg_buffer(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_input_cfg_buffer_i(o,v);
}

void flgui::cb_choice_cfg_resample_mode_i(Fl_Choice*, void*) {
  choice_cfg_resample_mode_cb();
}
void flgui::cb_choice_cfg_resample_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_cfg_resample_mode_i(o,v);
}

unsigned char flgui::menu_choice_cfg_resample_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_cfg_resample_mode[] = {
 {"SINC_BEST", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"SINC_MEDIUM", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"SINC_FASTEST", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ZERO_ORDER_HOLD", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"LINEAR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_input_cfg_present_level_i(Fl_Value_Input*, void*) {
  input_cfg_present_level_cb();
}
void flgui::cb_input_cfg_present_level(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_present_level_i(o,v);
}

void flgui::cb_input_cfg_absent_level_i(Fl_Value_Input*, void*) {
  input_cfg_absent_level_cb();
}
void flgui::cb_input_cfg_absent_level(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_absent_level_i(o,v);
}

void flgui::cb_input_cfg_song_file_i(Fl_Input*, void*) {
  input_cfg_song_file_cb();
}
void flgui::cb_input_cfg_song_file(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_song_file_i(o,v);
}

void flgui::cb_button_songfile_browse_i(Fl_Button*, void*) {
  button_cfg_browse_songfile_cb();
}
void flgui::cb_button_songfile_browse(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_songfile_browse_i(o,v);
}

void flgui::cb_check_song_update_active_i(Fl_Check_Button*, void*) {
  check_song_update_active_cb();
}
void flgui::cb_check_song_update_active(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_song_update_active_i(o,v);
}

void flgui::cb_check_read_last_line_i(Fl_Check_Button*, void*) {
  check_read_last_line_cb();
}
void flgui::cb_check_read_last_line(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_read_last_line_i(o,v);
}

void flgui::cb_input_cfg_song_i(Fl_Input*, void*) {
  input_cfg_song_cb();
}
void flgui::cb_input_cfg_song(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_song_i(o,v);
}

void flgui::cb_button_cfg_song_go_i(Fl_Button*, void*) {
  button_cfg_song_go_cb();
}
void flgui::cb_button_cfg_song_go(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_song_go_i(o,v);
}

void flgui::cb_check_cfg_use_app_i(Fl_Check_Button*, void*) {
  check_cfg_use_app_cb();
}
void flgui::cb_check_cfg_use_app(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_cfg_use_app_i(o,v);
}

void flgui::cb_choice_cfg_app_i(Fl_Choice*, void*) {
  choice_cfg_app_cb();
}
void flgui::cb_choice_cfg_app(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_app_i(o,v);
}

void flgui::cb_radio_cfg_title_artist_i(Fl_Round_Button*, void*) {
  radio_cfg_title_artist_cb();
}
void flgui::cb_radio_cfg_title_artist(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_radio_cfg_title_artist_i(o,v);
}

void flgui::cb_radio_cfg_artist_title_i(Fl_Round_Button*, void*) {
  radio_cfg_artist_title_cb();
}
void flgui::cb_radio_cfg_artist_title(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_radio_cfg_artist_title_i(o,v);
}

void flgui::cb_check_cfg_connect_i(Fl_Check_Button*, void*) {
  check_cfg_connect_cb();
}
void flgui::cb_check_cfg_connect(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_cfg_connect_i(o,v);
}

void flgui::cb_input_cfg_silence_i(Fl_Value_Input*, void*) {
  input_cfg_silence_cb();
}
void flgui::cb_input_cfg_silence(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_silence_i(o,v);
}

void flgui::cb_input_cfg_signal_i(Fl_Value_Input*, void*) {
  input_cfg_signal_cb();
}
void flgui::cb_input_cfg_signal(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_signal_i(o,v);
}

void flgui::cb_check_cfg_force_reconnecting_i(Fl_Check_Button*, void*) {
  check_cfg_force_reconnecting_cb();
}
void flgui::cb_check_cfg_force_reconnecting(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_cfg_force_reconnecting_i(o,v);
}

void flgui::cb_input_cfg_reconnect_delay_i(Fl_Value_Input*, void*) {
  input_cfg_reconnect_delay_cb();
}
void flgui::cb_input_cfg_reconnect_delay(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_reconnect_delay_i(o,v);
}

void flgui::cb_check_stream_signal_i(Fl_Check_Button*, void*) {
  check_stream_signal_cb();
}
void flgui::cb_check_stream_signal(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_stream_signal_i(o,v);
}

void flgui::cb_check_stream_silence_i(Fl_Check_Button*, void*) {
  check_stream_silence_cb();
}
void flgui::cb_check_stream_silence(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_stream_silence_i(o,v);
}

void flgui::cb_input_cfg_song_prefix_i(Fl_Input*, void*) {
  input_cfg_song_prefix_cb();
}
void flgui::cb_input_cfg_song_prefix(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_song_prefix_i(o,v);
}

void flgui::cb_input_cfg_song_suffix_i(Fl_Input*, void*) {
  input_cfg_song_suffix_cb();
}
void flgui::cb_input_cfg_song_suffix(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_song_suffix_i(o,v);
}

void flgui::cb_choice_cfg_song_delay_i(Fl_Choice*, void*) {
  choice_cfg_song_delay_cb();
}
void flgui::cb_choice_cfg_song_delay(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_song_delay_i(o,v);
}

void flgui::cb_input_rec_filename_i(Fl_Input*, void*) {
  input_rec_filename_cb();
}
void flgui::cb_input_rec_filename(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_input_rec_filename_i(o,v);
}

void flgui::cb_input_rec_folder_i(Fl_Input*, void*) {
  input_rec_folder_cb();
}
void flgui::cb_input_rec_folder(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_input_rec_folder_i(o,v);
}

void flgui::cb_button_rec_browse_i(Fl_Button*, void*) {
  button_rec_browse_cb();
}
void flgui::cb_button_rec_browse(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_button_rec_browse_i(o,v);
}

void flgui::cb_input_rec_split_time_i(Fl_Value_Input*, void*) {
  input_rec_split_time_cb();
}
void flgui::cb_input_rec_split_time(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_rec_split_time_i(o,v);
}

void flgui::cb_check_sync_to_full_hour_i(Fl_Check_Button*, void*) {
  check_sync_to_full_hour_cb();
}
void flgui::cb_check_sync_to_full_hour(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_sync_to_full_hour_i(o,v);
}

void flgui::cb_Split_i(Fl_Button*, void*) {
  button_rec_split_now_cb();
}
void flgui::cb_Split(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Split_i(o,v);
}

void flgui::cb_check_cfg_auto_start_rec_i(Fl_Check_Button*, void*) {
  check_cfg_auto_start_rec_cb();
}
void flgui::cb_check_cfg_auto_start_rec(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_cfg_auto_start_rec_i(o,v);
}

void flgui::cb_check_cfg_rec_after_launch_i(Fl_Check_Button*, void*) {
  check_cfg_rec_after_launch_cb();
}
void flgui::cb_check_cfg_rec_after_launch(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_cfg_rec_after_launch_i(o,v);
}

void flgui::cb_input_rec_signal_i(Fl_Value_Input*, void*) {
  input_rec_signal_cb();
}
void flgui::cb_input_rec_signal(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_rec_signal_i(o,v);
}

void flgui::cb_check_cfg_auto_stop_rec_i(Fl_Check_Button*, void*) {
  check_cfg_auto_stop_rec_cb();
}
void flgui::cb_check_cfg_auto_stop_rec(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_cfg_auto_stop_rec_i(o,v);
}

void flgui::cb_input_rec_silence_i(Fl_Value_Input*, void*) {
  input_rec_silence_cb();
}
void flgui::cb_input_rec_silence(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_rec_silence_i(o,v);
}

void flgui::cb_check_rec_signal_i(Fl_Check_Button*, void*) {
  check_rec_signal_cb();
}
void flgui::cb_check_rec_signal(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_rec_signal_i(o,v);
}

void flgui::cb_check_rec_silence_i(Fl_Check_Button*, void*) {
  check_rec_silence_cb();
}
void flgui::cb_check_rec_silence(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_rec_silence_i(o,v);
}

void flgui::cb_check_stream_eq_i(Fl_Check_Button*, void*) {
  check_stream_eq_cb();
}
void flgui::cb_check_stream_eq(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_stream_eq_i(o,v);
}

void flgui::cb_equalizerSlider1_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer1_cb(o->value());
}
void flgui::cb_equalizerSlider1(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider1_i(o,v);
}

void flgui::cb_equalizerSlider2_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer2_cb(o->value());
}
void flgui::cb_equalizerSlider2(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider2_i(o,v);
}

void flgui::cb_equalizerSlider3_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer3_cb(o->value());
}
void flgui::cb_equalizerSlider3(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider3_i(o,v);
}

void flgui::cb_equalizerSlider4_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer4_cb(o->value());
}
void flgui::cb_equalizerSlider4(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider4_i(o,v);
}

void flgui::cb_equalizerSlider5_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer5_cb(o->value());
}
void flgui::cb_equalizerSlider5(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider5_i(o,v);
}

void flgui::cb_equalizerSlider6_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer6_cb(o->value());
}
void flgui::cb_equalizerSlider6(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider6_i(o,v);
}

void flgui::cb_equalizerSlider7_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer7_cb(o->value());
}
void flgui::cb_equalizerSlider7(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider7_i(o,v);
}

void flgui::cb_equalizerSlider8_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer8_cb(o->value());
}
void flgui::cb_equalizerSlider8(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider8_i(o,v);
}

void flgui::cb_equalizerSlider9_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer9_cb(o->value());
}
void flgui::cb_equalizerSlider9(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider9_i(o,v);
}

void flgui::cb_equalizerSlider10_i(Fl_My_Value_Slider* o, void*) {
  slider_equalizer10_cb(o->value());
}
void flgui::cb_equalizerSlider10(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_equalizerSlider10_i(o,v);
}

void flgui::cb_choice_eq_preset_i(Fl_Choice*, void*) {
  choice_eq_preset_cb();
}
void flgui::cb_choice_eq_preset(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_eq_preset_i(o,v);
}

unsigned char flgui::menu_choice_eq_preset_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_eq_preset[] = {
 {"Manual", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Acoustic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Bass Booster", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Bass Reducer", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Classical", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Dance", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Deep", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Electronic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Hip-Hop", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Jazz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Latin", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Loudness", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Lounge", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Piano", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"RnB", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Rock", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Speech", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Treble Booster", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Treble Reducer", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Vocal Booster", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_check_rec_eq_i(Fl_Check_Button*, void*) {
  check_rec_eq_cb();
}
void flgui::cb_check_rec_eq(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_rec_eq_i(o,v);
}

void flgui::cb_check_stream_drc_i(Fl_Check_Button*, void*) {
  check_stream_drc_cb();
}
void flgui::cb_check_stream_drc(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_stream_drc_i(o,v);
}

void flgui::cb_thresholdSlider_i(Fl_My_Value_Slider* o, void*) {
  slider_threshold_cb(o->value());
}
void flgui::cb_thresholdSlider(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_thresholdSlider_i(o,v);
}

void flgui::cb_ratioSlider_i(Fl_My_Value_Slider* o, void*) {
  slider_ratio_cb(o->value());
}
void flgui::cb_ratioSlider(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ratioSlider_i(o,v);
}

void flgui::cb_attackSlider_i(Fl_My_Value_Slider* o, void*) {
  slider_attack_cb(o->value());
}
void flgui::cb_attackSlider(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_attackSlider_i(o,v);
}

void flgui::cb_releaseSlider_i(Fl_My_Value_Slider* o, void*) {
  slider_release_cb(o->value());
}
void flgui::cb_releaseSlider(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_releaseSlider_i(o,v);
}

void flgui::cb_makeupSlider_i(Fl_My_Value_Slider* o, void*) {
  slider_makeup_cb(o->value());
}
void flgui::cb_makeupSlider(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_makeupSlider_i(o,v);
}

void flgui::cb_check_aggressive_mode_i(Fl_Check_Button*, void*) {
  check_aggressive_mode_cb();
}
void flgui::cb_check_aggressive_mode(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_aggressive_mode_i(o,v);
}

void flgui::cb_check_rec_drc_i(Fl_Check_Button*, void*) {
  check_rec_drc_cb();
}
void flgui::cb_check_rec_drc(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_rec_drc_i(o,v);
}

void flgui::cb_Reset_i(Fl_Button*, void*) {
  button_eq_reset_cb();
}
void flgui::cb_Reset(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

void flgui::cb_Reset1_i(Fl_Button*, void*) {
  button_drc_reset_cb();
}
void flgui::cb_Reset1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_Reset1_i(o,v);
}

void flgui::cb_choice_midi_dev_i(Fl_Choice*, void*) {
  choice_midi_dev_cb();
}
void flgui::cb_choice_midi_dev(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_midi_dev_i(o,v);
}

void flgui::cb_button_midi_rescan_devices_i(Fl_Button*, void*) {
  button_midi_rescan_devices_cb();
}
void flgui::cb_button_midi_rescan_devices(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_button_midi_rescan_devices_i(o,v);
}

void flgui::cb_browser_midi_command_i(Fl_Browser*, void*) {
  browser_midi_command_cb();
}
void flgui::cb_browser_midi_command(Fl_Browser* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_browser_midi_command_i(o,v);
}

void flgui::cb_check_midi_command_enable_i(Fl_Check_Button*, void*) {
  check_midi_command_enable_cb();
}
void flgui::cb_check_midi_command_enable(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_check_midi_command_enable_i(o,v);
}

void flgui::cb_choice_midi_channel_i(Fl_Choice*, void*) {
  choice_midi_channel_cb();
}
void flgui::cb_choice_midi_channel(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_midi_channel_i(o,v);
}

unsigned char flgui::menu_choice_midi_channel_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_midi_channel[] = {
 {"Any", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"13", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"14", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"15", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_input_midi_msg_num_i(Fl_Value_Input*, void*) {
  input_midi_msg_num_cb();
}
void flgui::cb_input_midi_msg_num(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_midi_msg_num_i(o,v);
}

void flgui::cb_button_midi_learn_i(Fl_Button*, void*) {
  button_midi_learn_cb();
}
void flgui::cb_button_midi_learn(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_midi_learn_i(o,v);
}

void flgui::cb_choice_midi_cc_mode_i(Fl_Choice*, void*) {
  choice_midi_cc_mode_cb();
}
void flgui::cb_choice_midi_cc_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_midi_cc_mode_i(o,v);
}

unsigned char flgui::menu_choice_midi_cc_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_midi_cc_mode[] = {
 {"Absolute", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Relative (Twos Complement)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Relative (Binary Offset)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Relative (Sign Magnitude)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_check_midi_soft_takeover_i(Fl_Check_Button*, void*) {
  check_midi_soft_takeover_cb();
}
void flgui::cb_check_midi_soft_takeover(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_midi_soft_takeover_i(o,v);
}

void flgui::cb_input_tls_cert_file_i(Fl_Input*, void*) {
  input_tls_cert_file_cb();
}
void flgui::cb_input_tls_cert_file(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_tls_cert_file_i(o,v);
}

void flgui::cb_input_tls_cert_dir_i(Fl_Input*, void*) {
  input_tls_cert_dir_cb();
}
void flgui::cb_input_tls_cert_dir(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_tls_cert_dir_i(o,v);
}

void flgui::cb_button_tls_browse_dir_i(Fl_Button*, void*) {
  button_tls_browse_dir_cb();
}
void flgui::cb_button_tls_browse_dir(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_tls_browse_dir_i(o,v);
}

void flgui::cb_button_tls_browse_file_i(Fl_Button*, void*) {
  button_tls_browse_file_cb();
}
void flgui::cb_button_tls_browse_file(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_tls_browse_file_i(o,v);
}

void flgui::cb_button_gui_text_color_i(Fl_Button*, void*) {
  button_gui_text_color_cb();
}
void flgui::cb_button_gui_text_color(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_gui_text_color_i(o,v);
}

void flgui::cb_button_gui_bg_color_i(Fl_Button*, void*) {
  button_gui_bg_color_cb();
}
void flgui::cb_button_gui_bg_color(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_gui_bg_color_i(o,v);
}

void flgui::cb_check_gui_attach_i(Fl_Check_Button*, void*) {
  check_gui_attach_cb();
}
void flgui::cb_check_gui_attach(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_attach_i(o,v);
}

void flgui::cb_check_gui_ontop_i(Fl_Check_Button*, void*) {
  check_gui_ontop_cb();
}
void flgui::cb_check_gui_ontop(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_ontop_i(o,v);
}

void flgui::cb_check_gui_lcd_auto_i(Fl_Check_Button*, void*) {
  check_gui_lcd_auto_cb();
}
void flgui::cb_check_gui_lcd_auto(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_lcd_auto_i(o,v);
}

void flgui::cb_check_gui_hide_log_window_i(Fl_Check_Button*, void*) {
  check_gui_hide_log_window_cb();
}
void flgui::cb_check_gui_hide_log_window(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_hide_log_window_i(o,v);
}

void flgui::cb_check_gui_remember_pos_i(Fl_Check_Button*, void*) {
  check_gui_remember_pos_cb();
}
void flgui::cb_check_gui_remember_pos(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_remember_pos_i(o,v);
}

void flgui::cb_check_gui_start_minimized_i(Fl_Check_Button*, void*) {
  check_gui_start_minimized_cb();
}
void flgui::cb_check_gui_start_minimized(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_start_minimized_i(o,v);
}

void flgui::cb_check_gui_disable_gain_slider_i(Fl_Check_Button*, void*) {
  check_gui_disable_gain_slider_cb();
}
void flgui::cb_check_gui_disable_gain_slider(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_disable_gain_slider_i(o,v);
}

void flgui::cb_check_gui_show_listeners_i(Fl_Check_Button*, void*) {
  check_gui_show_listeners_cb();
}
void flgui::cb_check_gui_show_listeners(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_show_listeners_i(o,v);
}

void flgui::cb_input_gui_window_title_i(Fl_Input*, void*) {
  input_gui_window_title_cb();
}
void flgui::cb_input_gui_window_title(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_gui_window_title_i(o,v);
}

void flgui::cb_choice_gui_language_i(Fl_Choice*, void*) {
  choice_gui_language_cb();
}
void flgui::cb_choice_gui_language(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_gui_language_i(o,v);
}

unsigned char flgui::menu_choice_gui_language_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_gui_language[] = {
 {"System", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\330\247\331\204\330\271\330\261\330\250", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Deutsch", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"English", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Espa\303\261ol", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Fran\303\247""ais", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Nederlands", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Portugu\303\252s Brasileiro", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_radio_gui_vu_gradient_i(Fl_Round_Button*, void*) {
  radio_gui_vu_gradient_cb();
}
void flgui::cb_radio_gui_vu_gradient(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_gui_vu_gradient_i(o,v);
}

void flgui::cb_radio_gui_vu_solid_i(Fl_Round_Button*, void*) {
  radio_gui_vu_solid_cb();
}
void flgui::cb_radio_gui_vu_solid(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_gui_vu_solid_i(o,v);
}

void flgui::cb_check_gui_always_show_vu_tabs_i(Fl_Check_Button*, void*) {
  check_gui_always_show_vu_tabs_cb();
}
void flgui::cb_check_gui_always_show_vu_tabs(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_gui_always_show_vu_tabs_i(o,v);
}

void flgui::cb_Donate_i(Fl_Button*, void*) {
  fl_open_uri("https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=LTRSQNTWN4L6L&source=url");
}
void flgui::cb_Donate(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Donate_i(o,v);
}

void flgui::cb_Become_i(Fl_Button*, void*) {
  fl_open_uri("https://www.patreon.com/butt_broadcast");
}
void flgui::cb_Become(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Become_i(o,v);
}

void flgui::cb_Bitcoin_i(Fl_Button*, void*) {
  this->window_donate_crypto->position(this->window_cfg->x(), this->window_cfg->y());
this->window_donate_crypto->show();
}
void flgui::cb_Bitcoin(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Bitcoin_i(o,v);
}

void flgui::cb_Apple_i(Fl_Button*, void*) {
  fl_open_uri("https://donorbox.org/butt");
}
void flgui::cb_Apple(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Apple_i(o,v);
}

void flgui::cb_button_cfg_show_pw_i(Fl_Button*, void*) {
  button_add_srv_show_pwd_cb();
}
void flgui::cb_button_cfg_show_pw(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_cfg_show_pw_i(o,v);
}

void flgui::cb_radio_add_srv_shoutcast_i(Fl_Round_Button*, void*) {
  radio_add_srv_shoutcast_cb();
}
void flgui::cb_radio_add_srv_shoutcast(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_radio_add_srv_shoutcast_i(o,v);
}

void flgui::cb_radio_add_srv_icecast_i(Fl_Round_Button*, void*) {
  radio_add_srv_icecast_cb();
}
void flgui::cb_radio_add_srv_icecast(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_radio_add_srv_icecast_i(o,v);
}

void flgui::cb_radio_add_srv_radioco_i(Fl_Round_Button*, void*) {
  radio_add_srv_radioco_cb();
}
void flgui::cb_radio_add_srv_radioco(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_radio_add_srv_radioco_i(o,v);
}

void flgui::cb_Cancel_i(Fl_Button*, void*) {
  button_add_srv_cancel_cb();
}
void flgui::cb_Cancel(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void flgui::cb_button_add_srv_add_i(Fl_Button*, void*) {
  button_add_srv_add_cb();
}
void flgui::cb_button_add_srv_add(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_add_i(o,v);
}

void flgui::cb_button_add_srv_save_i(Fl_Button*, void*) {
  button_add_srv_save_cb();
}
void flgui::cb_button_add_srv_save(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_save_i(o,v);
}

void flgui::cb_button_add_srv_revoke_cert_i(Fl_Button*, void*) {
  button_add_srv_revoke_cert_cb();
}
void flgui::cb_button_add_srv_revoke_cert(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_add_srv_revoke_cert_i(o,v);
}

void flgui::cb_button_add_srv_get_stations_i(Fl_Button*, void*) {
  button_add_srv_get_stations_cb();
}
void flgui::cb_button_add_srv_get_stations(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_get_stations_i(o,v);
}

void flgui::cb_button_add_srv_select_all_i(Fl_Button*, void*) {
  button_add_srv_select_all_cb();
}
void flgui::cb_button_add_srv_select_all(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_select_all_i(o,v);
}

void flgui::cb_button_add_srv_deselect_all_i(Fl_Button*, void*) {
  button_add_srv_deselect_all_cb();
}
void flgui::cb_button_add_srv_deselect_all(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_deselect_all_i(o,v);
}

void flgui::cb_Cancel1_i(Fl_Button*, void*) {
  button_add_icy_cancel_cb();
}
void flgui::cb_Cancel1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void flgui::cb_button_add_icy_add_i(Fl_Button*, void*) {
  button_add_icy_add_cb();
}
void flgui::cb_button_add_icy_add(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_icy_add_i(o,v);
}

void flgui::cb_button_add_icy_save_i(Fl_Button*, void*) {
  button_add_icy_save_cb();
}
void flgui::cb_button_add_icy_save(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_icy_save_i(o,v);
}

void flgui::cb_Copy_i(Fl_Button*, void*) {
  int len = this->output_bitcoin_addr->size();
this->output_bitcoin_addr->position(0, len);
this->output_bitcoin_addr->copy(1);

fl_message(_("Bitcoin address has been copied to clipboard."));
}
void flgui::cb_Copy(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Copy_i(o,v);
}

void flgui::cb_Copy1_i(Fl_Button*, void*) {
  int len = this->output_litecoin_addr->size();
this->output_litecoin_addr->position(0, len);
this->output_litecoin_addr->copy(1);

fl_message(_("Litecoin address has been copied to clipboard."));
}
void flgui::cb_Copy1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Copy1_i(o,v);
}

void flgui::cb_Copy2_i(Fl_Button*, void*) {
  int len = this->output_monero_addr->size();
this->output_monero_addr->position(0, len);
this->output_monero_addr->copy(1);

fl_message(_("Monero address has been copied to clipboard."));
}
void flgui::cb_Copy2(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Copy2_i(o,v);
}

void flgui::cb_Close_i(Fl_Button*, void*) {
  this->window_donate_crypto->hide();
}
void flgui::cb_Close(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void flgui::cb_choice_stream_mp3_enc_quality_i(Fl_Choice*, void*) {
  choice_stream_mp3_enc_quality_cb();
}
void flgui::cb_choice_stream_mp3_enc_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_mp3_enc_quality_i(o,v);
}

unsigned char flgui::menu_choice_stream_mp3_enc_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_mp3_enc_quality[] = {
 {"0 (best)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_mp3_stereo_mode_i(Fl_Choice*, void*) {
  choice_stream_mp3_stereo_mode_cb();
}
void flgui::cb_choice_stream_mp3_stereo_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_mp3_stereo_mode_i(o,v);
}

unsigned char flgui::menu_choice_stream_mp3_stereo_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_mp3_stereo_mode[] = {
 {"Auto (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Stereo", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Joint Stereo", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_mp3_bitrate_mode_i(Fl_Choice*, void*) {
  choice_stream_mp3_bitrate_mode_cb();
}
void flgui::cb_choice_stream_mp3_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_mp3_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_stream_mp3_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_mp3_bitrate_mode[] = {
 {"CBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ABR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_mp3_vbr_quality_i(Fl_Choice*, void*) {
  choice_stream_mp3_vbr_quality_cb();
}
void flgui::cb_choice_stream_mp3_vbr_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_mp3_vbr_quality_i(o,v);
}

unsigned char flgui::menu_choice_stream_mp3_vbr_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_mp3_vbr_quality[] = {
 {"0 (best)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_mp3_vbr_min_bitrate_i(Fl_Choice*, void*) {
  choice_stream_mp3_vbr_min_bitrate_cb();
}
void flgui::cb_choice_stream_mp3_vbr_min_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_mp3_vbr_min_bitrate_i(o,v);
}

unsigned char flgui::menu_choice_stream_mp3_vbr_min_bitrate_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_mp3_vbr_min_bitrate[] = {
 {"8k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"24k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32k (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"48k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"56k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"80k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"96k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"112k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"160k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"192k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"224k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"320k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_mp3_vbr_max_bitrate_i(Fl_Choice*, void*) {
  choice_stream_mp3_vbr_max_bitrate_cb();
}
void flgui::cb_choice_stream_mp3_vbr_max_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_mp3_vbr_max_bitrate_i(o,v);
}

unsigned char flgui::menu_choice_stream_mp3_vbr_max_bitrate_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_mp3_vbr_max_bitrate[] = {
 {"8k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"24k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"48k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"56k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"80k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"96k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"112k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"160k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"192k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"224k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"320k (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_vorbis_bitrate_mode_i(Fl_Choice*, void*) {
  choice_stream_vorbis_bitrate_mode_cb();
}
void flgui::cb_choice_stream_vorbis_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_vorbis_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_stream_vorbis_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_vorbis_bitrate_mode[] = {
 {"CBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ABR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_vorbis_vbr_quality_i(Fl_Choice*, void*) {
  choice_stream_vorbis_vbr_quality_cb();
}
void flgui::cb_choice_stream_vorbis_vbr_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_vorbis_vbr_quality_i(o,v);
}

unsigned char flgui::menu_choice_stream_vorbis_vbr_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_vorbis_vbr_quality[] = {
 {"1.0 (best, default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.0 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_vorbis_vbr_min_bitrate_i(Fl_Choice*, void*) {
  choice_stream_vorbis_vbr_min_bitrate_cb();
}
void flgui::cb_choice_stream_vorbis_vbr_min_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_vorbis_vbr_min_bitrate_i(o,v);
}

void flgui::cb_choice_stream_vorbis_vbr_max_bitrate_i(Fl_Choice*, void*) {
  choice_stream_vorbis_vbr_max_bitrate_cb();
}
void flgui::cb_choice_stream_vorbis_vbr_max_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_vorbis_vbr_max_bitrate_i(o,v);
}

void flgui::cb_choice_stream_opus_audio_type_i(Fl_Choice*, void*) {
  choice_stream_opus_audio_type_cb();
}
void flgui::cb_choice_stream_opus_audio_type(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_opus_audio_type_i(o,v);
}

unsigned char flgui::menu_choice_stream_opus_audio_type_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_opus_audio_type[] = {
 {"Music (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Speech", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_opus_bitrate_mode_i(Fl_Choice*, void*) {
  choice_stream_opus_bitrate_mode_cb();
}
void flgui::cb_choice_stream_opus_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_opus_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_stream_opus_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_opus_bitrate_mode[] = {
 {"CBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_opus_quality_i(Fl_Choice*, void*) {
  choice_stream_opus_quality_cb();
}
void flgui::cb_choice_stream_opus_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_opus_quality_i(o,v);
}

unsigned char flgui::menu_choice_stream_opus_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_opus_quality[] = {
 {"10 (best, default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_opus_bandwidth_i(Fl_Choice*, void*) {
  choice_stream_opus_bandwidth_cb();
}
void flgui::cb_choice_stream_opus_bandwidth(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_opus_bandwidth_i(o,v);
}

unsigned char flgui::menu_choice_stream_opus_bandwidth_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_opus_bandwidth[] = {
 {"20kHz (best,default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"12kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4kHz (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_aac_profile_i(Fl_Choice*, void*) {
  choice_stream_aac_profile_cb();
}
void flgui::cb_choice_stream_aac_profile(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_aac_profile_i(o,v);
}

unsigned char flgui::menu_choice_stream_aac_profile_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_aac_profile[] = {
 {"Auto (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC-LC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"HE-AACv1 (AAC+)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"HE-AACv2 (eAAC+)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_aac_afterburner_i(Fl_Choice*, void*) {
  choice_stream_aac_afterburner_cb();
}
void flgui::cb_choice_stream_aac_afterburner(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_aac_afterburner_i(o,v);
}

unsigned char flgui::menu_choice_stream_aac_afterburner_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_aac_afterburner[] = {
 {"On (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Off", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_stream_aac_bitrate_mode_i(Fl_Choice*, void*) {
  choice_stream_aac_bitrate_mode_cb();
}
void flgui::cb_choice_stream_aac_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_stream_aac_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_stream_aac_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_stream_aac_bitrate_mode[] = {
 {"CBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_radio_stream_flac_bit_depth_16_i(Fl_Round_Button*, void*) {
  radio_stream_flac_bit_depth_16_cb();
}
void flgui::cb_radio_stream_flac_bit_depth_16(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_stream_flac_bit_depth_16_i(o,v);
}

void flgui::cb_radio_stream_flac_bit_depth_24_i(Fl_Round_Button*, void*) {
  radio_stream_flac_bit_depth_24_cb();
}
void flgui::cb_radio_stream_flac_bit_depth_24(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_stream_flac_bit_depth_24_i(o,v);
}

void flgui::cb_Close1_i(Fl_Button*, void*) {
  this->window_stream_codec_settings->hide();
}
void flgui::cb_Close1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void flgui::cb_choice_rec_mp3_enc_quality_i(Fl_Choice*, void*) {
  choice_rec_mp3_enc_quality_cb();
}
void flgui::cb_choice_rec_mp3_enc_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_mp3_enc_quality_i(o,v);
}

unsigned char flgui::menu_choice_rec_mp3_enc_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_mp3_enc_quality[] = {
 {"0 (best)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_mp3_stereo_mode_i(Fl_Choice*, void*) {
  choice_rec_mp3_stereo_mode_cb();
}
void flgui::cb_choice_rec_mp3_stereo_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_mp3_stereo_mode_i(o,v);
}

unsigned char flgui::menu_choice_rec_mp3_stereo_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_mp3_stereo_mode[] = {
 {"Auto (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Stereo", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Joint Stereo", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_mp3_bitrate_mode_i(Fl_Choice*, void*) {
  choice_rec_mp3_bitrate_mode_cb();
}
void flgui::cb_choice_rec_mp3_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_mp3_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_rec_mp3_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_mp3_bitrate_mode[] = {
 {"CBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ABR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_mp3_vbr_quality_i(Fl_Choice*, void*) {
  choice_rec_mp3_vbr_quality_cb();
}
void flgui::cb_choice_rec_mp3_vbr_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_mp3_vbr_quality_i(o,v);
}

unsigned char flgui::menu_choice_rec_mp3_vbr_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_mp3_vbr_quality[] = {
 {"0 (best)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_mp3_vbr_min_bitrate_i(Fl_Choice*, void*) {
  choice_rec_mp3_vbr_min_bitrate_cb();
}
void flgui::cb_choice_rec_mp3_vbr_min_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_mp3_vbr_min_bitrate_i(o,v);
}

unsigned char flgui::menu_choice_rec_mp3_vbr_min_bitrate_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_mp3_vbr_min_bitrate[] = {
 {"8k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"24k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32k (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"48k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"56k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"80k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"96k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"112k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"160k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"192k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"224k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"320k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_mp3_vbr_max_bitrate_i(Fl_Choice*, void*) {
  choice_rec_mp3_vbr_max_bitrate_cb();
}
void flgui::cb_choice_rec_mp3_vbr_max_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_mp3_vbr_max_bitrate_i(o,v);
}

unsigned char flgui::menu_choice_rec_mp3_vbr_max_bitrate_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_mp3_vbr_max_bitrate[] = {
 {"8k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"24k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"48k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"56k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"80k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"96k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"112k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"160k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"192k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"224k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"320k (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_vorbis_bitrate_mode_i(Fl_Choice*, void*) {
  choice_rec_vorbis_bitrate_mode_cb();
}
void flgui::cb_choice_rec_vorbis_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_vorbis_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_rec_vorbis_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_vorbis_bitrate_mode[] = {
 {"CBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ABR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_vorbis_vbr_quality_i(Fl_Choice*, void*) {
  choice_rec_vorbis_vbr_quality_cb();
}
void flgui::cb_choice_rec_vorbis_vbr_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_vorbis_vbr_quality_i(o,v);
}

unsigned char flgui::menu_choice_rec_vorbis_vbr_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_vorbis_vbr_quality[] = {
 {"1.0 (best, default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0.0 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_vorbis_vbr_min_bitrate_i(Fl_Choice*, void*) {
  choice_rec_vorbis_vbr_min_bitrate_cb();
}
void flgui::cb_choice_rec_vorbis_vbr_min_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_vorbis_vbr_min_bitrate_i(o,v);
}

void flgui::cb_choice_rec_vorbis_vbr_max_bitrate_i(Fl_Choice*, void*) {
  choice_rec_vorbis_vbr_max_bitrate_cb();
}
void flgui::cb_choice_rec_vorbis_vbr_max_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_vorbis_vbr_max_bitrate_i(o,v);
}

void flgui::cb_choice_rec_opus_audio_type_i(Fl_Choice*, void*) {
  choice_rec_opus_audio_type_cb();
}
void flgui::cb_choice_rec_opus_audio_type(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_opus_audio_type_i(o,v);
}

unsigned char flgui::menu_choice_rec_opus_audio_type_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_opus_audio_type[] = {
 {"Music (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Speech", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_opus_bitrate_mode_i(Fl_Choice*, void*) {
  choice_rec_opus_bitrate_mode_cb();
}
void flgui::cb_choice_rec_opus_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_opus_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_rec_opus_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_opus_bitrate_mode[] = {
 {"CBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_opus_quality_i(Fl_Choice*, void*) {
  choice_rec_opus_quality_cb();
}
void flgui::cb_choice_rec_opus_quality(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_opus_quality_i(o,v);
}

unsigned char flgui::menu_choice_rec_opus_quality_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_opus_quality[] = {
 {"10 (best, default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_opus_bandwidth_i(Fl_Choice*, void*) {
  choice_rec_opus_bandwidth_cb();
}
void flgui::cb_choice_rec_opus_bandwidth(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_opus_bandwidth_i(o,v);
}

unsigned char flgui::menu_choice_rec_opus_bandwidth_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_opus_bandwidth[] = {
 {"20kHz (best,default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"12kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4kHz (worst)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_aac_profile_i(Fl_Choice*, void*) {
  choice_rec_aac_profile_cb();
}
void flgui::cb_choice_rec_aac_profile(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_aac_profile_i(o,v);
}

unsigned char flgui::menu_choice_rec_aac_profile_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_aac_profile[] = {
 {"Auto (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC-LC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"HE-AACv1 (AAC+)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"HE-AACv2 (eAAC+)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_aac_afterburner_i(Fl_Choice*, void*) {
  choice_rec_aac_afterburner_cb();
}
void flgui::cb_choice_rec_aac_afterburner(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_aac_afterburner_i(o,v);
}

unsigned char flgui::menu_choice_rec_aac_afterburner_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_aac_afterburner[] = {
 {"On (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Off", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_aac_bitrate_mode_i(Fl_Choice*, void*) {
  choice_rec_aac_bitrate_mode_cb();
}
void flgui::cb_choice_rec_aac_bitrate_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_rec_aac_bitrate_mode_i(o,v);
}

unsigned char flgui::menu_choice_rec_aac_bitrate_mode_i18n_done = 0;
Fl_Menu_Item flgui::menu_choice_rec_aac_bitrate_mode[] = {
 {"CBR (default)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"VBR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_radio_rec_flac_bit_depth_16_i(Fl_Round_Button*, void*) {
  radio_rec_flac_bit_depth_16_cb();
}
void flgui::cb_radio_rec_flac_bit_depth_16(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_rec_flac_bit_depth_16_i(o,v);
}

void flgui::cb_radio_rec_flac_bit_depth_24_i(Fl_Round_Button*, void*) {
  radio_rec_flac_bit_depth_24_cb();
}
void flgui::cb_radio_rec_flac_bit_depth_24(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_rec_flac_bit_depth_24_i(o,v);
}

void flgui::cb_radio_rec_wav_bit_depth_16_i(Fl_Round_Button*, void*) {
  radio_rec_wav_bit_depth_16_cb();
}
void flgui::cb_radio_rec_wav_bit_depth_16(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_rec_wav_bit_depth_16_i(o,v);
}

void flgui::cb_radio_rec_wav_bit_depth_32_i(Fl_Round_Button*, void*) {
  radio_rec_wav_bit_depth_32_cb();
}
void flgui::cb_radio_rec_wav_bit_depth_32(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_rec_wav_bit_depth_32_i(o,v);
}

void flgui::cb_radio_rec_wav_bit_depth_24_i(Fl_Round_Button*, void*) {
  radio_rec_wav_bit_depth_24_cb();
}
void flgui::cb_radio_rec_wav_bit_depth_24(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_radio_rec_wav_bit_depth_24_i(o,v);
}

void flgui::cb_Close2_i(Fl_Button*, void*) {
  this->window_rec_codec_settings->hide();
}
void flgui::cb_Close2(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void flgui::cb_slider_mixer_primary_device_i(Fl_My_Value_Slider* o, void* v) {
  slider_mixer_primary_device_cb(o->value(),v);
}
void flgui::cb_slider_mixer_primary_device(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_slider_mixer_primary_device_i(o,v);
}

void flgui::cb_slider_mixer_secondary_device_i(Fl_My_Value_Slider* o, void* v) {
  slider_mixer_secondary_device_cb(o->value(),v);
}
void flgui::cb_slider_mixer_secondary_device(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_slider_mixer_secondary_device_i(o,v);
}

void flgui::cb_slider_mixer_recording_gain_i(Fl_My_Value_Slider* o, void* v) {
  slider_mixer_recording_gain_cb(o->value(),v);
}
void flgui::cb_slider_mixer_recording_gain(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_slider_mixer_recording_gain_i(o,v);
}

void flgui::cb_slider_mixer_streaming_gain_i(Fl_My_Value_Slider* o, void* v) {
  slider_mixer_streaming_gain_cb(o->value(),v);
}
void flgui::cb_slider_mixer_streaming_gain(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_slider_mixer_streaming_gain_i(o,v);
}

void flgui::cb_button_mixer_mute_primary_device_i(Fl_Light_Button*, void*) {
  button_mixer_mute_primary_device_cb();
}
void flgui::cb_button_mixer_mute_primary_device(Fl_Light_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_mixer_mute_primary_device_i(o,v);
}

void flgui::cb_button_mixer_mute_secondary_device_i(Fl_Light_Button*, void*) {
  button_mixer_mute_secondary_device_cb();
}
void flgui::cb_button_mixer_mute_secondary_device(Fl_Light_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_mixer_mute_secondary_device_i(o,v);
}

void flgui::cb_slider_mixer_cross_fader_i(Fl_My_Value_Slider* o, void* v) {
  slider_mixer_cross_fader_cb(o->value(),v);
}
void flgui::cb_slider_mixer_cross_fader(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_slider_mixer_cross_fader_i(o,v);
}

void flgui::cb_slider_mixer_master_gain_i(Fl_My_Value_Slider* o, void* v) {
  slider_mixer_master_gain_cb(o->value(),v);
}
void flgui::cb_slider_mixer_master_gain(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_slider_mixer_master_gain_i(o,v);
}

void flgui::cb_Reset2_i(Fl_Button*, void*) {
  button_mixer_reset_cb();
}
void flgui::cb_Reset2(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Reset2_i(o,v);
}

flgui::flgui() {
  { window_main = new Fl_My_Double_Window(430, 395);
    window_main->box(FL_FLAT_BOX);
    window_main->color(FL_BACKGROUND_COLOR);
    window_main->selection_color(FL_BACKGROUND_COLOR);
    window_main->labeltype(FL_NO_LABEL);
    window_main->labelfont(0);
    window_main->labelsize(14);
    window_main->labelcolor(FL_FOREGROUND_COLOR);
    window_main->callback((Fl_Callback*)cb_window_main, (void*)(this));
    window_main->align(Fl_Align(FL_ALIGN_TOP));
    window_main->when(FL_WHEN_RELEASE);
    { label_volume = new Fl_Box(154, 119, 135, 16, gettext("Streaming volume"));
      label_volume->labelsize(10);
      label_volume->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* label_volume
    { vu_tabs = new Fl_Tabs(140, 110, 196, 74);
      vu_tabs->box(FL_GTK_THIN_UP_BOX);
      vu_tabs->selection_color(FL_DARK1);
      vu_tabs->labelsize(13);
      vu_tabs->callback((Fl_Callback*)cb_vu_tabs);
      { Fl_Group* o = new Fl_Group(150, 128, 177, 47, gettext("Streaming"));
        o->labelsize(11);
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(150, 130, 185, 50, gettext("Recording"));
        o->labelsize(11);
        o->hide();
        o->end();
      } // Fl_Group* o
      vu_tabs->end();
    } // Fl_Tabs* vu_tabs
    { lcd = new Fl_ILM216(10, 10, 410, 95);
      lcd->tooltip(gettext("press left mouse to toggle lcd info"));
      lcd->box(FL_ENGRAVED_BOX);
      lcd->color(FL_GRAY0);
      lcd->selection_color((Fl_Color)41);
      lcd->labeltype(FL_NORMAL_LABEL);
      lcd->labelfont(0);
      lcd->labelsize(14);
      lcd->labelcolor(FL_FOREGROUND_COLOR);
      lcd->callback((Fl_Callback*)cb_lcd);
      lcd->align(Fl_Align(FL_ALIGN_CENTER));
      lcd->when(FL_WHEN_RELEASE);
    } // Fl_ILM216* lcd
    { button_connect = new Fl_Button(102, 148, 30, 30, gettext("@>"));
      button_connect->tooltip(gettext("connect to server"));
      button_connect->box(FL_ENGRAVED_BOX);
      button_connect->shortcut(0x40063);
      button_connect->down_box(FL_ENGRAVED_BOX);
      button_connect->color((Fl_Color)48);
      button_connect->selection_color((Fl_Color)40);
      button_connect->labelfont(1);
      button_connect->labelsize(21);
      button_connect->labelcolor(FL_BACKGROUND2_COLOR);
      button_connect->callback((Fl_Callback*)cb_button_connect);
    } // Fl_Button* button_connect
    { button_disconnect = new Fl_Button(62, 148, 30, 30, gettext("@square"));
      button_disconnect->tooltip(gettext("disconnect from server"));
      button_disconnect->box(FL_ENGRAVED_BOX);
      button_disconnect->shortcut(0x40064);
      button_disconnect->down_box(FL_ENGRAVED_BOX);
      button_disconnect->color((Fl_Color)48);
      button_disconnect->selection_color((Fl_Color)40);
      button_disconnect->labelfont(1);
      button_disconnect->labelsize(12);
      button_disconnect->labelcolor(FL_BACKGROUND2_COLOR);
      button_disconnect->callback((Fl_Callback*)cb_button_disconnect);
    } // Fl_Button* button_disconnect
    { button_record = new Fl_Button(10, 148, 30, 30, gettext("@circle"));
      button_record->tooltip(gettext("start/stop recording"));
      button_record->box(FL_ENGRAVED_BOX);
      button_record->shortcut(0x40072);
      button_record->down_box(FL_ENGRAVED_BOX);
      button_record->color((Fl_Color)48);
      button_record->selection_color((Fl_Color)40);
      button_record->labelfont(1);
      button_record->labelsize(12);
      button_record->labelcolor((Fl_Color)1);
      button_record->callback((Fl_Callback*)cb_button_record);
    } // Fl_Button* button_record
    { button_info = new Fl_Button(340, 163, 80, 15, gettext("Show log"));
      button_info->tooltip(gettext("show/hide info window"));
      button_info->box(FL_ENGRAVED_BOX);
      button_info->shortcut(0x40076);
      button_info->color((Fl_Color)48);
      button_info->labelsize(10);
      button_info->callback((Fl_Callback*)cb_button_info);
    } // Fl_Button* button_info
    { vumeter = new VUMeter(156, 135, 174, 43);
      vumeter->box(FL_BORDER_BOX);
      vumeter->color(FL_BACKGROUND_COLOR);
      vumeter->selection_color(FL_BACKGROUND_COLOR);
      vumeter->labeltype(FL_NORMAL_LABEL);
      vumeter->labelfont(0);
      vumeter->labelsize(14);
      vumeter->labelcolor(FL_FOREGROUND_COLOR);
      vumeter->align(Fl_Align(FL_ALIGN_TOP));
      vumeter->when(FL_WHEN_RELEASE);
      vumeter->end();
    } // VUMeter* vumeter
    { invisible_tab_box = new Fl_My_Invisible_Box(140, 108, 197, 76);
      invisible_tab_box->box(FL_NO_BOX);
      invisible_tab_box->color(FL_BACKGROUND_COLOR);
      invisible_tab_box->selection_color(FL_BACKGROUND_COLOR);
      invisible_tab_box->labeltype(FL_NORMAL_LABEL);
      invisible_tab_box->labelfont(0);
      invisible_tab_box->labelsize(14);
      invisible_tab_box->labelcolor(FL_FOREGROUND_COLOR);
      invisible_tab_box->align(Fl_Align(FL_ALIGN_CENTER));
      invisible_tab_box->when(FL_WHEN_RELEASE);
    } // Fl_My_Invisible_Box* invisible_tab_box
    { info_output = new Fl_Text_Display(0, 212, 430, 184);
      info_output->box(FL_EMBOSSED_BOX);
      info_output->textfont(4);
      info_output->textsize(15);
      Fl_Group::current()->resizable(info_output);
    } // Fl_Text_Display* info_output
    { button_cfg = new Fl_Button(340, 135, 80, 22, gettext("Settings"));
      button_cfg->tooltip(gettext("show/hide config window"));
      button_cfg->box(FL_ENGRAVED_BOX);
      button_cfg->shortcut(0x40066);
      button_cfg->color((Fl_Color)48);
      button_cfg->labelsize(11);
      button_cfg->callback((Fl_Callback*)cb_button_cfg);
    } // Fl_Button* button_cfg
    { label_n24dB = new Fl_Box(10, 190, 30, 16, gettext("-24 dB"));
      label_n24dB->labelsize(10);
    } // Fl_Box* label_n24dB
    { slider_gain = new Fl_My_Value_Slider(50, 191, 335, 15, gettext("Gain"));
      slider_gain->tooltip(gettext("Master Gain"));
      slider_gain->type(5);
      slider_gain->box(FL_NO_BOX);
      slider_gain->color(FL_BACKGROUND_COLOR);
      slider_gain->selection_color(FL_BACKGROUND_COLOR);
      slider_gain->labeltype(FL_NO_LABEL);
      slider_gain->labelfont(0);
      slider_gain->labelsize(14);
      slider_gain->labelcolor(FL_FOREGROUND_COLOR);
      slider_gain->minimum(-24);
      slider_gain->maximum(24);
      slider_gain->step(0.1);
      slider_gain->slider_size(0.1);
      slider_gain->callback((Fl_Callback*)cb_slider_gain, (void*)(CB_CALLED_BY_USER));
      slider_gain->align(Fl_Align(FL_ALIGN_CENTER));
      slider_gain->when(FL_WHEN_CHANGED);
      slider_gain->default_value = 0.0;
    } // Fl_My_Value_Slider* slider_gain
    { label_p24dB = new Fl_Box(390, 190, 30, 16, gettext("+24 dB"));
      label_p24dB->labelsize(10);
    } // Fl_Box* label_p24dB
    { radio_co_logo = new Fl_Button(237, 27, 128, 61);
      radio_co_logo->box(FL_NO_BOX);
      radio_co_logo->image( image_radio_co_badge() );
      radio_co_logo->callback((Fl_Callback*)cb_radio_co_logo);
    } // Fl_Button* radio_co_logo
    { label_current_listeners = new Fl_Box(211, 83, 165, 16, gettext("Listeners: 99999"));
      label_current_listeners->labelcolor(FL_BACKGROUND2_COLOR);
      label_current_listeners->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* label_current_listeners
    { button_mixer = new Fl_Button(10, 113, 122, 22, gettext("Mixer"));
      button_mixer->tooltip(gettext("show/hide mixer window"));
      button_mixer->box(FL_ENGRAVED_BOX);
      button_mixer->shortcut(0x40066);
      button_mixer->color((Fl_Color)48);
      button_mixer->labelsize(11);
      button_mixer->callback((Fl_Callback*)cb_button_mixer);
    } // Fl_Button* button_mixer
    window_main->size_range(430, 155, 430); window_main->is_main_window = true;
    window_main->size_range(430, 276, 430, 0);
    window_main->end();
  } // Fl_My_Double_Window* window_main
  { window_cfg = new Fl_My_Double_Window(430, 640, gettext("butt settings"));
    window_cfg->box(FL_FLAT_BOX);
    window_cfg->color(FL_BACKGROUND_COLOR);
    window_cfg->selection_color(FL_BACKGROUND_COLOR);
    window_cfg->labeltype(FL_NO_LABEL);
    window_cfg->labelfont(0);
    window_cfg->labelsize(14);
    window_cfg->labelcolor(FL_FOREGROUND_COLOR);
    window_cfg->callback((Fl_Callback*)cb_window_cfg, (void*)(this));
    window_cfg->align(Fl_Align(FL_ALIGN_TOP));
    window_cfg->when(FL_WHEN_RELEASE);
    { Settings = new Fl_Tabs(-1, 0, 436, 641);
      Settings->selection_color(FL_DARK2);
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("Main"));
        o->when(FL_WHEN_RELEASE_ALWAYS);
        { Fl_Group* o = new Fl_Group(50, 55, 328, 155, gettext("Server Settings"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_act_srv = new Fl_Choice(58, 75, 310, 20, gettext("Server"));
            choice_cfg_act_srv->tooltip(gettext("Server to connect to"));
            choice_cfg_act_srv->down_box(FL_BORDER_BOX);
            choice_cfg_act_srv->callback((Fl_Callback*)cb_choice_cfg_act_srv);
            choice_cfg_act_srv->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_act_srv
          { Fl_Button* o = new Fl_Button(58, 100, 80, 20, gettext("ADD"));
            o->tooltip(gettext("Add server"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_ADD);
          } // Fl_Button* o
          { button_cfg_edit_srv = new Fl_Button(173, 100, 80, 20, gettext("EDIT"));
            button_cfg_edit_srv->tooltip(gettext("Edit selected server"));
            button_cfg_edit_srv->box(FL_ENGRAVED_BOX);
            button_cfg_edit_srv->callback((Fl_Callback*)cb_button_cfg_edit_srv);
          } // Fl_Button* button_cfg_edit_srv
          { button_cfg_del_srv = new Fl_Button(288, 100, 80, 20, gettext("DEL"));
            button_cfg_del_srv->tooltip(gettext("Delete selected server"));
            button_cfg_del_srv->box(FL_ENGRAVED_BOX);
            button_cfg_del_srv->callback((Fl_Callback*)cb_button_cfg_del_srv);
          } // Fl_Button* button_cfg_del_srv
          { choice_cfg_act_icy = new Fl_Choice(58, 155, 310, 20, gettext("Stream Infos"));
            choice_cfg_act_icy->tooltip(gettext("Stream info that shall be used"));
            choice_cfg_act_icy->down_box(FL_BORDER_BOX);
            choice_cfg_act_icy->callback((Fl_Callback*)cb_choice_cfg_act_icy);
            choice_cfg_act_icy->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_act_icy
          { Fl_Button* o = new Fl_Button(58, 180, 80, 20, gettext("ADD"));
            o->tooltip(gettext("Add stream info"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_ADD1);
          } // Fl_Button* o
          { button_cfg_edit_icy = new Fl_Button(173, 180, 80, 20, gettext("EDIT"));
            button_cfg_edit_icy->tooltip(gettext("Edit stream info"));
            button_cfg_edit_icy->box(FL_ENGRAVED_BOX);
            button_cfg_edit_icy->callback((Fl_Callback*)cb_button_cfg_edit_icy);
          } // Fl_Button* button_cfg_edit_icy
          { button_cfg_del_icy = new Fl_Button(288, 180, 80, 20, gettext("DEL"));
            button_cfg_del_icy->tooltip(gettext("Delete stream info"));
            button_cfg_del_icy->box(FL_ENGRAVED_BOX);
            button_cfg_del_icy->callback((Fl_Callback*)cb_button_cfg_del_icy);
          } // Fl_Button* button_cfg_del_icy
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 237, 326, 40, gettext("Log File"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_log_filename = new Fl_Input(58, 245, 280, 25);
            input_log_filename->tooltip(gettext("Log file path"));
            input_log_filename->callback((Fl_Callback*)cb_input_log_filename);
            input_log_filename->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Input* input_log_filename
          { Fl_Button* o = new Fl_Button(344, 245, 25, 25);
            o->tooltip(gettext("Select log file"));
            o->box(FL_ENGRAVED_BOX);
            o->image( image_folder() );
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 304, 326, 50, gettext("Configuration"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Button* o = new Fl_Button(58, 315, 70, 28, gettext("Import..."));
            o->tooltip(gettext("Import settings from config file"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Import);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(166, 315, 95, 28, gettext("&Save"));
            o->tooltip(gettext("Save settings"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Save);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(298, 315, 70, 28, gettext("Export..."));
            o->tooltip(gettext("export settings"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Export);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 485, 326, 50, gettext("Updates"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Button* o = new Fl_Button(261, 497, 105, 28, gettext("Check now"));
            o->tooltip(gettext("Check if a new version is available"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Check);
          } // Fl_Button* o
          { check_update_at_startup = new Fl_Check_Button(56, 504, 145, 15, gettext("Check at startup"));
            check_update_at_startup->tooltip(gettext("Check for updates at start"));
            check_update_at_startup->down_box(FL_DOWN_BOX);
            check_update_at_startup->callback((Fl_Callback*)cb_check_update_at_startup);
          } // Fl_Check_Button* check_update_at_startup
          o->end();
        } // Fl_Group* o
        { group_agent = new Fl_Group(50, 385, 326, 75, gettext("Butt Agent"));
          group_agent->box(FL_ENGRAVED_FRAME);
          group_agent->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_start_agent = new Fl_Check_Button(56, 400, 157, 15, gettext("Start agent at startup"));
            check_start_agent->tooltip(gettext("Start the butt agent when butt starts"));
            check_start_agent->down_box(FL_DOWN_BOX);
            check_start_agent->callback((Fl_Callback*)cb_check_start_agent);
          } // Fl_Check_Button* check_start_agent
          { check_minimize_to_tray = new Fl_Check_Button(56, 430, 150, 15, gettext("Minimize butt to tray"));
            check_minimize_to_tray->tooltip(gettext("Minimize butt to tray"));
            check_minimize_to_tray->down_box(FL_DOWN_BOX);
            check_minimize_to_tray->callback((Fl_Callback*)cb_check_minimize_to_tray);
          } // Fl_Check_Button* check_minimize_to_tray
          { Fl_Button* o = new Fl_Button(261, 391, 105, 28, gettext("Start Agent"));
            o->tooltip(gettext("Start the butt agent now"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Start);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(261, 425, 105, 28, gettext("Stop Agent"));
            o->tooltip(gettext("Stop the butt agent"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Stop);
          } // Fl_Button* o
          group_agent->end();
        } // Fl_Group* group_agent
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("Audio"));
        o->hide();
        { Fl_Group* o = new Fl_Group(50, 55, 326, 245, gettext("Main Audio Settings"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_dev = new Fl_Choice(58, 190, 170, 20, gettext("Primary Audio Device"));
            choice_cfg_dev->tooltip(gettext("Select your primary sound card device"));
            choice_cfg_dev->down_box(FL_FLAT_BOX);
            choice_cfg_dev->callback((Fl_Callback*)cb_choice_cfg_dev);
            choice_cfg_dev->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_dev
          { choice_cfg_channel = new Fl_Choice(58, 84, 150, 21, gettext("Channel mode"));
            choice_cfg_channel->tooltip(gettext("Select input channel"));
            choice_cfg_channel->box(FL_ENGRAVED_BOX);
            choice_cfg_channel->down_box(FL_BORDER_BOX);
            choice_cfg_channel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            if (!menu_choice_cfg_channel_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_choice_cfg_channel[i].label())
                  menu_choice_cfg_channel[i].label(gettext(menu_choice_cfg_channel[i].label()));
              menu_choice_cfg_channel_i18n_done = 1;
            }
            choice_cfg_channel->menu(menu_choice_cfg_channel);
          } // Fl_Choice* choice_cfg_channel
          { choice_cfg_samplerate = new Fl_Choice(228, 85, 135, 20, gettext("Samplerate"));
            choice_cfg_samplerate->tooltip(gettext("Select input sample rate"));
            choice_cfg_samplerate->down_box(FL_BORDER_BOX);
            choice_cfg_samplerate->callback((Fl_Callback*)cb_choice_cfg_samplerate);
            choice_cfg_samplerate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_samplerate
          { choice_cfg_left_channel = new Fl_Choice(248, 190, 50, 20, gettext("Left"));
            choice_cfg_left_channel->tooltip(gettext("Select left audio channel"));
            choice_cfg_left_channel->down_box(FL_BORDER_BOX);
            choice_cfg_left_channel->callback((Fl_Callback*)cb_choice_cfg_left_channel);
            choice_cfg_left_channel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_left_channel
          { choice_cfg_right_channel = new Fl_Choice(313, 190, 50, 20, gettext("Right"));
            choice_cfg_right_channel->tooltip(gettext("Select right audio channel"));
            choice_cfg_right_channel->down_box(FL_BORDER_BOX);
            choice_cfg_right_channel->callback((Fl_Callback*)cb_choice_cfg_right_channel);
            choice_cfg_right_channel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_right_channel
          { Fl_Group* o = new Fl_Group(58, 133, 162, 25, gettext("Remember Device by"));
            o->box(FL_ENGRAVED_FRAME);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { radio_cfg_ID = new Fl_Round_Button(67, 138, 40, 14, gettext("ID"));
              radio_cfg_ID->type(102);
              radio_cfg_ID->down_box(FL_ROUND_DOWN_BOX);
              radio_cfg_ID->callback((Fl_Callback*)cb_radio_cfg_ID);
            } // Fl_Round_Button* radio_cfg_ID
            { radio_cfg_name = new Fl_Round_Button(143, 138, 65, 15, gettext("Name"));
              radio_cfg_name->type(102);
              radio_cfg_name->down_box(FL_ROUND_DOWN_BOX);
              radio_cfg_name->callback((Fl_Callback*)cb_radio_cfg_name);
            } // Fl_Round_Button* radio_cfg_name
            o->end();
          } // Fl_Group* o
          { button_cfg_rescan_devices = new Fl_Button(228, 133, 135, 25, gettext("Update devices"));
            button_cfg_rescan_devices->tooltip(gettext("Rescan audio devices"));
            button_cfg_rescan_devices->box(FL_ENGRAVED_BOX);
            button_cfg_rescan_devices->callback((Fl_Callback*)cb_button_cfg_rescan_devices);
          } // Fl_Button* button_cfg_rescan_devices
          { choice_cfg_dev2 = new Fl_Choice(58, 256, 170, 20, gettext("Secondary Audio Device"));
            choice_cfg_dev2->tooltip(gettext("Select your secondary sound card device"));
            choice_cfg_dev2->down_box(FL_FLAT_BOX);
            choice_cfg_dev2->callback((Fl_Callback*)cb_choice_cfg_dev2);
            choice_cfg_dev2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_dev2
          { choice_cfg_left_channel2 = new Fl_Choice(248, 256, 50, 20, gettext("Left"));
            choice_cfg_left_channel2->tooltip(gettext("Select left audio channel"));
            choice_cfg_left_channel2->down_box(FL_BORDER_BOX);
            choice_cfg_left_channel2->callback((Fl_Callback*)cb_choice_cfg_left_channel2);
            choice_cfg_left_channel2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_left_channel2
          { choice_cfg_right_channel2 = new Fl_Choice(313, 256, 50, 20, gettext("Right"));
            choice_cfg_right_channel2->tooltip(gettext("Select right audio channel"));
            choice_cfg_right_channel2->down_box(FL_BORDER_BOX);
            choice_cfg_right_channel2->callback((Fl_Callback*)cb_choice_cfg_right_channel2);
            choice_cfg_right_channel2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_right_channel2
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 330, 326, 60, gettext("Streaming"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_codec = new Fl_Choice(58, 357, 125, 20, gettext("Codec"));
            choice_cfg_codec->tooltip(gettext("Select streaming codec"));
            choice_cfg_codec->box(FL_ENGRAVED_BOX);
            choice_cfg_codec->down_box(FL_BORDER_BOX);
            choice_cfg_codec->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            if (!menu_choice_cfg_codec_i18n_done) {
              int i=0;
              for ( ; i<5; i++)
                if (menu_choice_cfg_codec[i].label())
                  menu_choice_cfg_codec[i].label(gettext(menu_choice_cfg_codec[i].label()));
              menu_choice_cfg_codec_i18n_done = 1;
            }
            choice_cfg_codec->menu(menu_choice_cfg_codec);
          } // Fl_Choice* choice_cfg_codec
          { choice_cfg_bitrate = new Fl_Choice(200, 357, 115, 20, gettext("Bitrate"));
            choice_cfg_bitrate->tooltip(gettext("Select streaming bitrate"));
            choice_cfg_bitrate->box(FL_ENGRAVED_BOX);
            choice_cfg_bitrate->down_box(FL_BORDER_BOX);
            choice_cfg_bitrate->callback((Fl_Callback*)cb_choice_cfg_bitrate);
            choice_cfg_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_bitrate
          { Fl_Button* o = new Fl_Button(323, 355, 22, 22);
            o->box(FL_NO_BOX);
            o->image( image_settings() );
            o->callback((Fl_Callback*)cb_1);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 415, 326, 60, gettext("Recording"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_rec_codec = new Fl_Choice(58, 442, 125, 20, gettext("Codec"));
            choice_rec_codec->tooltip(gettext("Select recording codec"));
            choice_rec_codec->box(FL_ENGRAVED_BOX);
            choice_rec_codec->down_box(FL_BORDER_BOX);
            choice_rec_codec->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            if (!menu_choice_rec_codec_i18n_done) {
              int i=0;
              for ( ; i<6; i++)
                if (menu_choice_rec_codec[i].label())
                  menu_choice_rec_codec[i].label(gettext(menu_choice_rec_codec[i].label()));
              menu_choice_rec_codec_i18n_done = 1;
            }
            choice_rec_codec->menu(menu_choice_rec_codec);
          } // Fl_Choice* choice_rec_codec
          { choice_rec_bitrate = new Fl_Choice(200, 442, 115, 20, gettext("Bitrate"));
            choice_rec_bitrate->tooltip(gettext("Select recording bitrate"));
            choice_rec_bitrate->down_box(FL_BORDER_BOX);
            choice_rec_bitrate->callback((Fl_Callback*)cb_choice_rec_bitrate);
            choice_rec_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_rec_bitrate
          { Fl_Button* o = new Fl_Button(323, 440, 22, 22);
            o->box(FL_NO_BOX);
            o->image( image_settings() );
            o->callback((Fl_Callback*)cb_2);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { button_advanced = new Fl_Button(37, 345, 89, 25, gettext("Advanced..."));
          button_advanced->box(FL_ENGRAVED_BOX);
          button_advanced->callback((Fl_Callback*)cb_button_advanced);
          button_advanced->hide();
          button_advanced->deactivate();
        } // Fl_Button* button_advanced
        { input_cfg_buffer = new Fl_Value_Input(37, 405, 75, 20, gettext("Buffer (ms)"));
          input_cfg_buffer->maximum(0);
          input_cfg_buffer->value(50);
          input_cfg_buffer->callback((Fl_Callback*)cb_input_cfg_buffer);
          input_cfg_buffer->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          input_cfg_buffer->when(FL_WHEN_ENTER_KEY);
          input_cfg_buffer->hide();
          input_cfg_buffer->deactivate();
        } // Fl_Value_Input* input_cfg_buffer
        { choice_cfg_resample_mode = new Fl_Choice(177, 405, 125, 20, gettext("Resample Quality"));
          choice_cfg_resample_mode->down_box(FL_BORDER_BOX);
          choice_cfg_resample_mode->callback((Fl_Callback*)cb_choice_cfg_resample_mode);
          choice_cfg_resample_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          choice_cfg_resample_mode->hide();
          choice_cfg_resample_mode->deactivate();
          if (!menu_choice_cfg_resample_mode_i18n_done) {
            int i=0;
            for ( ; i<5; i++)
              if (menu_choice_cfg_resample_mode[i].label())
                menu_choice_cfg_resample_mode[i].label(gettext(menu_choice_cfg_resample_mode[i].label()));
            menu_choice_cfg_resample_mode_i18n_done = 1;
          }
          choice_cfg_resample_mode->menu(menu_choice_cfg_resample_mode);
        } // Fl_Choice* choice_cfg_resample_mode
        { Fl_Group* o = new Fl_Group(50, 500, 326, 50, gettext("Signal detection levels"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_cfg_present_level = new Fl_Value_Input(58, 524, 70, 19, gettext("Signal present"));
            input_cfg_present_level->minimum(-90);
            input_cfg_present_level->maximum(0);
            input_cfg_present_level->value(-50);
            input_cfg_present_level->callback((Fl_Callback*)cb_input_cfg_present_level);
            input_cfg_present_level->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Input* input_cfg_present_level
          { input_cfg_absent_level = new Fl_Value_Input(253, 524, 65, 19, gettext("Signal absent"));
            input_cfg_absent_level->minimum(-90);
            input_cfg_absent_level->maximum(0);
            input_cfg_absent_level->value(-50);
            input_cfg_absent_level->callback((Fl_Callback*)cb_input_cfg_absent_level);
            input_cfg_absent_level->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Input* input_cfg_absent_level
          { Fl_Box* o = new Fl_Box(128, 526, 25, 17, gettext("dB"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(318, 525, 25, 17, gettext("dB"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("Stream"));
        o->hide();
        { Fl_Group* o = new Fl_Group(50, 55, 329, 65, gettext("Update song name from file"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_cfg_song_file = new Fl_Input(55, 64, 283, 26);
            input_cfg_song_file->tooltip(gettext("Filename that holds the current song name"));
            input_cfg_song_file->callback((Fl_Callback*)cb_input_cfg_song_file);
            input_cfg_song_file->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
            this->input_cfg_song_file->maximum_size(500);
          } // Fl_Input* input_cfg_song_file
          { button_songfile_browse = new Fl_Button(343, 65, 25, 25);
            button_songfile_browse->tooltip(gettext("Select file that holds the current song name"));
            button_songfile_browse->box(FL_ENGRAVED_FRAME);
            button_songfile_browse->image( image_folder() );
            button_songfile_browse->callback((Fl_Callback*)cb_button_songfile_browse);
          } // Fl_Button* button_songfile_browse
          { check_song_update_active = new Fl_Check_Button(53, 91, 77, 25, gettext("Activate"));
            check_song_update_active->tooltip(gettext("Activate auto update song name from file"));
            check_song_update_active->down_box(FL_DOWN_BOX);
            check_song_update_active->callback((Fl_Callback*)cb_check_song_update_active);
          } // Fl_Check_Button* check_song_update_active
          { check_read_last_line = new Fl_Check_Button(133, 91, 215, 25, gettext("Read last line instead of first"));
            check_read_last_line->tooltip(gettext("Activate auto update song name from file"));
            check_read_last_line->down_box(FL_DOWN_BOX);
            check_read_last_line->callback((Fl_Callback*)cb_check_read_last_line);
          } // Fl_Check_Button* check_read_last_line
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 232, 329, 40, gettext("Update song name manually"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_cfg_song = new Fl_Input(55, 240, 283, 25);
            input_cfg_song->tooltip(gettext("Current song name"));
            input_cfg_song->callback((Fl_Callback*)cb_input_cfg_song);
            input_cfg_song->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            input_cfg_song->when(FL_WHEN_CHANGED);
            this->input_cfg_song->maximum_size(500);
          } // Fl_Input* input_cfg_song
          { button_cfg_song_go = new Fl_Button(343, 240, 25, 25, gettext("OK"));
            button_cfg_song_go->tooltip(gettext("Send current song name to the server"));
            button_cfg_song_go->box(FL_ENGRAVED_BOX);
            button_cfg_song_go->shortcut(0xff0d);
            button_cfg_song_go->labelsize(12);
            button_cfg_song_go->callback((Fl_Callback*)cb_button_cfg_song_go);
          } // Fl_Button* button_cfg_song_go
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 145, 329, 65, gettext("Update song name from application"));
          o->box(FL_ENGRAVED_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_cfg_use_app = new Fl_Check_Button(53, 175, 85, 33, gettext("Activate"));
            check_cfg_use_app->down_box(FL_DOWN_BOX);
            check_cfg_use_app->callback((Fl_Callback*)cb_check_cfg_use_app);
          } // Fl_Check_Button* check_cfg_use_app
          { choice_cfg_app = new Fl_Choice(55, 156, 203, 20);
            choice_cfg_app->tooltip(gettext("Changes the song through an running application"));
            choice_cfg_app->down_box(FL_BORDER_BOX);
            choice_cfg_app->callback((Fl_Callback*)cb_choice_cfg_app);
          } // Fl_Choice* choice_cfg_app
          { Fl_Group* o = new Fl_Group(268, 153, 105, 40);
            { radio_cfg_title_artist = new Fl_Round_Button(268, 153, 105, 20, gettext("Title - Artist"));
              radio_cfg_title_artist->type(102);
              radio_cfg_title_artist->down_box(FL_ROUND_DOWN_BOX);
              radio_cfg_title_artist->callback((Fl_Callback*)cb_radio_cfg_title_artist);
            } // Fl_Round_Button* radio_cfg_title_artist
            { radio_cfg_artist_title = new Fl_Round_Button(268, 178, 105, 15, gettext("Artist - Title"));
              radio_cfg_artist_title->type(102);
              radio_cfg_artist_title->down_box(FL_ROUND_DOWN_BOX);
              radio_cfg_artist_title->callback((Fl_Callback*)cb_radio_cfg_artist_title);
            } // Fl_Round_Button* radio_cfg_artist_title
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 472, 329, 155, gettext("Streaming"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_cfg_connect = new Fl_Check_Button(55, 533, 205, 18, gettext("Start streaming after launch"));
            check_cfg_connect->tooltip(gettext("Connect automatically to a server after launch"));
            check_cfg_connect->down_box(FL_DOWN_BOX);
            check_cfg_connect->callback((Fl_Callback*)cb_check_cfg_connect);
          } // Fl_Check_Button* check_cfg_connect
          { input_cfg_silence = new Fl_Value_Input(273, 507, 42, 19);
            input_cfg_silence->callback((Fl_Callback*)cb_input_cfg_silence);
          } // Fl_Value_Input* input_cfg_silence
          { input_cfg_signal = new Fl_Value_Input(272, 483, 42, 19);
            input_cfg_signal->callback((Fl_Callback*)cb_input_cfg_signal);
          } // Fl_Value_Input* input_cfg_signal
          { Fl_Box* o = new Fl_Box(313, 483, 62, 16, gettext("seconds"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(313, 507, 62, 16, gettext("seconds"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { check_cfg_force_reconnecting = new Fl_Check_Button(55, 556, 205, 18, gettext("Force reconnecting"));
            check_cfg_force_reconnecting->tooltip(gettext("If enabled butt keeps reconnecting regardless of the error message"));
            check_cfg_force_reconnecting->down_box(FL_DOWN_BOX);
            check_cfg_force_reconnecting->callback((Fl_Callback*)cb_check_cfg_force_reconnecting);
          } // Fl_Check_Button* check_cfg_force_reconnecting
          { input_cfg_reconnect_delay = new Fl_Value_Input(58, 601, 42, 19);
            input_cfg_reconnect_delay->callback((Fl_Callback*)cb_input_cfg_reconnect_delay);
          } // Fl_Value_Input* input_cfg_reconnect_delay
          { Fl_Box* o = new Fl_Box(55, 581, 190, 17, gettext("Reconnect delay:"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(104, 602, 62, 16, gettext("seconds"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { check_stream_signal = new Fl_Check_Button(55, 485, 205, 18, gettext("Start if signal is present for"));
            check_stream_signal->tooltip(gettext("Connect automatically to a server after launch"));
            check_stream_signal->down_box(FL_DOWN_BOX);
            check_stream_signal->callback((Fl_Callback*)cb_check_stream_signal);
          } // Fl_Check_Button* check_stream_signal
          { check_stream_silence = new Fl_Check_Button(55, 507, 205, 18, gettext("Stop if signal is absent for"));
            check_stream_silence->tooltip(gettext("Connect automatically to a server after launch"));
            check_stream_silence->down_box(FL_DOWN_BOX);
            check_stream_silence->callback((Fl_Callback*)cb_check_stream_silence);
          } // Fl_Check_Button* check_stream_silence
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 356, 329, 90, gettext("Extend song name"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_cfg_song_prefix = new Fl_Input(103, 372, 255, 24, gettext("Prefix:"));
            input_cfg_song_prefix->callback((Fl_Callback*)cb_input_cfg_song_prefix);
            input_cfg_song_prefix->when(FL_WHEN_CHANGED);
            this->input_cfg_song_prefix->maximum_size(500);
          } // Fl_Input* input_cfg_song_prefix
          { input_cfg_song_suffix = new Fl_Input(103, 407, 255, 24, gettext("Suffix:"));
            input_cfg_song_suffix->callback((Fl_Callback*)cb_input_cfg_song_suffix);
            input_cfg_song_suffix->when(FL_WHEN_CHANGED);
            this->input_cfg_song_suffix->maximum_size(500);
          } // Fl_Input* input_cfg_song_suffix
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 293, 329, 32, gettext("Update song name delay"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_song_delay = new Fl_Choice(55, 299, 153, 20);
            choice_cfg_song_delay->tooltip(gettext("Introduces a delay until the song name is actually updated"));
            choice_cfg_song_delay->down_box(FL_BORDER_BOX);
            choice_cfg_song_delay->callback((Fl_Callback*)cb_choice_cfg_song_delay);
            choice_cfg_song_delay->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Choice* choice_cfg_song_delay
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("Record"));
        o->hide();
        { input_rec_filename = new Fl_Input(50, 55, 326, 25, gettext("Record File Name:"));
          input_rec_filename->tooltip(gettext("Record file name"));
          input_rec_filename->callback((Fl_Callback*)cb_input_rec_filename);
          input_rec_filename->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          this->input_rec_filename->maximum_size(500);
        } // Fl_Input* input_rec_filename
        { input_rec_folder = new Fl_Input(50, 106, 298, 25, gettext("Record Directory:"));
          input_rec_folder->tooltip(gettext("Directory of recordings"));
          input_rec_folder->callback((Fl_Callback*)cb_input_rec_folder);
          input_rec_folder->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          this->input_rec_folder->maximum_size(500);
        } // Fl_Input* input_rec_folder
        { button_rec_browse = new Fl_Button(350, 106, 25, 25);
          button_rec_browse->tooltip(gettext("Select recording directory"));
          button_rec_browse->box(FL_ENGRAVED_BOX);
          button_rec_browse->image( image_folder() );
          button_rec_browse->callback((Fl_Callback*)cb_button_rec_browse);
        } // Fl_Button* button_rec_browse
        { Fl_Group* o = new Fl_Group(50, 164, 326, 57, gettext("Split file"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_rec_split_time = new Fl_Value_Input(97, 171, 40, 19, gettext("every"));
            input_rec_split_time->callback((Fl_Callback*)cb_input_rec_split_time);
          } // Fl_Value_Input* input_rec_split_time
          { text_rec_split_time = new Fl_Box(143, 171, 50, 16, gettext("minutes"));
          } // Fl_Box* text_rec_split_time
          { check_sync_to_full_hour = new Fl_Check_Button(55, 196, 124, 15, gettext("Sync to full hour"));
            check_sync_to_full_hour->tooltip(gettext("Sync to full hour"));
            check_sync_to_full_hour->down_box(FL_DOWN_BOX);
            check_sync_to_full_hour->callback((Fl_Callback*)cb_check_sync_to_full_hour);
          } // Fl_Check_Button* check_sync_to_full_hour
          { Fl_Button* o = new Fl_Button(288, 179, 80, 28, gettext("Split now"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Split);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 250, 326, 138, gettext("Recording"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_cfg_auto_start_rec = new Fl_Check_Button(55, 260, 265, 20, gettext("Start recording when connected"));
            check_cfg_auto_start_rec->tooltip(gettext("Start recording when connected"));
            check_cfg_auto_start_rec->down_box(FL_DOWN_BOX);
            check_cfg_auto_start_rec->callback((Fl_Callback*)cb_check_cfg_auto_start_rec);
          } // Fl_Check_Button* check_cfg_auto_start_rec
          { check_cfg_rec_after_launch = new Fl_Check_Button(55, 309, 265, 20, gettext("Start recording after launch"));
            check_cfg_rec_after_launch->tooltip(gettext("Start recording after launch"));
            check_cfg_rec_after_launch->down_box(FL_DOWN_BOX);
            check_cfg_rec_after_launch->callback((Fl_Callback*)cb_check_cfg_rec_after_launch);
          } // Fl_Check_Button* check_cfg_rec_after_launch
          { input_rec_signal = new Fl_Value_Input(266, 332, 42, 19);
            input_rec_signal->callback((Fl_Callback*)cb_input_rec_signal);
          } // Fl_Value_Input* input_rec_signal
          { Fl_Box* o = new Fl_Box(308, 333, 64, 16, gettext("seconds"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { check_cfg_auto_stop_rec = new Fl_Check_Button(55, 284, 265, 20, gettext("Stop recording when disconnected"));
            check_cfg_auto_stop_rec->tooltip(gettext("Start recording when disconnected"));
            check_cfg_auto_stop_rec->down_box(FL_DOWN_BOX);
            check_cfg_auto_stop_rec->callback((Fl_Callback*)cb_check_cfg_auto_stop_rec);
          } // Fl_Check_Button* check_cfg_auto_stop_rec
          { input_rec_silence = new Fl_Value_Input(266, 356, 42, 19);
            input_rec_silence->callback((Fl_Callback*)cb_input_rec_silence);
          } // Fl_Value_Input* input_rec_silence
          { Fl_Box* o = new Fl_Box(308, 356, 62, 16, gettext("seconds"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { check_rec_signal = new Fl_Check_Button(55, 332, 205, 18, gettext("Start if signal is present for"));
            check_rec_signal->tooltip(gettext("Connect automatically to a server after launch"));
            check_rec_signal->down_box(FL_DOWN_BOX);
            check_rec_signal->callback((Fl_Callback*)cb_check_rec_signal);
          } // Fl_Check_Button* check_rec_signal
          { check_rec_silence = new Fl_Check_Button(55, 355, 205, 18, gettext("Stop if signal is absent for"));
            check_rec_silence->tooltip(gettext("Connect automatically to a server after launch"));
            check_rec_silence->down_box(FL_DOWN_BOX);
            check_rec_silence->callback((Fl_Callback*)cb_check_rec_silence);
          } // Fl_Check_Button* check_rec_silence
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("DSP"));
        o->hide();
        { Fl_Group* o = new Fl_Group(30, 55, 371, 225, gettext("Equalizer"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_stream_eq = new Fl_Check_Button(35, 57, 79, 25, gettext("Stream"));
            check_stream_eq->down_box(FL_DOWN_BOX);
            check_stream_eq->callback((Fl_Callback*)cb_check_stream_eq);
          } // Fl_Check_Button* check_stream_eq
          { equalizerSlider1 = new Fl_My_Value_Slider(53, 105, 15, 150, gettext("32Hz"));
            equalizerSlider1->type(4);
            equalizerSlider1->box(FL_NO_BOX);
            equalizerSlider1->color(FL_BACKGROUND_COLOR);
            equalizerSlider1->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider1->labeltype(FL_NORMAL_LABEL);
            equalizerSlider1->labelfont(0);
            equalizerSlider1->labelsize(11);
            equalizerSlider1->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider1->minimum(15);
            equalizerSlider1->maximum(-15);
            equalizerSlider1->step(0.1);
            equalizerSlider1->slider_size(0.151515);
            equalizerSlider1->callback((Fl_Callback*)cb_equalizerSlider1);
            equalizerSlider1->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider1->when(FL_WHEN_CHANGED);
            equalizerSlider1->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider1
          { equalizerSlider2 = new Fl_My_Value_Slider(88, 105, 15, 150, gettext("64Hz"));
            equalizerSlider2->type(4);
            equalizerSlider2->box(FL_NO_BOX);
            equalizerSlider2->color(FL_BACKGROUND_COLOR);
            equalizerSlider2->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider2->labeltype(FL_NORMAL_LABEL);
            equalizerSlider2->labelfont(0);
            equalizerSlider2->labelsize(11);
            equalizerSlider2->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider2->minimum(15);
            equalizerSlider2->maximum(-15);
            equalizerSlider2->step(0.1);
            equalizerSlider2->slider_size(0.151515);
            equalizerSlider2->callback((Fl_Callback*)cb_equalizerSlider2);
            equalizerSlider2->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider2->when(FL_WHEN_CHANGED);
            equalizerSlider2->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider2
          { equalizerSlider3 = new Fl_My_Value_Slider(123, 105, 15, 150, gettext("125Hz"));
            equalizerSlider3->type(4);
            equalizerSlider3->box(FL_NO_BOX);
            equalizerSlider3->color(FL_BACKGROUND_COLOR);
            equalizerSlider3->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider3->labeltype(FL_NORMAL_LABEL);
            equalizerSlider3->labelfont(0);
            equalizerSlider3->labelsize(11);
            equalizerSlider3->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider3->minimum(15);
            equalizerSlider3->maximum(-15);
            equalizerSlider3->step(0.1);
            equalizerSlider3->slider_size(0.151515);
            equalizerSlider3->callback((Fl_Callback*)cb_equalizerSlider3);
            equalizerSlider3->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider3->when(FL_WHEN_CHANGED);
            equalizerSlider3->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider3
          { equalizerSlider4 = new Fl_My_Value_Slider(158, 105, 15, 150, gettext("250Hz"));
            equalizerSlider4->type(4);
            equalizerSlider4->box(FL_NO_BOX);
            equalizerSlider4->color(FL_BACKGROUND_COLOR);
            equalizerSlider4->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider4->labeltype(FL_NORMAL_LABEL);
            equalizerSlider4->labelfont(0);
            equalizerSlider4->labelsize(11);
            equalizerSlider4->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider4->minimum(15);
            equalizerSlider4->maximum(-15);
            equalizerSlider4->step(0.1);
            equalizerSlider4->slider_size(0.151515);
            equalizerSlider4->callback((Fl_Callback*)cb_equalizerSlider4);
            equalizerSlider4->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider4->when(FL_WHEN_CHANGED);
            equalizerSlider4->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider4
          { equalizerSlider5 = new Fl_My_Value_Slider(193, 105, 15, 150, gettext("500Hz"));
            equalizerSlider5->type(4);
            equalizerSlider5->box(FL_NO_BOX);
            equalizerSlider5->color(FL_BACKGROUND_COLOR);
            equalizerSlider5->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider5->labeltype(FL_NORMAL_LABEL);
            equalizerSlider5->labelfont(0);
            equalizerSlider5->labelsize(11);
            equalizerSlider5->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider5->minimum(15);
            equalizerSlider5->maximum(-15);
            equalizerSlider5->step(0.1);
            equalizerSlider5->slider_size(0.151515);
            equalizerSlider5->callback((Fl_Callback*)cb_equalizerSlider5);
            equalizerSlider5->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider5->when(FL_WHEN_CHANGED);
            equalizerSlider5->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider5
          { equalizerGain1 = new Fl_Text_Display(31, 105, 51, 10, gettext("+0.0"));
            equalizerGain1->box(FL_NO_BOX);
            equalizerGain1->labelsize(11);
          } // Fl_Text_Display* equalizerGain1
          { equalizerGain2 = new Fl_Text_Display(74, 105, 35, 10, gettext("+0.0"));
            equalizerGain2->box(FL_NO_BOX);
            equalizerGain2->labelsize(11);
          } // Fl_Text_Display* equalizerGain2
          { equalizerGain3 = new Fl_Text_Display(109, 105, 35, 10, gettext("+0.0"));
            equalizerGain3->box(FL_NO_BOX);
            equalizerGain3->labelsize(11);
          } // Fl_Text_Display* equalizerGain3
          { equalizerGain4 = new Fl_Text_Display(144, 105, 35, 10, gettext("+0.0"));
            equalizerGain4->box(FL_NO_BOX);
            equalizerGain4->labelsize(11);
          } // Fl_Text_Display* equalizerGain4
          { equalizerGain5 = new Fl_Text_Display(179, 105, 35, 10, gettext("+0.0"));
            equalizerGain5->box(FL_NO_BOX);
            equalizerGain5->labelsize(11);
          } // Fl_Text_Display* equalizerGain5
          { equalizerSlider6 = new Fl_My_Value_Slider(228, 105, 15, 150, gettext("1kHz"));
            equalizerSlider6->type(4);
            equalizerSlider6->box(FL_NO_BOX);
            equalizerSlider6->color(FL_BACKGROUND_COLOR);
            equalizerSlider6->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider6->labeltype(FL_NORMAL_LABEL);
            equalizerSlider6->labelfont(0);
            equalizerSlider6->labelsize(11);
            equalizerSlider6->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider6->minimum(15);
            equalizerSlider6->maximum(-15);
            equalizerSlider6->step(0.1);
            equalizerSlider6->slider_size(0.151515);
            equalizerSlider6->callback((Fl_Callback*)cb_equalizerSlider6);
            equalizerSlider6->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider6->when(FL_WHEN_CHANGED);
            equalizerSlider6->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider6
          { equalizerSlider7 = new Fl_My_Value_Slider(263, 105, 15, 150, gettext("2kHz"));
            equalizerSlider7->type(4);
            equalizerSlider7->box(FL_NO_BOX);
            equalizerSlider7->color(FL_BACKGROUND_COLOR);
            equalizerSlider7->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider7->labeltype(FL_NORMAL_LABEL);
            equalizerSlider7->labelfont(0);
            equalizerSlider7->labelsize(11);
            equalizerSlider7->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider7->minimum(15);
            equalizerSlider7->maximum(-15);
            equalizerSlider7->step(0.1);
            equalizerSlider7->slider_size(0.151515);
            equalizerSlider7->callback((Fl_Callback*)cb_equalizerSlider7);
            equalizerSlider7->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider7->when(FL_WHEN_CHANGED);
            equalizerSlider7->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider7
          { equalizerSlider8 = new Fl_My_Value_Slider(298, 105, 15, 150, gettext("4kHz"));
            equalizerSlider8->type(4);
            equalizerSlider8->box(FL_NO_BOX);
            equalizerSlider8->color(FL_BACKGROUND_COLOR);
            equalizerSlider8->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider8->labeltype(FL_NORMAL_LABEL);
            equalizerSlider8->labelfont(0);
            equalizerSlider8->labelsize(11);
            equalizerSlider8->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider8->minimum(15);
            equalizerSlider8->maximum(-15);
            equalizerSlider8->step(0.1);
            equalizerSlider8->slider_size(0.151515);
            equalizerSlider8->callback((Fl_Callback*)cb_equalizerSlider8);
            equalizerSlider8->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider8->when(FL_WHEN_CHANGED);
            equalizerSlider8->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider8
          { equalizerSlider9 = new Fl_My_Value_Slider(333, 105, 15, 150, gettext("8kHz"));
            equalizerSlider9->type(4);
            equalizerSlider9->box(FL_NO_BOX);
            equalizerSlider9->color(FL_BACKGROUND_COLOR);
            equalizerSlider9->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider9->labeltype(FL_NORMAL_LABEL);
            equalizerSlider9->labelfont(0);
            equalizerSlider9->labelsize(11);
            equalizerSlider9->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider9->minimum(15);
            equalizerSlider9->maximum(-15);
            equalizerSlider9->step(0.1);
            equalizerSlider9->slider_size(0.151515);
            equalizerSlider9->callback((Fl_Callback*)cb_equalizerSlider9);
            equalizerSlider9->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider9->when(FL_WHEN_CHANGED);
            equalizerSlider9->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider9
          { equalizerSlider10 = new Fl_My_Value_Slider(368, 105, 15, 150, gettext("16kHz"));
            equalizerSlider10->type(4);
            equalizerSlider10->box(FL_NO_BOX);
            equalizerSlider10->color(FL_BACKGROUND_COLOR);
            equalizerSlider10->selection_color(FL_BACKGROUND_COLOR);
            equalizerSlider10->labeltype(FL_NORMAL_LABEL);
            equalizerSlider10->labelfont(0);
            equalizerSlider10->labelsize(11);
            equalizerSlider10->labelcolor(FL_FOREGROUND_COLOR);
            equalizerSlider10->minimum(15);
            equalizerSlider10->maximum(-15);
            equalizerSlider10->step(0.1);
            equalizerSlider10->slider_size(0.151515);
            equalizerSlider10->callback((Fl_Callback*)cb_equalizerSlider10);
            equalizerSlider10->align(Fl_Align(FL_ALIGN_BOTTOM));
            equalizerSlider10->when(FL_WHEN_CHANGED);
            equalizerSlider10->default_value = 0.0;
          } // Fl_My_Value_Slider* equalizerSlider10
          { equalizerGain6 = new Fl_Text_Display(214, 105, 35, 10, gettext("+0.0"));
            equalizerGain6->box(FL_NO_BOX);
            equalizerGain6->labelsize(11);
          } // Fl_Text_Display* equalizerGain6
          { equalizerGain7 = new Fl_Text_Display(249, 105, 35, 10, gettext("+0.0"));
            equalizerGain7->box(FL_NO_BOX);
            equalizerGain7->labelsize(11);
          } // Fl_Text_Display* equalizerGain7
          { equalizerGain8 = new Fl_Text_Display(284, 105, 35, 10, gettext("+0.0"));
            equalizerGain8->box(FL_NO_BOX);
            equalizerGain8->labelsize(11);
          } // Fl_Text_Display* equalizerGain8
          { equalizerGain9 = new Fl_Text_Display(319, 105, 35, 10, gettext("+0.0"));
            equalizerGain9->box(FL_NO_BOX);
            equalizerGain9->labelsize(11);
          } // Fl_Text_Display* equalizerGain9
          { equalizerGain10 = new Fl_Text_Display(354, 105, 35, 10, gettext("+0.0"));
            equalizerGain10->box(FL_NO_BOX);
            equalizerGain10->labelsize(11);
          } // Fl_Text_Display* equalizerGain10
          { choice_eq_preset = new Fl_Choice(250, 62, 140, 18);
            choice_eq_preset->tooltip(gettext("Equalizer Preset"));
            choice_eq_preset->down_box(FL_BORDER_BOX);
            choice_eq_preset->callback((Fl_Callback*)cb_choice_eq_preset);
            if (!menu_choice_eq_preset_i18n_done) {
              int i=0;
              for ( ; i<20; i++)
                if (menu_choice_eq_preset[i].label())
                  menu_choice_eq_preset[i].label(gettext(menu_choice_eq_preset[i].label()));
              menu_choice_eq_preset_i18n_done = 1;
            }
            choice_eq_preset->menu(menu_choice_eq_preset);
          } // Fl_Choice* choice_eq_preset
          { check_rec_eq = new Fl_Check_Button(115, 57, 60, 25, gettext("Rec"));
            check_rec_eq->down_box(FL_DOWN_BOX);
            check_rec_eq->callback((Fl_Callback*)cb_check_rec_eq);
          } // Fl_Check_Button* check_rec_eq
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(30, 323, 371, 225, gettext("Dynamic Range Compressor"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_stream_drc = new Fl_Check_Button(35, 326, 79, 25, gettext("Stream"));
            check_stream_drc->down_box(FL_DOWN_BOX);
            check_stream_drc->callback((Fl_Callback*)cb_check_stream_drc);
          } // Fl_Check_Button* check_stream_drc
          { thresholdSlider = new Fl_My_Value_Slider(68, 378, 15, 150, gettext("Threshold"));
            thresholdSlider->type(4);
            thresholdSlider->box(FL_NO_BOX);
            thresholdSlider->color(FL_BACKGROUND_COLOR);
            thresholdSlider->selection_color(FL_BACKGROUND_COLOR);
            thresholdSlider->labeltype(FL_NORMAL_LABEL);
            thresholdSlider->labelfont(0);
            thresholdSlider->labelsize(11);
            thresholdSlider->labelcolor(FL_FOREGROUND_COLOR);
            thresholdSlider->maximum(-60);
            thresholdSlider->step(0.1);
            thresholdSlider->value(-20);
            thresholdSlider->slider_size(0.151515);
            thresholdSlider->callback((Fl_Callback*)cb_thresholdSlider);
            thresholdSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
            thresholdSlider->when(FL_WHEN_CHANGED);
            thresholdSlider->default_value = -20.0;
          } // Fl_My_Value_Slider* thresholdSlider
          { ratioSlider = new Fl_My_Value_Slider(138, 378, 15, 150, gettext("Ratio"));
            ratioSlider->type(4);
            ratioSlider->box(FL_NO_BOX);
            ratioSlider->color(FL_BACKGROUND_COLOR);
            ratioSlider->selection_color(FL_BACKGROUND_COLOR);
            ratioSlider->labeltype(FL_NORMAL_LABEL);
            ratioSlider->labelfont(0);
            ratioSlider->labelsize(11);
            ratioSlider->labelcolor(FL_FOREGROUND_COLOR);
            ratioSlider->minimum(10);
            ratioSlider->step(0.1);
            ratioSlider->value(5);
            ratioSlider->slider_size(0.151515);
            ratioSlider->callback((Fl_Callback*)cb_ratioSlider);
            ratioSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
            ratioSlider->when(FL_WHEN_CHANGED);
            ratioSlider->default_value = 5.0;
          } // Fl_My_Value_Slider* ratioSlider
          { attackSlider = new Fl_My_Value_Slider(208, 378, 15, 150, gettext("Attack"));
            attackSlider->type(4);
            attackSlider->box(FL_NO_BOX);
            attackSlider->color(FL_BACKGROUND_COLOR);
            attackSlider->selection_color(FL_BACKGROUND_COLOR);
            attackSlider->labeltype(FL_NORMAL_LABEL);
            attackSlider->labelfont(0);
            attackSlider->labelsize(11);
            attackSlider->labelcolor(FL_FOREGROUND_COLOR);
            attackSlider->minimum(1);
            attackSlider->maximum(0);
            attackSlider->step(0.001);
            attackSlider->value(0.01);
            attackSlider->slider_size(0.151515);
            attackSlider->callback((Fl_Callback*)cb_attackSlider);
            attackSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
            attackSlider->when(FL_WHEN_CHANGED);
            attackSlider->default_value = 0.01;
          } // Fl_My_Value_Slider* attackSlider
          { releaseSlider = new Fl_My_Value_Slider(278, 378, 14, 150, gettext("Release"));
            releaseSlider->type(4);
            releaseSlider->box(FL_NO_BOX);
            releaseSlider->color(FL_BACKGROUND_COLOR);
            releaseSlider->selection_color(FL_BACKGROUND_COLOR);
            releaseSlider->labeltype(FL_NORMAL_LABEL);
            releaseSlider->labelfont(0);
            releaseSlider->labelsize(11);
            releaseSlider->labelcolor(FL_FOREGROUND_COLOR);
            releaseSlider->minimum(10);
            releaseSlider->maximum(0);
            releaseSlider->step(0.01);
            releaseSlider->value(1);
            releaseSlider->slider_size(0.151515);
            releaseSlider->callback((Fl_Callback*)cb_releaseSlider);
            releaseSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
            releaseSlider->when(FL_WHEN_CHANGED);
            releaseSlider->default_value = 1.0;
          } // Fl_My_Value_Slider* releaseSlider
          { threshold = new Fl_Text_Display(54, 378, 35, 10, gettext("+0.0"));
            threshold->box(FL_NO_BOX);
            threshold->labelsize(11);
          } // Fl_Text_Display* threshold
          { ratio = new Fl_Text_Display(124, 378, 35, 10, gettext("+0.0"));
            ratio->box(FL_NO_BOX);
            ratio->labelsize(11);
          } // Fl_Text_Display* ratio
          { attack = new Fl_Text_Display(197, 378, 35, 10, gettext("+0.00"));
            attack->box(FL_NO_BOX);
            attack->labelsize(11);
          } // Fl_Text_Display* attack
          { release = new Fl_Text_Display(267, 378, 35, 10, gettext("+0.00"));
            release->box(FL_NO_BOX);
            release->labelsize(11);
          } // Fl_Text_Display* release
          { makeupSlider = new Fl_My_Value_Slider(348, 378, 15, 150, gettext("MakeupGain"));
            makeupSlider->type(4);
            makeupSlider->box(FL_NO_BOX);
            makeupSlider->color(FL_BACKGROUND_COLOR);
            makeupSlider->selection_color(FL_BACKGROUND_COLOR);
            makeupSlider->labeltype(FL_NORMAL_LABEL);
            makeupSlider->labelfont(0);
            makeupSlider->labelsize(11);
            makeupSlider->labelcolor(FL_FOREGROUND_COLOR);
            makeupSlider->minimum(30);
            makeupSlider->maximum(0);
            makeupSlider->step(0.01);
            makeupSlider->value(1);
            makeupSlider->slider_size(0.151515);
            makeupSlider->callback((Fl_Callback*)cb_makeupSlider);
            makeupSlider->align(Fl_Align(FL_ALIGN_BOTTOM));
            makeupSlider->when(FL_WHEN_CHANGED);
          } // Fl_My_Value_Slider* makeupSlider
          { makeup = new Fl_Text_Display(334, 378, 35, 10, gettext("+0.0"));
            makeup->box(FL_NO_BOX);
            makeup->labelsize(11);
          } // Fl_Text_Display* makeup
          { check_aggressive_mode = new Fl_Check_Button(259, 328, 130, 20, gettext("Aggressive Mode"));
            check_aggressive_mode->down_box(FL_DOWN_BOX);
            check_aggressive_mode->callback((Fl_Callback*)cb_check_aggressive_mode);
          } // Fl_Check_Button* check_aggressive_mode
          { check_rec_drc = new Fl_Check_Button(110, 325, 60, 25, gettext("Rec"));
            check_rec_drc->down_box(FL_DOWN_BOX);
            check_rec_drc->callback((Fl_Callback*)cb_check_rec_drc);
          } // Fl_Check_Button* check_rec_drc
          { LED_comp_threshold = new LED(36, 529, 10, 10);
            LED_comp_threshold->box(FL_BORDER_BOX);
            LED_comp_threshold->color(FL_BACKGROUND_COLOR);
            LED_comp_threshold->selection_color(FL_BACKGROUND_COLOR);
            LED_comp_threshold->labeltype(FL_NORMAL_LABEL);
            LED_comp_threshold->labelfont(0);
            LED_comp_threshold->labelsize(14);
            LED_comp_threshold->labelcolor(FL_FOREGROUND_COLOR);
            LED_comp_threshold->align(Fl_Align(FL_ALIGN_TOP));
            LED_comp_threshold->when(FL_WHEN_RELEASE);
            LED_comp_threshold->end();
          } // LED* LED_comp_threshold
          o->end();
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(320, 33, 80, 19, gettext("Reset"));
          o->box(FL_ENGRAVED_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Reset);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(320, 301, 80, 19, gettext("Reset"));
          o->box(FL_ENGRAVED_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Reset1);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 20, 434, 620, gettext("MIDI"));
        o->hide();
        { choice_midi_dev = new Fl_Choice(51, 65, 330, 20, gettext("MIDI Device"));
          choice_midi_dev->tooltip(gettext("Select your MIDI device"));
          choice_midi_dev->down_box(FL_FLAT_BOX);
          choice_midi_dev->callback((Fl_Callback*)cb_choice_midi_dev);
          choice_midi_dev->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Choice* choice_midi_dev
        { button_midi_rescan_devices = new Fl_Button(51, 90, 120, 25, gettext("Rescan"));
          button_midi_rescan_devices->tooltip(gettext("Rescan MIDI devices"));
          button_midi_rescan_devices->box(FL_ENGRAVED_BOX);
          button_midi_rescan_devices->callback((Fl_Callback*)cb_button_midi_rescan_devices);
        } // Fl_Button* button_midi_rescan_devices
        { LED_midi_command = new LED(336, 95, 10, 10, gettext("MIDI"));
          LED_midi_command->tooltip(gettext("MIDI signal indicator"));
          LED_midi_command->box(FL_BORDER_BOX);
          LED_midi_command->color(FL_BACKGROUND_COLOR);
          LED_midi_command->selection_color(FL_BACKGROUND_COLOR);
          LED_midi_command->labeltype(FL_NORMAL_LABEL);
          LED_midi_command->labelfont(0);
          LED_midi_command->labelsize(14);
          LED_midi_command->labelcolor(FL_FOREGROUND_COLOR);
          LED_midi_command->align(Fl_Align(FL_ALIGN_RIGHT));
          LED_midi_command->when(FL_WHEN_RELEASE);
          LED_midi_command->end();
        } // LED* LED_midi_command
        { browser_midi_command = new Fl_Browser(51, 165, 330, 190, gettext("MIDI Commands"));
          browser_midi_command->type(2);
          browser_midi_command->callback((Fl_Callback*)cb_browser_midi_command);
          browser_midi_command->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Browser* browser_midi_command
        { check_midi_command_enable = new Fl_Check_Button(51, 364, 145, 33, gettext("Enable"));
          check_midi_command_enable->tooltip(gettext("Enable/Disable the selected MIDI command"));
          check_midi_command_enable->down_box(FL_DOWN_BOX);
          check_midi_command_enable->callback((Fl_Callback*)cb_check_midi_command_enable);
        } // Fl_Check_Button* check_midi_command_enable
        { group_midi_command_settings = new Fl_Group(51, 392, 330, 141);
          group_midi_command_settings->box(FL_ENGRAVED_FRAME);
          { choice_midi_channel = new Fl_Choice(61, 419, 80, 25, gettext("Channel"));
            choice_midi_channel->tooltip(gettext("Select MIDI channel"));
            choice_midi_channel->box(FL_ENGRAVED_BOX);
            choice_midi_channel->down_box(FL_BORDER_BOX);
            choice_midi_channel->callback((Fl_Callback*)cb_choice_midi_channel);
            choice_midi_channel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            if (!menu_choice_midi_channel_i18n_done) {
              int i=0;
              for ( ; i<17; i++)
                if (menu_choice_midi_channel[i].label())
                  menu_choice_midi_channel[i].label(gettext(menu_choice_midi_channel[i].label()));
              menu_choice_midi_channel_i18n_done = 1;
            }
            choice_midi_channel->menu(menu_choice_midi_channel);
          } // Fl_Choice* choice_midi_channel
          { input_midi_msg_num = new Fl_Value_Input(156, 418, 45, 25, gettext("CC"));
            input_midi_msg_num->tooltip(gettext("Select CC number"));
            input_midi_msg_num->maximum(127);
            input_midi_msg_num->callback((Fl_Callback*)cb_input_midi_msg_num);
            input_midi_msg_num->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Input* input_midi_msg_num
          { button_midi_learn = new Fl_Button(215, 417, 151, 25, gettext("Learn"));
            button_midi_learn->tooltip(gettext("Activate to auto detect the channel and CC number"));
            button_midi_learn->type(1);
            button_midi_learn->box(FL_ENGRAVED_BOX);
            button_midi_learn->callback((Fl_Callback*)cb_button_midi_learn);
          } // Fl_Button* button_midi_learn
          { choice_midi_cc_mode = new Fl_Choice(61, 470, 143, 25, gettext("CC Mode"));
            choice_midi_cc_mode->tooltip(gettext("Select CC mode"));
            choice_midi_cc_mode->box(FL_ENGRAVED_BOX);
            choice_midi_cc_mode->down_box(FL_BORDER_BOX);
            choice_midi_cc_mode->callback((Fl_Callback*)cb_choice_midi_cc_mode);
            choice_midi_cc_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            if (!menu_choice_midi_cc_mode_i18n_done) {
              int i=0;
              for ( ; i<4; i++)
                if (menu_choice_midi_cc_mode[i].label())
                  menu_choice_midi_cc_mode[i].label(gettext(menu_choice_midi_cc_mode[i].label()));
              menu_choice_midi_cc_mode_i18n_done = 1;
            }
            choice_midi_cc_mode->menu(menu_choice_midi_cc_mode);
          } // Fl_Choice* choice_midi_cc_mode
          { check_midi_soft_takeover = new Fl_Check_Button(60, 494, 145, 33, gettext("Soft takeover"));
            check_midi_soft_takeover->tooltip(gettext("Prevents jumps when controlling a slider in absolute mode"));
            check_midi_soft_takeover->down_box(FL_DOWN_BOX);
            check_midi_soft_takeover->callback((Fl_Callback*)cb_check_midi_soft_takeover);
          } // Fl_Check_Button* check_midi_soft_takeover
          group_midi_command_settings->end();
        } // Fl_Group* group_midi_command_settings
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("TLS"));
        o->hide();
        { Fl_Group* o = new Fl_Group(50, 55, 326, 184, gettext("SSL/TLS"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_tls_cert_file = new Fl_Input(58, 149, 275, 25, gettext("CA Certificate File:"));
            input_tls_cert_file->tooltip(gettext("Certificate file"));
            input_tls_cert_file->callback((Fl_Callback*)cb_input_tls_cert_file);
            input_tls_cert_file->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            this->input_tls_cert_file->maximum_size(500);
          } // Fl_Input* input_tls_cert_file
          { input_tls_cert_dir = new Fl_Input(58, 200, 275, 25, gettext("CA Certificate Directory:"));
            input_tls_cert_dir->tooltip(gettext("Certificate directory"));
            input_tls_cert_dir->callback((Fl_Callback*)cb_input_tls_cert_dir);
            input_tls_cert_dir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            this->input_tls_cert_dir->maximum_size(500);
          } // Fl_Input* input_tls_cert_dir
          { button_tls_browse_dir = new Fl_Button(338, 200, 25, 25);
            button_tls_browse_dir->tooltip(gettext("Select certificate directory"));
            button_tls_browse_dir->box(FL_ENGRAVED_BOX);
            button_tls_browse_dir->image( image_folder() );
            button_tls_browse_dir->callback((Fl_Callback*)cb_button_tls_browse_dir);
          } // Fl_Button* button_tls_browse_dir
          { button_tls_browse_file = new Fl_Button(338, 149, 25, 25);
            button_tls_browse_file->tooltip(gettext("Select certificate file"));
            button_tls_browse_file->box(FL_ENGRAVED_BOX);
            button_tls_browse_file->image( image_folder() );
            button_tls_browse_file->callback((Fl_Callback*)cb_button_tls_browse_file);
          } // Fl_Button* button_tls_browse_file
          { Fl_Box* o = new Fl_Box(56, 67, 272, 60, gettext("If your server uses a certificate from\nLet\'s Encrypt or another well known\
\nCA, you can leave these fields blank."));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("GUI"));
        o->hide();
        { Fl_Group* o = new Fl_Group(45, 138, 343, 42, gettext("Display Color"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { button_gui_text_color = new Fl_Button(58, 148, 25, 25, gettext("Text color"));
            button_gui_text_color->tooltip(gettext("Select text color"));
            button_gui_text_color->box(FL_SHADOW_BOX);
            button_gui_text_color->color(FL_BACKGROUND2_COLOR);
            button_gui_text_color->callback((Fl_Callback*)cb_button_gui_text_color);
            button_gui_text_color->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Button* button_gui_text_color
          { button_gui_bg_color = new Fl_Button(185, 145, 25, 25, gettext("Background color"));
            button_gui_bg_color->tooltip(gettext("Select background color"));
            button_gui_bg_color->box(FL_SHADOW_BOX);
            button_gui_bg_color->color(FL_SELECTION_COLOR);
            button_gui_bg_color->callback((Fl_Callback*)cb_button_gui_bg_color);
            button_gui_bg_color->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Button* button_gui_bg_color
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 300, 345, 275, gettext("Misc"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { check_gui_attach = new Fl_Check_Button(56, 310, 300, 20, gettext("Attach settings window to main window"));
            check_gui_attach->tooltip(gettext("Attach this window to the butt window"));
            check_gui_attach->down_box(FL_DOWN_BOX);
            check_gui_attach->callback((Fl_Callback*)cb_check_gui_attach);
          } // Fl_Check_Button* check_gui_attach
          { check_gui_ontop = new Fl_Check_Button(56, 335, 175, 20, gettext("Stay always on top"));
            check_gui_ontop->tooltip(gettext("Stay always on top"));
            check_gui_ontop->down_box(FL_DOWN_BOX);
            check_gui_ontop->callback((Fl_Callback*)cb_check_gui_ontop);
          } // Fl_Check_Button* check_gui_ontop
          { check_gui_lcd_auto = new Fl_Check_Button(56, 410, 295, 20, gettext("Change display mode every 5 seconds"));
            check_gui_lcd_auto->tooltip(gettext("Change display mode every 5 seconds"));
            check_gui_lcd_auto->down_box(FL_DOWN_BOX);
            check_gui_lcd_auto->callback((Fl_Callback*)cb_check_gui_lcd_auto);
          } // Fl_Check_Button* check_gui_lcd_auto
          { check_gui_hide_log_window = new Fl_Check_Button(56, 385, 220, 20, gettext("Hide log window after start up"));
            check_gui_hide_log_window->tooltip(gettext("Hide log window after start up"));
            check_gui_hide_log_window->down_box(FL_DOWN_BOX);
            check_gui_hide_log_window->callback((Fl_Callback*)cb_check_gui_hide_log_window);
          } // Fl_Check_Button* check_gui_hide_log_window
          { check_gui_remember_pos = new Fl_Check_Button(56, 360, 260, 20, gettext("Remember main window position"));
            check_gui_remember_pos->tooltip(gettext("Remember main window position"));
            check_gui_remember_pos->down_box(FL_DOWN_BOX);
            check_gui_remember_pos->callback((Fl_Callback*)cb_check_gui_remember_pos);
          } // Fl_Check_Button* check_gui_remember_pos
          { check_gui_start_minimized = new Fl_Check_Button(56, 435, 149, 20, gettext("Start minimized"));
            check_gui_start_minimized->tooltip(gettext("Minimize butt at startup"));
            check_gui_start_minimized->down_box(FL_DOWN_BOX);
            check_gui_start_minimized->callback((Fl_Callback*)cb_check_gui_start_minimized);
          } // Fl_Check_Button* check_gui_start_minimized
          { check_gui_disable_gain_slider = new Fl_Check_Button(56, 460, 194, 20, gettext("Disable gain control"));
            check_gui_disable_gain_slider->down_box(FL_DOWN_BOX);
            check_gui_disable_gain_slider->callback((Fl_Callback*)cb_check_gui_disable_gain_slider);
          } // Fl_Check_Button* check_gui_disable_gain_slider
          { check_gui_show_listeners = new Fl_Check_Button(56, 485, 194, 20, gettext("Show listeners"));
            check_gui_show_listeners->tooltip(gettext("Show current listeners in the display (not always available)"));
            check_gui_show_listeners->down_box(FL_DOWN_BOX);
            check_gui_show_listeners->callback((Fl_Callback*)cb_check_gui_show_listeners);
          } // Fl_Check_Button* check_gui_show_listeners
          { input_gui_window_title = new Fl_Input(55, 530, 325, 25, gettext("Custom window title:"));
            input_gui_window_title->tooltip(gettext("Define a custom window title"));
            input_gui_window_title->callback((Fl_Callback*)cb_input_gui_window_title);
            input_gui_window_title->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            input_gui_window_title->when(FL_WHEN_CHANGED);
            this->input_gui_window_title->maximum_size(500);
          } // Fl_Input* input_gui_window_title
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 50, 343, 60, gettext("Language"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_gui_language = new Fl_Choice(58, 70, 315, 20);
            choice_gui_language->down_box(FL_BORDER_BOX);
            choice_gui_language->callback((Fl_Callback*)cb_choice_gui_language);
            if (!menu_choice_gui_language_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_choice_gui_language[i].label())
                  menu_choice_gui_language[i].label(gettext(menu_choice_gui_language[i].label()));
              menu_choice_gui_language_i18n_done = 1;
            }
            choice_gui_language->menu(menu_choice_gui_language);
          } // Fl_Choice* choice_gui_language
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 205, 345, 70, gettext("VU meter"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { radio_gui_vu_gradient = new Fl_Round_Button(56, 220, 144, 15, gettext("Gradient colors"));
            radio_gui_vu_gradient->type(102);
            radio_gui_vu_gradient->down_box(FL_ROUND_DOWN_BOX);
            radio_gui_vu_gradient->callback((Fl_Callback*)cb_radio_gui_vu_gradient);
          } // Fl_Round_Button* radio_gui_vu_gradient
          { radio_gui_vu_solid = new Fl_Round_Button(56, 245, 139, 15, gettext("Solid colors"));
            radio_gui_vu_solid->type(102);
            radio_gui_vu_solid->down_box(FL_ROUND_DOWN_BOX);
            radio_gui_vu_solid->callback((Fl_Callback*)cb_radio_gui_vu_solid);
          } // Fl_Round_Button* radio_gui_vu_solid
          { check_gui_always_show_vu_tabs = new Fl_Check_Button(200, 220, 165, 15, gettext("Always show tabs"));
            check_gui_always_show_vu_tabs->down_box(FL_DOWN_BOX);
            check_gui_always_show_vu_tabs->callback((Fl_Callback*)cb_check_gui_always_show_vu_tabs);
          } // Fl_Check_Button* check_gui_always_show_vu_tabs
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 20, 434, 620, gettext("Donate"));
        o->hide();
        { Fl_Group* o = new Fl_Group(55, 70, 326, 360, gettext("Donation"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Box* o = new Fl_Box(67, 75, 308, 150, gettext("Keeping this software up to date, adding\nnew features and answering support \
mails\ntakes a lot of time and effort. If you can\nafford it, please consider \
supporting this\nproject.\n\nThank you!"));
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { Fl_Button* o = new Fl_Button(67, 225, 300, 28, gettext("&Donate via PayPal"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Donate);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(67, 272, 300, 27, gettext("Become a &patron"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Become);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(67, 361, 300, 28, gettext("&Bitcoin && Co"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Bitcoin);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(67, 317, 300, 28, gettext("&Apple Pay, Google Pay, SEPA and more"));
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Apple);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      Settings->end();
    } // Fl_Tabs* Settings
    window_cfg->size_range(430, 640, 430, 640);
    window_cfg->end();
  } // Fl_My_Double_Window* window_cfg
  { window_add_srv = new Fl_Double_Window(400, 415, gettext("Add server"));
    window_add_srv->user_data((void*)(this));
    { input_add_srv_name = new Fl_Input(70, 27, 245, 23, gettext("Name:"));
      input_add_srv_name->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_name->maximum_size(100);
    } // Fl_Input* input_add_srv_name
    { input_add_srv_addr = new Fl_Input(10, 206, 295, 25, gettext("Address:"));
      input_add_srv_addr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_addr->maximum_size(100);
    } // Fl_Input* input_add_srv_addr
    { input_add_srv_port = new Fl_Int_Input(315, 206, 75, 25, gettext("Port:"));
      input_add_srv_port->type(2);
      input_add_srv_port->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Int_Input* input_add_srv_port
    { input_add_srv_pwd = new Fl_Input(10, 251, 295, 25, gettext("Password:"));
      input_add_srv_pwd->type(5);
      input_add_srv_pwd->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_pwd->maximum_size(100);
    } // Fl_Input* input_add_srv_pwd
    { input_add_srv_mount = new Fl_Input(10, 301, 215, 25, gettext("Icecast mountpoint:"));
      input_add_srv_mount->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_mount->maximum_size(100);
    } // Fl_Input* input_add_srv_mount
    { input_add_srv_usr = new Fl_Input(235, 301, 155, 25, gettext("Icecast user:"));
      input_add_srv_usr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_usr->maximum_size(100);
    } // Fl_Input* input_add_srv_usr
    { button_cfg_show_pw = new Fl_Button(315, 251, 75, 25, gettext("Show"));
      button_cfg_show_pw->tooltip(gettext("show/hide password"));
      button_cfg_show_pw->box(FL_ENGRAVED_BOX);
      button_cfg_show_pw->callback((Fl_Callback*)cb_button_cfg_show_pw);
    } // Fl_Button* button_cfg_show_pw
    { Fl_Group* o = new Fl_Group(10, 96, 125, 86, gettext("Type"));
      o->box(FL_ENGRAVED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { radio_add_srv_shoutcast = new Fl_Round_Button(15, 105, 88, 15, gettext("Shoutcast"));
        radio_add_srv_shoutcast->type(102);
        radio_add_srv_shoutcast->down_box(FL_ROUND_DOWN_BOX);
        radio_add_srv_shoutcast->callback((Fl_Callback*)cb_radio_add_srv_shoutcast);
      } // Fl_Round_Button* radio_add_srv_shoutcast
      { radio_add_srv_icecast = new Fl_Round_Button(15, 132, 80, 12, gettext("Icecast"));
        radio_add_srv_icecast->type(102);
        radio_add_srv_icecast->down_box(FL_ROUND_DOWN_BOX);
        radio_add_srv_icecast->callback((Fl_Callback*)cb_radio_add_srv_icecast);
      } // Fl_Round_Button* radio_add_srv_icecast
      { radio_add_srv_radioco = new Fl_Round_Button(15, 157, 80, 12, gettext("Radio.co"));
        radio_add_srv_radioco->type(102);
        radio_add_srv_radioco->down_box(FL_ROUND_DOWN_BOX);
        radio_add_srv_radioco->callback((Fl_Callback*)cb_radio_add_srv_radioco);
      } // Fl_Round_Button* radio_add_srv_radioco
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(10, 366, 85, 25, gettext("&Cancel"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { button_add_srv_add = new Fl_Button(305, 366, 85, 25, gettext("&ADD"));
      button_add_srv_add->box(FL_ENGRAVED_BOX);
      button_add_srv_add->callback((Fl_Callback*)cb_button_add_srv_add);
    } // Fl_Button* button_add_srv_add
    { button_add_srv_save = new Fl_Button(305, 366, 85, 25, gettext("&Save"));
      button_add_srv_save->box(FL_ENGRAVED_BOX);
      button_add_srv_save->callback((Fl_Callback*)cb_button_add_srv_save);
    } // Fl_Button* button_add_srv_save
    { frame_add_srv_tls = new Fl_Group(140, 96, 250, 86, gettext("SSL/TLS"));
      frame_add_srv_tls->box(FL_ENGRAVED_BOX);
      frame_add_srv_tls->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { check_add_srv_tls = new Fl_Check_Button(148, 102, 190, 20, gettext("Use SSL/TLS"));
        check_add_srv_tls->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* check_add_srv_tls
      { button_add_srv_revoke_cert = new Fl_Button(150, 148, 225, 25, gettext("Revoke certificate trust"));
        button_add_srv_revoke_cert->box(FL_ENGRAVED_BOX);
        button_add_srv_revoke_cert->callback((Fl_Callback*)cb_button_add_srv_revoke_cert);
      } // Fl_Button* button_add_srv_revoke_cert
      frame_add_srv_tls->end();
    } // Fl_Group* frame_add_srv_tls
    { browser_add_srv_station_list = new Fl_Check_Browser(140, 206, 250, 83, gettext("Radio.co Stations"));
      browser_add_srv_station_list->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Check_Browser* browser_add_srv_station_list
    { button_add_srv_get_stations = new Fl_Button(10, 205, 120, 25, gettext("Get Stations"));
      button_add_srv_get_stations->box(FL_ENGRAVED_BOX);
      button_add_srv_get_stations->callback((Fl_Callback*)cb_button_add_srv_get_stations);
      button_add_srv_get_stations->hide();
    } // Fl_Button* button_add_srv_get_stations
    { button_add_srv_select_all = new Fl_Button(140, 295, 120, 20, gettext("Select all"));
      button_add_srv_select_all->box(FL_ENGRAVED_BOX);
      button_add_srv_select_all->callback((Fl_Callback*)cb_button_add_srv_select_all);
      button_add_srv_select_all->hide();
    } // Fl_Button* button_add_srv_select_all
    { button_add_srv_deselect_all = new Fl_Button(265, 295, 125, 20, gettext("Deselect all"));
      button_add_srv_deselect_all->box(FL_ENGRAVED_BOX);
      button_add_srv_deselect_all->callback((Fl_Callback*)cb_button_add_srv_deselect_all);
      button_add_srv_deselect_all->hide();
    } // Fl_Button* button_add_srv_deselect_all
    { check_add_srv_protocol = new Fl_Check_Button(8, 336, 297, 15, gettext("Use legacy Icecast protocol"));
      check_add_srv_protocol->tooltip(gettext("Activate this if you want to use the older SOURCE protocol instead of the new\
er PUT protocol"));
      check_add_srv_protocol->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* check_add_srv_protocol
    window_add_srv->set_modal();
    window_add_srv->end();
  } // Fl_Double_Window* window_add_srv
  { window_add_icy = new Fl_Double_Window(305, 380, gettext("Add stream info"));
    window_add_icy->user_data((void*)(this));
    { input_add_icy_name = new Fl_Input(10, 35, 285, 25, gettext("Name:"));
      input_add_icy_name->tooltip(gettext("The name of your new ICY-entrie"));
      input_add_icy_name->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_name->maximum_size(100);
    } // Fl_Input* input_add_icy_name
    { input_add_icy_desc = new Fl_Input(10, 145, 170, 25, gettext("Description:"));
      input_add_icy_desc->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_desc->maximum_size(100);
    } // Fl_Input* input_add_icy_desc
    { input_add_icy_genre = new Fl_Input(185, 145, 110, 25, gettext("Genre:"));
      input_add_icy_genre->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_genre->maximum_size(100);
    } // Fl_Input* input_add_icy_genre
    { input_add_icy_url = new Fl_Input(10, 190, 170, 25, gettext("URL:"));
      input_add_icy_url->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_url->maximum_size(100);
    } // Fl_Input* input_add_icy_url
    { input_add_icy_icq = new Fl_Input(185, 190, 110, 25, gettext("ICQ:"));
      input_add_icy_icq->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_icq->maximum_size(100);
    } // Fl_Input* input_add_icy_icq
    { input_add_icy_irc = new Fl_Input(10, 235, 170, 25, gettext("IRC:"));
      input_add_icy_irc->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_irc->maximum_size(100);
    } // Fl_Input* input_add_icy_irc
    { input_add_icy_aim = new Fl_Input(185, 235, 110, 25, gettext("AIM:"));
      input_add_icy_aim->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_aim->maximum_size(100);
    } // Fl_Input* input_add_icy_aim
    { check_add_icy_pub = new Fl_Check_Button(10, 270, 235, 20, gettext("Make server public"));
      check_add_icy_pub->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* check_add_icy_pub
    { Fl_Button* o = new Fl_Button(10, 340, 74, 25, gettext("&Cancel"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { button_add_icy_add = new Fl_Button(224, 340, 74, 25, gettext("&ADD"));
      button_add_icy_add->box(FL_ENGRAVED_BOX);
      button_add_icy_add->callback((Fl_Callback*)cb_button_add_icy_add);
    } // Fl_Button* button_add_icy_add
    { button_add_icy_save = new Fl_Button(224, 340, 74, 25, gettext("&Save"));
      button_add_icy_save->box(FL_ENGRAVED_BOX);
      button_add_icy_save->callback((Fl_Callback*)cb_button_add_icy_save);
    } // Fl_Button* button_add_icy_save
    { check_expand_variables = new Fl_Check_Button(10, 295, 235, 20, gettext("Expand variables"));
      check_expand_variables->tooltip(gettext("Activate to expand date variables in name and description"));
      check_expand_variables->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* check_expand_variables
    window_add_icy->set_modal();
    window_add_icy->end();
  } // Fl_Double_Window* window_add_icy
  Fl::scheme("standard");
  window_main->label(PACKAGE_STRING);
  
  info_buffer = new Fl_Text_Buffer();
  info_output->buffer(info_buffer);
  
  //window_cfg->size(window_cfg->w(), 380);
  
  // show info output...
  info_visible = 1;
                  
  info_output->show();
  { window_donate_crypto = new Fl_My_Double_Window(460, 255, gettext("Donate Cryptocurrency"));
    window_donate_crypto->box(FL_FLAT_BOX);
    window_donate_crypto->color(FL_BACKGROUND_COLOR);
    window_donate_crypto->selection_color(FL_BACKGROUND_COLOR);
    window_donate_crypto->labeltype(FL_NO_LABEL);
    window_donate_crypto->labelfont(0);
    window_donate_crypto->labelsize(14);
    window_donate_crypto->labelcolor(FL_FOREGROUND_COLOR);
    window_donate_crypto->user_data((void*)(this));
    window_donate_crypto->align(Fl_Align(FL_ALIGN_TOP));
    window_donate_crypto->when(FL_WHEN_RELEASE);
    { output_bitcoin_addr = new Fl_Output(20, 40, 320, 22, gettext("Bitcoin"));
      output_bitcoin_addr->box(FL_FLAT_BOX);
      output_bitcoin_addr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      output_bitcoin_addr->value("bc1q4uq7h464rsu2cudrmuuqmc4tcr98d0edrhe5au");
    } // Fl_Output* output_bitcoin_addr
    { Fl_Button* o = new Fl_Button(350, 40, 88, 22, gettext("Copy"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Copy);
    } // Fl_Button* o
    { output_litecoin_addr = new Fl_Output(20, 100, 320, 22, gettext("Litecoin"));
      output_litecoin_addr->box(FL_FLAT_BOX);
      output_litecoin_addr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      output_litecoin_addr->value("Ld9gntf8fsYpmVcbstFkzz5R3sNPC3AhTx");
    } // Fl_Output* output_litecoin_addr
    { Fl_Button* o = new Fl_Button(350, 100, 88, 22, gettext("Copy"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Copy1);
    } // Fl_Button* o
    { output_monero_addr = new Fl_Output(20, 160, 320, 22, gettext("Monero"));
      output_monero_addr->box(FL_FLAT_BOX);
      output_monero_addr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      output_monero_addr->value("85u8DacasxPNvKzY5kEiprBnbydDqg26yGAVEw7mdwccNFsrXMWCE4VQnV2JVfh5BTRheNnpDJqYjbqPrVRLEPAKP3dsYgc");
    } // Fl_Output* output_monero_addr
    { Fl_Button* o = new Fl_Button(350, 160, 88, 22, gettext("Copy"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Copy2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(20, 217, 88, 22, gettext("&Close"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    window_donate_crypto->end();
  } // Fl_My_Double_Window* window_donate_crypto
  { window_stream_codec_settings = new Fl_My_Double_Window(395, 305, gettext("Streaming Codec Settings"));
    window_stream_codec_settings->box(FL_FLAT_BOX);
    window_stream_codec_settings->color(FL_BACKGROUND_COLOR);
    window_stream_codec_settings->selection_color(FL_BACKGROUND_COLOR);
    window_stream_codec_settings->labeltype(FL_NO_LABEL);
    window_stream_codec_settings->labelfont(0);
    window_stream_codec_settings->labelsize(14);
    window_stream_codec_settings->labelcolor(FL_FOREGROUND_COLOR);
    window_stream_codec_settings->user_data((void*)(this));
    window_stream_codec_settings->align(Fl_Align(FL_ALIGN_TOP));
    window_stream_codec_settings->when(FL_WHEN_RELEASE);
    { Fl_Tabs* o = new Fl_Tabs(5, 0, 385, 265);
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("MP3"));
        { choice_stream_mp3_enc_quality = new Fl_Choice(25, 50, 165, 20, gettext("Encoding Quality"));
          choice_stream_mp3_enc_quality->down_box(FL_BORDER_BOX);
          choice_stream_mp3_enc_quality->callback((Fl_Callback*)cb_choice_stream_mp3_enc_quality);
          choice_stream_mp3_enc_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_mp3_enc_quality_i18n_done) {
            int i=0;
            for ( ; i<10; i++)
              if (menu_choice_stream_mp3_enc_quality[i].label())
                menu_choice_stream_mp3_enc_quality[i].label(gettext(menu_choice_stream_mp3_enc_quality[i].label()));
            menu_choice_stream_mp3_enc_quality_i18n_done = 1;
          }
          choice_stream_mp3_enc_quality->menu(menu_choice_stream_mp3_enc_quality);
        } // Fl_Choice* choice_stream_mp3_enc_quality
        { choice_stream_mp3_stereo_mode = new Fl_Choice(210, 50, 165, 20, gettext("Stereo Mode"));
          choice_stream_mp3_stereo_mode->down_box(FL_BORDER_BOX);
          choice_stream_mp3_stereo_mode->callback((Fl_Callback*)cb_choice_stream_mp3_stereo_mode);
          choice_stream_mp3_stereo_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_mp3_stereo_mode_i18n_done) {
            int i=0;
            for ( ; i<3; i++)
              if (menu_choice_stream_mp3_stereo_mode[i].label())
                menu_choice_stream_mp3_stereo_mode[i].label(gettext(menu_choice_stream_mp3_stereo_mode[i].label()));
            menu_choice_stream_mp3_stereo_mode_i18n_done = 1;
          }
          choice_stream_mp3_stereo_mode->menu(menu_choice_stream_mp3_stereo_mode);
        } // Fl_Choice* choice_stream_mp3_stereo_mode
        { choice_stream_mp3_bitrate_mode = new Fl_Choice(25, 110, 165, 20, gettext("Bitrate Mode"));
          choice_stream_mp3_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_stream_mp3_bitrate_mode->callback((Fl_Callback*)cb_choice_stream_mp3_bitrate_mode);
          choice_stream_mp3_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_mp3_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<3; i++)
              if (menu_choice_stream_mp3_bitrate_mode[i].label())
                menu_choice_stream_mp3_bitrate_mode[i].label(gettext(menu_choice_stream_mp3_bitrate_mode[i].label()));
            menu_choice_stream_mp3_bitrate_mode_i18n_done = 1;
          }
          choice_stream_mp3_bitrate_mode->menu(menu_choice_stream_mp3_bitrate_mode);
        } // Fl_Choice* choice_stream_mp3_bitrate_mode
        { choice_stream_mp3_vbr_quality = new Fl_Choice(210, 110, 165, 20, gettext("VBR Quality"));
          choice_stream_mp3_vbr_quality->down_box(FL_BORDER_BOX);
          choice_stream_mp3_vbr_quality->callback((Fl_Callback*)cb_choice_stream_mp3_vbr_quality);
          choice_stream_mp3_vbr_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_mp3_vbr_quality_i18n_done) {
            int i=0;
            for ( ; i<10; i++)
              if (menu_choice_stream_mp3_vbr_quality[i].label())
                menu_choice_stream_mp3_vbr_quality[i].label(gettext(menu_choice_stream_mp3_vbr_quality[i].label()));
            menu_choice_stream_mp3_vbr_quality_i18n_done = 1;
          }
          choice_stream_mp3_vbr_quality->menu(menu_choice_stream_mp3_vbr_quality);
        } // Fl_Choice* choice_stream_mp3_vbr_quality
        { choice_stream_mp3_vbr_min_bitrate = new Fl_Choice(25, 170, 165, 20, gettext("VBR min. Bitrate"));
          choice_stream_mp3_vbr_min_bitrate->down_box(FL_BORDER_BOX);
          choice_stream_mp3_vbr_min_bitrate->callback((Fl_Callback*)cb_choice_stream_mp3_vbr_min_bitrate);
          choice_stream_mp3_vbr_min_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_mp3_vbr_min_bitrate_i18n_done) {
            int i=0;
            for ( ; i<17; i++)
              if (menu_choice_stream_mp3_vbr_min_bitrate[i].label())
                menu_choice_stream_mp3_vbr_min_bitrate[i].label(gettext(menu_choice_stream_mp3_vbr_min_bitrate[i].label()));
            menu_choice_stream_mp3_vbr_min_bitrate_i18n_done = 1;
          }
          choice_stream_mp3_vbr_min_bitrate->menu(menu_choice_stream_mp3_vbr_min_bitrate);
        } // Fl_Choice* choice_stream_mp3_vbr_min_bitrate
        { choice_stream_mp3_vbr_max_bitrate = new Fl_Choice(210, 170, 165, 20, gettext("VBR max. Bitrate"));
          choice_stream_mp3_vbr_max_bitrate->down_box(FL_BORDER_BOX);
          choice_stream_mp3_vbr_max_bitrate->callback((Fl_Callback*)cb_choice_stream_mp3_vbr_max_bitrate);
          choice_stream_mp3_vbr_max_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_mp3_vbr_max_bitrate_i18n_done) {
            int i=0;
            for ( ; i<17; i++)
              if (menu_choice_stream_mp3_vbr_max_bitrate[i].label())
                menu_choice_stream_mp3_vbr_max_bitrate[i].label(gettext(menu_choice_stream_mp3_vbr_max_bitrate[i].label()));
            menu_choice_stream_mp3_vbr_max_bitrate_i18n_done = 1;
          }
          choice_stream_mp3_vbr_max_bitrate->menu(menu_choice_stream_mp3_vbr_max_bitrate);
        } // Fl_Choice* choice_stream_mp3_vbr_max_bitrate
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("OGG"));
        o->hide();
        { choice_stream_vorbis_bitrate_mode = new Fl_Choice(25, 50, 165, 20, gettext("Bitrate Mode"));
          choice_stream_vorbis_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_stream_vorbis_bitrate_mode->callback((Fl_Callback*)cb_choice_stream_vorbis_bitrate_mode);
          choice_stream_vorbis_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_vorbis_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<3; i++)
              if (menu_choice_stream_vorbis_bitrate_mode[i].label())
                menu_choice_stream_vorbis_bitrate_mode[i].label(gettext(menu_choice_stream_vorbis_bitrate_mode[i].label()));
            menu_choice_stream_vorbis_bitrate_mode_i18n_done = 1;
          }
          choice_stream_vorbis_bitrate_mode->menu(menu_choice_stream_vorbis_bitrate_mode);
        } // Fl_Choice* choice_stream_vorbis_bitrate_mode
        { choice_stream_vorbis_vbr_quality = new Fl_Choice(210, 50, 165, 20, gettext("VBR Quality"));
          choice_stream_vorbis_vbr_quality->down_box(FL_BORDER_BOX);
          choice_stream_vorbis_vbr_quality->callback((Fl_Callback*)cb_choice_stream_vorbis_vbr_quality);
          choice_stream_vorbis_vbr_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_vorbis_vbr_quality_i18n_done) {
            int i=0;
            for ( ; i<11; i++)
              if (menu_choice_stream_vorbis_vbr_quality[i].label())
                menu_choice_stream_vorbis_vbr_quality[i].label(gettext(menu_choice_stream_vorbis_vbr_quality[i].label()));
            menu_choice_stream_vorbis_vbr_quality_i18n_done = 1;
          }
          choice_stream_vorbis_vbr_quality->menu(menu_choice_stream_vorbis_vbr_quality);
        } // Fl_Choice* choice_stream_vorbis_vbr_quality
        { choice_stream_vorbis_vbr_min_bitrate = new Fl_Choice(25, 110, 165, 20, gettext("VBR min. Bitrate"));
          choice_stream_vorbis_vbr_min_bitrate->down_box(FL_BORDER_BOX);
          choice_stream_vorbis_vbr_min_bitrate->callback((Fl_Callback*)cb_choice_stream_vorbis_vbr_min_bitrate);
          choice_stream_vorbis_vbr_min_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Choice* choice_stream_vorbis_vbr_min_bitrate
        { choice_stream_vorbis_vbr_max_bitrate = new Fl_Choice(210, 110, 165, 20, gettext("VBR max. Bitrate"));
          choice_stream_vorbis_vbr_max_bitrate->down_box(FL_BORDER_BOX);
          choice_stream_vorbis_vbr_max_bitrate->callback((Fl_Callback*)cb_choice_stream_vorbis_vbr_max_bitrate);
          choice_stream_vorbis_vbr_max_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Choice* choice_stream_vorbis_vbr_max_bitrate
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("OPUS"));
        o->hide();
        { choice_stream_opus_audio_type = new Fl_Choice(210, 50, 165, 20, gettext("Optimize for"));
          choice_stream_opus_audio_type->down_box(FL_BORDER_BOX);
          choice_stream_opus_audio_type->callback((Fl_Callback*)cb_choice_stream_opus_audio_type);
          choice_stream_opus_audio_type->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_opus_audio_type_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_stream_opus_audio_type[i].label())
                menu_choice_stream_opus_audio_type[i].label(gettext(menu_choice_stream_opus_audio_type[i].label()));
            menu_choice_stream_opus_audio_type_i18n_done = 1;
          }
          choice_stream_opus_audio_type->menu(menu_choice_stream_opus_audio_type);
        } // Fl_Choice* choice_stream_opus_audio_type
        { choice_stream_opus_bitrate_mode = new Fl_Choice(25, 110, 165, 20, gettext("Bitrate Mode"));
          choice_stream_opus_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_stream_opus_bitrate_mode->callback((Fl_Callback*)cb_choice_stream_opus_bitrate_mode);
          choice_stream_opus_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_opus_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_stream_opus_bitrate_mode[i].label())
                menu_choice_stream_opus_bitrate_mode[i].label(gettext(menu_choice_stream_opus_bitrate_mode[i].label()));
            menu_choice_stream_opus_bitrate_mode_i18n_done = 1;
          }
          choice_stream_opus_bitrate_mode->menu(menu_choice_stream_opus_bitrate_mode);
        } // Fl_Choice* choice_stream_opus_bitrate_mode
        { choice_stream_opus_quality = new Fl_Choice(25, 50, 165, 20, gettext("Quality"));
          choice_stream_opus_quality->down_box(FL_BORDER_BOX);
          choice_stream_opus_quality->callback((Fl_Callback*)cb_choice_stream_opus_quality);
          choice_stream_opus_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_opus_quality_i18n_done) {
            int i=0;
            for ( ; i<11; i++)
              if (menu_choice_stream_opus_quality[i].label())
                menu_choice_stream_opus_quality[i].label(gettext(menu_choice_stream_opus_quality[i].label()));
            menu_choice_stream_opus_quality_i18n_done = 1;
          }
          choice_stream_opus_quality->menu(menu_choice_stream_opus_quality);
        } // Fl_Choice* choice_stream_opus_quality
        { choice_stream_opus_bandwidth = new Fl_Choice(210, 110, 165, 20, gettext("Max. Bandwidth"));
          choice_stream_opus_bandwidth->down_box(FL_BORDER_BOX);
          choice_stream_opus_bandwidth->callback((Fl_Callback*)cb_choice_stream_opus_bandwidth);
          choice_stream_opus_bandwidth->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_opus_bandwidth_i18n_done) {
            int i=0;
            for ( ; i<5; i++)
              if (menu_choice_stream_opus_bandwidth[i].label())
                menu_choice_stream_opus_bandwidth[i].label(gettext(menu_choice_stream_opus_bandwidth[i].label()));
            menu_choice_stream_opus_bandwidth_i18n_done = 1;
          }
          choice_stream_opus_bandwidth->menu(menu_choice_stream_opus_bandwidth);
        } // Fl_Choice* choice_stream_opus_bandwidth
        o->end();
      } // Fl_Group* o
      { tab_stream_aac = new Fl_Group(5, 20, 385, 245, gettext("AAC"));
        tab_stream_aac->hide();
        { choice_stream_aac_profile = new Fl_Choice(25, 50, 165, 20, gettext("Profile"));
          choice_stream_aac_profile->down_box(FL_BORDER_BOX);
          choice_stream_aac_profile->callback((Fl_Callback*)cb_choice_stream_aac_profile);
          choice_stream_aac_profile->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_aac_profile_i18n_done) {
            int i=0;
            for ( ; i<4; i++)
              if (menu_choice_stream_aac_profile[i].label())
                menu_choice_stream_aac_profile[i].label(gettext(menu_choice_stream_aac_profile[i].label()));
            menu_choice_stream_aac_profile_i18n_done = 1;
          }
          choice_stream_aac_profile->menu(menu_choice_stream_aac_profile);
        } // Fl_Choice* choice_stream_aac_profile
        { choice_stream_aac_afterburner = new Fl_Choice(210, 50, 165, 20, gettext("Afterburner"));
          choice_stream_aac_afterburner->down_box(FL_BORDER_BOX);
          choice_stream_aac_afterburner->callback((Fl_Callback*)cb_choice_stream_aac_afterburner);
          choice_stream_aac_afterburner->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_aac_afterburner_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_stream_aac_afterburner[i].label())
                menu_choice_stream_aac_afterburner[i].label(gettext(menu_choice_stream_aac_afterburner[i].label()));
            menu_choice_stream_aac_afterburner_i18n_done = 1;
          }
          choice_stream_aac_afterburner->menu(menu_choice_stream_aac_afterburner);
        } // Fl_Choice* choice_stream_aac_afterburner
        { choice_stream_aac_bitrate_mode = new Fl_Choice(25, 110, 165, 20, gettext("Bitrate Mode"));
          choice_stream_aac_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_stream_aac_bitrate_mode->callback((Fl_Callback*)cb_choice_stream_aac_bitrate_mode);
          choice_stream_aac_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_stream_aac_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_stream_aac_bitrate_mode[i].label())
                menu_choice_stream_aac_bitrate_mode[i].label(gettext(menu_choice_stream_aac_bitrate_mode[i].label()));
            menu_choice_stream_aac_bitrate_mode_i18n_done = 1;
          }
          choice_stream_aac_bitrate_mode->menu(menu_choice_stream_aac_bitrate_mode);
        } // Fl_Choice* choice_stream_aac_bitrate_mode
        tab_stream_aac->end();
      } // Fl_Group* tab_stream_aac
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("FLAC"));
        o->hide();
        { Fl_Group* o = new Fl_Group(20, 50, 355, 50, gettext("Bit depth"));
          o->box(FL_ENGRAVED_FRAME);
          { radio_stream_flac_bit_depth_16 = new Fl_Round_Button(95, 65, 70, 20, gettext("16 bit"));
            radio_stream_flac_bit_depth_16->type(102);
            radio_stream_flac_bit_depth_16->down_box(FL_ROUND_DOWN_BOX);
            radio_stream_flac_bit_depth_16->callback((Fl_Callback*)cb_radio_stream_flac_bit_depth_16);
          } // Fl_Round_Button* radio_stream_flac_bit_depth_16
          { radio_stream_flac_bit_depth_24 = new Fl_Round_Button(236, 65, 79, 20, gettext("24 bit"));
            radio_stream_flac_bit_depth_24->type(102);
            radio_stream_flac_bit_depth_24->down_box(FL_ROUND_DOWN_BOX);
            radio_stream_flac_bit_depth_24->callback((Fl_Callback*)cb_radio_stream_flac_bit_depth_24);
          } // Fl_Round_Button* radio_stream_flac_bit_depth_24
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(150, 273, 88, 22, gettext("&Close"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    window_stream_codec_settings->end();
  } // Fl_My_Double_Window* window_stream_codec_settings
  { window_rec_codec_settings = new Fl_My_Double_Window(395, 305, gettext("Recording Codec Settings"));
    window_rec_codec_settings->box(FL_FLAT_BOX);
    window_rec_codec_settings->color(FL_BACKGROUND_COLOR);
    window_rec_codec_settings->selection_color(FL_BACKGROUND_COLOR);
    window_rec_codec_settings->labeltype(FL_NO_LABEL);
    window_rec_codec_settings->labelfont(0);
    window_rec_codec_settings->labelsize(14);
    window_rec_codec_settings->labelcolor(FL_FOREGROUND_COLOR);
    window_rec_codec_settings->user_data((void*)(this));
    window_rec_codec_settings->align(Fl_Align(FL_ALIGN_TOP));
    window_rec_codec_settings->when(FL_WHEN_RELEASE);
    { Fl_Tabs* o = new Fl_Tabs(5, 0, 385, 265);
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("MP3"));
        { choice_rec_mp3_enc_quality = new Fl_Choice(25, 50, 165, 20, gettext("Encoding Quality"));
          choice_rec_mp3_enc_quality->down_box(FL_BORDER_BOX);
          choice_rec_mp3_enc_quality->callback((Fl_Callback*)cb_choice_rec_mp3_enc_quality);
          choice_rec_mp3_enc_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_mp3_enc_quality_i18n_done) {
            int i=0;
            for ( ; i<10; i++)
              if (menu_choice_rec_mp3_enc_quality[i].label())
                menu_choice_rec_mp3_enc_quality[i].label(gettext(menu_choice_rec_mp3_enc_quality[i].label()));
            menu_choice_rec_mp3_enc_quality_i18n_done = 1;
          }
          choice_rec_mp3_enc_quality->menu(menu_choice_rec_mp3_enc_quality);
        } // Fl_Choice* choice_rec_mp3_enc_quality
        { choice_rec_mp3_stereo_mode = new Fl_Choice(210, 50, 165, 20, gettext("Stereo Mode"));
          choice_rec_mp3_stereo_mode->down_box(FL_BORDER_BOX);
          choice_rec_mp3_stereo_mode->callback((Fl_Callback*)cb_choice_rec_mp3_stereo_mode);
          choice_rec_mp3_stereo_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_mp3_stereo_mode_i18n_done) {
            int i=0;
            for ( ; i<3; i++)
              if (menu_choice_rec_mp3_stereo_mode[i].label())
                menu_choice_rec_mp3_stereo_mode[i].label(gettext(menu_choice_rec_mp3_stereo_mode[i].label()));
            menu_choice_rec_mp3_stereo_mode_i18n_done = 1;
          }
          choice_rec_mp3_stereo_mode->menu(menu_choice_rec_mp3_stereo_mode);
        } // Fl_Choice* choice_rec_mp3_stereo_mode
        { choice_rec_mp3_bitrate_mode = new Fl_Choice(25, 110, 165, 20, gettext("Bitrate Mode"));
          choice_rec_mp3_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_rec_mp3_bitrate_mode->callback((Fl_Callback*)cb_choice_rec_mp3_bitrate_mode);
          choice_rec_mp3_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_mp3_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<3; i++)
              if (menu_choice_rec_mp3_bitrate_mode[i].label())
                menu_choice_rec_mp3_bitrate_mode[i].label(gettext(menu_choice_rec_mp3_bitrate_mode[i].label()));
            menu_choice_rec_mp3_bitrate_mode_i18n_done = 1;
          }
          choice_rec_mp3_bitrate_mode->menu(menu_choice_rec_mp3_bitrate_mode);
        } // Fl_Choice* choice_rec_mp3_bitrate_mode
        { choice_rec_mp3_vbr_quality = new Fl_Choice(210, 110, 165, 20, gettext("VBR Quality"));
          choice_rec_mp3_vbr_quality->down_box(FL_BORDER_BOX);
          choice_rec_mp3_vbr_quality->callback((Fl_Callback*)cb_choice_rec_mp3_vbr_quality);
          choice_rec_mp3_vbr_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_mp3_vbr_quality_i18n_done) {
            int i=0;
            for ( ; i<10; i++)
              if (menu_choice_rec_mp3_vbr_quality[i].label())
                menu_choice_rec_mp3_vbr_quality[i].label(gettext(menu_choice_rec_mp3_vbr_quality[i].label()));
            menu_choice_rec_mp3_vbr_quality_i18n_done = 1;
          }
          choice_rec_mp3_vbr_quality->menu(menu_choice_rec_mp3_vbr_quality);
        } // Fl_Choice* choice_rec_mp3_vbr_quality
        { choice_rec_mp3_vbr_min_bitrate = new Fl_Choice(25, 170, 165, 20, gettext("VBR min. Bitrate"));
          choice_rec_mp3_vbr_min_bitrate->down_box(FL_BORDER_BOX);
          choice_rec_mp3_vbr_min_bitrate->callback((Fl_Callback*)cb_choice_rec_mp3_vbr_min_bitrate);
          choice_rec_mp3_vbr_min_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_mp3_vbr_min_bitrate_i18n_done) {
            int i=0;
            for ( ; i<17; i++)
              if (menu_choice_rec_mp3_vbr_min_bitrate[i].label())
                menu_choice_rec_mp3_vbr_min_bitrate[i].label(gettext(menu_choice_rec_mp3_vbr_min_bitrate[i].label()));
            menu_choice_rec_mp3_vbr_min_bitrate_i18n_done = 1;
          }
          choice_rec_mp3_vbr_min_bitrate->menu(menu_choice_rec_mp3_vbr_min_bitrate);
        } // Fl_Choice* choice_rec_mp3_vbr_min_bitrate
        { choice_rec_mp3_vbr_max_bitrate = new Fl_Choice(210, 170, 165, 20, gettext("VBR max. Bitrate"));
          choice_rec_mp3_vbr_max_bitrate->down_box(FL_BORDER_BOX);
          choice_rec_mp3_vbr_max_bitrate->callback((Fl_Callback*)cb_choice_rec_mp3_vbr_max_bitrate);
          choice_rec_mp3_vbr_max_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_mp3_vbr_max_bitrate_i18n_done) {
            int i=0;
            for ( ; i<17; i++)
              if (menu_choice_rec_mp3_vbr_max_bitrate[i].label())
                menu_choice_rec_mp3_vbr_max_bitrate[i].label(gettext(menu_choice_rec_mp3_vbr_max_bitrate[i].label()));
            menu_choice_rec_mp3_vbr_max_bitrate_i18n_done = 1;
          }
          choice_rec_mp3_vbr_max_bitrate->menu(menu_choice_rec_mp3_vbr_max_bitrate);
        } // Fl_Choice* choice_rec_mp3_vbr_max_bitrate
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("OGG"));
        o->hide();
        { choice_rec_vorbis_bitrate_mode = new Fl_Choice(25, 50, 165, 20, gettext("Bitrate Mode"));
          choice_rec_vorbis_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_rec_vorbis_bitrate_mode->callback((Fl_Callback*)cb_choice_rec_vorbis_bitrate_mode);
          choice_rec_vorbis_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_vorbis_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<3; i++)
              if (menu_choice_rec_vorbis_bitrate_mode[i].label())
                menu_choice_rec_vorbis_bitrate_mode[i].label(gettext(menu_choice_rec_vorbis_bitrate_mode[i].label()));
            menu_choice_rec_vorbis_bitrate_mode_i18n_done = 1;
          }
          choice_rec_vorbis_bitrate_mode->menu(menu_choice_rec_vorbis_bitrate_mode);
        } // Fl_Choice* choice_rec_vorbis_bitrate_mode
        { choice_rec_vorbis_vbr_quality = new Fl_Choice(210, 50, 165, 20, gettext("VBR Quality"));
          choice_rec_vorbis_vbr_quality->down_box(FL_BORDER_BOX);
          choice_rec_vorbis_vbr_quality->callback((Fl_Callback*)cb_choice_rec_vorbis_vbr_quality);
          choice_rec_vorbis_vbr_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_vorbis_vbr_quality_i18n_done) {
            int i=0;
            for ( ; i<11; i++)
              if (menu_choice_rec_vorbis_vbr_quality[i].label())
                menu_choice_rec_vorbis_vbr_quality[i].label(gettext(menu_choice_rec_vorbis_vbr_quality[i].label()));
            menu_choice_rec_vorbis_vbr_quality_i18n_done = 1;
          }
          choice_rec_vorbis_vbr_quality->menu(menu_choice_rec_vorbis_vbr_quality);
        } // Fl_Choice* choice_rec_vorbis_vbr_quality
        { choice_rec_vorbis_vbr_min_bitrate = new Fl_Choice(25, 110, 165, 20, gettext("VBR min. Bitrate"));
          choice_rec_vorbis_vbr_min_bitrate->down_box(FL_BORDER_BOX);
          choice_rec_vorbis_vbr_min_bitrate->callback((Fl_Callback*)cb_choice_rec_vorbis_vbr_min_bitrate);
          choice_rec_vorbis_vbr_min_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Choice* choice_rec_vorbis_vbr_min_bitrate
        { choice_rec_vorbis_vbr_max_bitrate = new Fl_Choice(210, 110, 165, 20, gettext("VBR max. Bitrate"));
          choice_rec_vorbis_vbr_max_bitrate->down_box(FL_BORDER_BOX);
          choice_rec_vorbis_vbr_max_bitrate->callback((Fl_Callback*)cb_choice_rec_vorbis_vbr_max_bitrate);
          choice_rec_vorbis_vbr_max_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Choice* choice_rec_vorbis_vbr_max_bitrate
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("OPUS"));
        o->hide();
        { choice_rec_opus_audio_type = new Fl_Choice(210, 50, 165, 20, gettext("Optimize for"));
          choice_rec_opus_audio_type->down_box(FL_BORDER_BOX);
          choice_rec_opus_audio_type->callback((Fl_Callback*)cb_choice_rec_opus_audio_type);
          choice_rec_opus_audio_type->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_opus_audio_type_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_rec_opus_audio_type[i].label())
                menu_choice_rec_opus_audio_type[i].label(gettext(menu_choice_rec_opus_audio_type[i].label()));
            menu_choice_rec_opus_audio_type_i18n_done = 1;
          }
          choice_rec_opus_audio_type->menu(menu_choice_rec_opus_audio_type);
        } // Fl_Choice* choice_rec_opus_audio_type
        { choice_rec_opus_bitrate_mode = new Fl_Choice(25, 110, 165, 20, gettext("Bitrate Mode"));
          choice_rec_opus_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_rec_opus_bitrate_mode->callback((Fl_Callback*)cb_choice_rec_opus_bitrate_mode);
          choice_rec_opus_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_opus_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_rec_opus_bitrate_mode[i].label())
                menu_choice_rec_opus_bitrate_mode[i].label(gettext(menu_choice_rec_opus_bitrate_mode[i].label()));
            menu_choice_rec_opus_bitrate_mode_i18n_done = 1;
          }
          choice_rec_opus_bitrate_mode->menu(menu_choice_rec_opus_bitrate_mode);
        } // Fl_Choice* choice_rec_opus_bitrate_mode
        { choice_rec_opus_quality = new Fl_Choice(25, 50, 165, 20, gettext("Quality"));
          choice_rec_opus_quality->down_box(FL_BORDER_BOX);
          choice_rec_opus_quality->callback((Fl_Callback*)cb_choice_rec_opus_quality);
          choice_rec_opus_quality->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_opus_quality_i18n_done) {
            int i=0;
            for ( ; i<11; i++)
              if (menu_choice_rec_opus_quality[i].label())
                menu_choice_rec_opus_quality[i].label(gettext(menu_choice_rec_opus_quality[i].label()));
            menu_choice_rec_opus_quality_i18n_done = 1;
          }
          choice_rec_opus_quality->menu(menu_choice_rec_opus_quality);
        } // Fl_Choice* choice_rec_opus_quality
        { choice_rec_opus_bandwidth = new Fl_Choice(210, 110, 165, 20, gettext("Max. Bandwidth"));
          choice_rec_opus_bandwidth->down_box(FL_BORDER_BOX);
          choice_rec_opus_bandwidth->callback((Fl_Callback*)cb_choice_rec_opus_bandwidth);
          choice_rec_opus_bandwidth->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_opus_bandwidth_i18n_done) {
            int i=0;
            for ( ; i<5; i++)
              if (menu_choice_rec_opus_bandwidth[i].label())
                menu_choice_rec_opus_bandwidth[i].label(gettext(menu_choice_rec_opus_bandwidth[i].label()));
            menu_choice_rec_opus_bandwidth_i18n_done = 1;
          }
          choice_rec_opus_bandwidth->menu(menu_choice_rec_opus_bandwidth);
        } // Fl_Choice* choice_rec_opus_bandwidth
        o->end();
      } // Fl_Group* o
      { tab_rec_aac = new Fl_Group(5, 20, 385, 245, gettext("AAC"));
        tab_rec_aac->hide();
        { choice_rec_aac_profile = new Fl_Choice(25, 50, 165, 20, gettext("Profile"));
          choice_rec_aac_profile->down_box(FL_BORDER_BOX);
          choice_rec_aac_profile->callback((Fl_Callback*)cb_choice_rec_aac_profile);
          choice_rec_aac_profile->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_aac_profile_i18n_done) {
            int i=0;
            for ( ; i<4; i++)
              if (menu_choice_rec_aac_profile[i].label())
                menu_choice_rec_aac_profile[i].label(gettext(menu_choice_rec_aac_profile[i].label()));
            menu_choice_rec_aac_profile_i18n_done = 1;
          }
          choice_rec_aac_profile->menu(menu_choice_rec_aac_profile);
        } // Fl_Choice* choice_rec_aac_profile
        { choice_rec_aac_afterburner = new Fl_Choice(210, 50, 165, 20, gettext("Afterburner"));
          choice_rec_aac_afterburner->down_box(FL_BORDER_BOX);
          choice_rec_aac_afterburner->callback((Fl_Callback*)cb_choice_rec_aac_afterburner);
          choice_rec_aac_afterburner->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_aac_afterburner_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_rec_aac_afterburner[i].label())
                menu_choice_rec_aac_afterburner[i].label(gettext(menu_choice_rec_aac_afterburner[i].label()));
            menu_choice_rec_aac_afterburner_i18n_done = 1;
          }
          choice_rec_aac_afterburner->menu(menu_choice_rec_aac_afterburner);
        } // Fl_Choice* choice_rec_aac_afterburner
        { choice_rec_aac_bitrate_mode = new Fl_Choice(25, 110, 165, 20, gettext("Bitrate Mode"));
          choice_rec_aac_bitrate_mode->down_box(FL_BORDER_BOX);
          choice_rec_aac_bitrate_mode->callback((Fl_Callback*)cb_choice_rec_aac_bitrate_mode);
          choice_rec_aac_bitrate_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          if (!menu_choice_rec_aac_bitrate_mode_i18n_done) {
            int i=0;
            for ( ; i<2; i++)
              if (menu_choice_rec_aac_bitrate_mode[i].label())
                menu_choice_rec_aac_bitrate_mode[i].label(gettext(menu_choice_rec_aac_bitrate_mode[i].label()));
            menu_choice_rec_aac_bitrate_mode_i18n_done = 1;
          }
          choice_rec_aac_bitrate_mode->menu(menu_choice_rec_aac_bitrate_mode);
        } // Fl_Choice* choice_rec_aac_bitrate_mode
        tab_rec_aac->end();
      } // Fl_Group* tab_rec_aac
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("FLAC"));
        o->hide();
        { Fl_Group* o = new Fl_Group(20, 50, 355, 50, gettext("Bit depth"));
          o->box(FL_ENGRAVED_FRAME);
          { radio_rec_flac_bit_depth_16 = new Fl_Round_Button(95, 65, 70, 20, gettext("16 bit"));
            radio_rec_flac_bit_depth_16->type(102);
            radio_rec_flac_bit_depth_16->down_box(FL_ROUND_DOWN_BOX);
            radio_rec_flac_bit_depth_16->callback((Fl_Callback*)cb_radio_rec_flac_bit_depth_16);
          } // Fl_Round_Button* radio_rec_flac_bit_depth_16
          { radio_rec_flac_bit_depth_24 = new Fl_Round_Button(236, 65, 79, 20, gettext("24 bit"));
            radio_rec_flac_bit_depth_24->type(102);
            radio_rec_flac_bit_depth_24->down_box(FL_ROUND_DOWN_BOX);
            radio_rec_flac_bit_depth_24->callback((Fl_Callback*)cb_radio_rec_flac_bit_depth_24);
          } // Fl_Round_Button* radio_rec_flac_bit_depth_24
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 20, 385, 245, gettext("WAV"));
        o->hide();
        { Fl_Group* o = new Fl_Group(20, 50, 355, 50, gettext("Bit depth"));
          o->box(FL_ENGRAVED_FRAME);
          { radio_rec_wav_bit_depth_16 = new Fl_Round_Button(80, 65, 70, 20, gettext("16 bit"));
            radio_rec_wav_bit_depth_16->type(102);
            radio_rec_wav_bit_depth_16->down_box(FL_ROUND_DOWN_BOX);
            radio_rec_wav_bit_depth_16->callback((Fl_Callback*)cb_radio_rec_wav_bit_depth_16);
          } // Fl_Round_Button* radio_rec_wav_bit_depth_16
          { radio_rec_wav_bit_depth_32 = new Fl_Round_Button(260, 65, 79, 20, gettext("32 bit"));
            radio_rec_wav_bit_depth_32->type(102);
            radio_rec_wav_bit_depth_32->down_box(FL_ROUND_DOWN_BOX);
            radio_rec_wav_bit_depth_32->callback((Fl_Callback*)cb_radio_rec_wav_bit_depth_32);
          } // Fl_Round_Button* radio_rec_wav_bit_depth_32
          { radio_rec_wav_bit_depth_24 = new Fl_Round_Button(170, 65, 70, 20, gettext("24 bit"));
            radio_rec_wav_bit_depth_24->type(102);
            radio_rec_wav_bit_depth_24->down_box(FL_ROUND_DOWN_BOX);
            radio_rec_wav_bit_depth_24->callback((Fl_Callback*)cb_radio_rec_wav_bit_depth_24);
          } // Fl_Round_Button* radio_rec_wav_bit_depth_24
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(150, 273, 88, 22, gettext("&Close"));
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Close2);
    } // Fl_Button* o
    window_rec_codec_settings->end();
  } // Fl_My_Double_Window* window_rec_codec_settings
  { window_mixer = new Fl_My_Double_Window(430, 450, gettext("butt audio mixer"));
    window_mixer->box(FL_FLAT_BOX);
    window_mixer->color(FL_BACKGROUND_COLOR);
    window_mixer->selection_color(FL_BACKGROUND_COLOR);
    window_mixer->labeltype(FL_NO_LABEL);
    window_mixer->labelfont(0);
    window_mixer->labelsize(14);
    window_mixer->labelcolor(FL_FOREGROUND_COLOR);
    window_mixer->user_data((void*)(this));
    window_mixer->align(Fl_Align(FL_ALIGN_TOP));
    window_mixer->when(FL_WHEN_RELEASE);
    { Fl_Group* o = new Fl_Group(15, 32, 405, 397, gettext("Audio Mixer"));
      o->box(FL_ENGRAVED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { slider_mixer_primary_device = new Fl_My_Value_Slider(43, 65, 17, 245, gettext("Primary\nDevice"));
        slider_mixer_primary_device->type(4);
        slider_mixer_primary_device->box(FL_NO_BOX);
        slider_mixer_primary_device->color(FL_BACKGROUND_COLOR);
        slider_mixer_primary_device->selection_color(FL_BACKGROUND_COLOR);
        slider_mixer_primary_device->labeltype(FL_NORMAL_LABEL);
        slider_mixer_primary_device->labelfont(0);
        slider_mixer_primary_device->labelsize(11);
        slider_mixer_primary_device->labelcolor(FL_FOREGROUND_COLOR);
        slider_mixer_primary_device->minimum(18);
        slider_mixer_primary_device->maximum(-18);
        slider_mixer_primary_device->step(0.1);
        slider_mixer_primary_device->slider_size(0.1);
        slider_mixer_primary_device->callback((Fl_Callback*)cb_slider_mixer_primary_device, (void*)(CB_CALLED_BY_USER));
        slider_mixer_primary_device->align(Fl_Align(FL_ALIGN_BOTTOM));
        slider_mixer_primary_device->when(FL_WHEN_CHANGED);
        slider_mixer_primary_device->default_value = 0.0;
      } // Fl_My_Value_Slider* slider_mixer_primary_device
      { slider_mixer_secondary_device = new Fl_My_Value_Slider(128, 65, 15, 245, gettext("Secondary\nDevice"));
        slider_mixer_secondary_device->type(4);
        slider_mixer_secondary_device->box(FL_NO_BOX);
        slider_mixer_secondary_device->color(FL_BACKGROUND_COLOR);
        slider_mixer_secondary_device->selection_color(FL_BACKGROUND_COLOR);
        slider_mixer_secondary_device->labeltype(FL_NORMAL_LABEL);
        slider_mixer_secondary_device->labelfont(0);
        slider_mixer_secondary_device->labelsize(11);
        slider_mixer_secondary_device->labelcolor(FL_FOREGROUND_COLOR);
        slider_mixer_secondary_device->minimum(18);
        slider_mixer_secondary_device->maximum(-18);
        slider_mixer_secondary_device->step(0.1);
        slider_mixer_secondary_device->slider_size(0.1);
        slider_mixer_secondary_device->callback((Fl_Callback*)cb_slider_mixer_secondary_device, (void*)(CB_CALLED_BY_USER));
        slider_mixer_secondary_device->align(Fl_Align(FL_ALIGN_BOTTOM));
        slider_mixer_secondary_device->when(FL_WHEN_CHANGED);
        slider_mixer_secondary_device->default_value = 0.0;
      } // Fl_My_Value_Slider* slider_mixer_secondary_device
      { text_mixer_primary_device_volume = new Fl_Text_Display(22, 63, 55, 10, gettext("+0.0 dB"));
        text_mixer_primary_device_volume->box(FL_NO_BOX);
        text_mixer_primary_device_volume->labelsize(11);
        text_mixer_primary_device_volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      } // Fl_Text_Display* text_mixer_primary_device_volume
      { text_mixer_secondary_device_volume = new Fl_Text_Display(105, 63, 55, 10, gettext("+0.0 dB"));
        text_mixer_secondary_device_volume->box(FL_NO_BOX);
        text_mixer_secondary_device_volume->labelsize(11);
        text_mixer_secondary_device_volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      } // Fl_Text_Display* text_mixer_secondary_device_volume
      { slider_mixer_recording_gain = new Fl_My_Value_Slider(288, 65, 15, 245, gettext("Recording\nGain"));
        slider_mixer_recording_gain->type(4);
        slider_mixer_recording_gain->box(FL_NO_BOX);
        slider_mixer_recording_gain->color(FL_BACKGROUND_COLOR);
        slider_mixer_recording_gain->selection_color(FL_BACKGROUND_COLOR);
        slider_mixer_recording_gain->labeltype(FL_NORMAL_LABEL);
        slider_mixer_recording_gain->labelfont(0);
        slider_mixer_recording_gain->labelsize(11);
        slider_mixer_recording_gain->labelcolor(FL_FOREGROUND_COLOR);
        slider_mixer_recording_gain->minimum(18);
        slider_mixer_recording_gain->maximum(-18);
        slider_mixer_recording_gain->step(0.1);
        slider_mixer_recording_gain->slider_size(0.1);
        slider_mixer_recording_gain->callback((Fl_Callback*)cb_slider_mixer_recording_gain, (void*)(CB_CALLED_BY_USER));
        slider_mixer_recording_gain->align(Fl_Align(FL_ALIGN_BOTTOM));
        slider_mixer_recording_gain->when(FL_WHEN_CHANGED);
        slider_mixer_recording_gain->default_value = 0.0;
      } // Fl_My_Value_Slider* slider_mixer_recording_gain
      { text_mixer_recording_volume = new Fl_Text_Display(271, 63, 50, 10, gettext("+0.0 dB"));
        text_mixer_recording_volume->box(FL_NO_BOX);
        text_mixer_recording_volume->labelsize(11);
        text_mixer_recording_volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      } // Fl_Text_Display* text_mixer_recording_volume
      { slider_mixer_streaming_gain = new Fl_My_Value_Slider(208, 65, 15, 245, gettext("Streaming\nGain"));
        slider_mixer_streaming_gain->type(4);
        slider_mixer_streaming_gain->box(FL_NO_BOX);
        slider_mixer_streaming_gain->color(FL_BACKGROUND_COLOR);
        slider_mixer_streaming_gain->selection_color(FL_BACKGROUND_COLOR);
        slider_mixer_streaming_gain->labeltype(FL_NORMAL_LABEL);
        slider_mixer_streaming_gain->labelfont(0);
        slider_mixer_streaming_gain->labelsize(11);
        slider_mixer_streaming_gain->labelcolor(FL_FOREGROUND_COLOR);
        slider_mixer_streaming_gain->minimum(18);
        slider_mixer_streaming_gain->maximum(-18);
        slider_mixer_streaming_gain->step(0.1);
        slider_mixer_streaming_gain->slider_size(0.1);
        slider_mixer_streaming_gain->callback((Fl_Callback*)cb_slider_mixer_streaming_gain, (void*)(CB_CALLED_BY_USER));
        slider_mixer_streaming_gain->align(Fl_Align(FL_ALIGN_BOTTOM));
        slider_mixer_streaming_gain->when(FL_WHEN_CHANGED);
        slider_mixer_streaming_gain->default_value = 0.0;
      } // Fl_My_Value_Slider* slider_mixer_streaming_gain
      { text_mixer_streaming_volume = new Fl_Text_Display(190, 63, 50, 10, gettext("+0.0 dB"));
        text_mixer_streaming_volume->box(FL_NO_BOX);
        text_mixer_streaming_volume->labelsize(11);
        text_mixer_streaming_volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      } // Fl_Text_Display* text_mixer_streaming_volume
      { button_mixer_mute_primary_device = new Fl_Light_Button(30, 340, 45, 20, gettext("Mute"));
        button_mixer_mute_primary_device->tooltip(gettext("Mute"));
        button_mixer_mute_primary_device->box(FL_THIN_UP_FRAME);
        button_mixer_mute_primary_device->selection_color((Fl_Color)1);
        button_mixer_mute_primary_device->labelsize(11);
        button_mixer_mute_primary_device->callback((Fl_Callback*)cb_button_mixer_mute_primary_device);
      } // Fl_Light_Button* button_mixer_mute_primary_device
      { button_mixer_mute_secondary_device = new Fl_Light_Button(115, 340, 45, 20, gettext("Mute"));
        button_mixer_mute_secondary_device->tooltip(gettext("Mute"));
        button_mixer_mute_secondary_device->box(FL_THIN_UP_FRAME);
        button_mixer_mute_secondary_device->selection_color((Fl_Color)1);
        button_mixer_mute_secondary_device->labelsize(11);
        button_mixer_mute_secondary_device->callback((Fl_Callback*)cb_button_mixer_mute_secondary_device);
      } // Fl_Light_Button* button_mixer_mute_secondary_device
      { Fl_Box* o = new Fl_Box(205, 388, 25, 20, gettext("|"));
        o->labelsize(11);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { slider_mixer_cross_fader = new Fl_My_Value_Slider(30, 385, 375, 15, gettext("\nCross Fader"));
        slider_mixer_cross_fader->type(5);
        slider_mixer_cross_fader->box(FL_NO_BOX);
        slider_mixer_cross_fader->color(FL_BACKGROUND_COLOR);
        slider_mixer_cross_fader->selection_color(FL_BACKGROUND_COLOR);
        slider_mixer_cross_fader->labeltype(FL_NORMAL_LABEL);
        slider_mixer_cross_fader->labelfont(0);
        slider_mixer_cross_fader->labelsize(11);
        slider_mixer_cross_fader->labelcolor(FL_FOREGROUND_COLOR);
        slider_mixer_cross_fader->minimum(-100);
        slider_mixer_cross_fader->maximum(100);
        slider_mixer_cross_fader->step(1);
        slider_mixer_cross_fader->slider_size(0.1);
        slider_mixer_cross_fader->callback((Fl_Callback*)cb_slider_mixer_cross_fader, (void*)(CB_CALLED_BY_USER));
        slider_mixer_cross_fader->align(Fl_Align(FL_ALIGN_BOTTOM));
        slider_mixer_cross_fader->when(FL_WHEN_CHANGED);
        slider_mixer_cross_fader->default_value = 0.0;
        slider_mixer_cross_fader->hide_tipwin = true;
      } // Fl_My_Value_Slider* slider_mixer_cross_fader
      { Fl_Box* o = new Fl_Box(25, 398, 85, 26, gettext("Primary\nDevice"));
        o->labelsize(11);
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(310, 398, 95, 27, gettext("Secondary\nDevice"));
        o->labelsize(11);
        o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { slider_mixer_master_gain = new Fl_My_Value_Slider(368, 65, 15, 245, gettext("Master\nGain"));
        slider_mixer_master_gain->type(4);
        slider_mixer_master_gain->box(FL_NO_BOX);
        slider_mixer_master_gain->color(FL_BACKGROUND_COLOR);
        slider_mixer_master_gain->selection_color(FL_BACKGROUND_COLOR);
        slider_mixer_master_gain->labeltype(FL_NORMAL_LABEL);
        slider_mixer_master_gain->labelfont(0);
        slider_mixer_master_gain->labelsize(11);
        slider_mixer_master_gain->labelcolor(FL_FOREGROUND_COLOR);
        slider_mixer_master_gain->minimum(24);
        slider_mixer_master_gain->maximum(-24);
        slider_mixer_master_gain->step(0.1);
        slider_mixer_master_gain->slider_size(0.1);
        slider_mixer_master_gain->callback((Fl_Callback*)cb_slider_mixer_master_gain, (void*)(CB_CALLED_BY_USER));
        slider_mixer_master_gain->align(Fl_Align(FL_ALIGN_BOTTOM));
        slider_mixer_master_gain->when(FL_WHEN_CHANGED);
        slider_mixer_master_gain->default_value = 0.0;
      } // Fl_My_Value_Slider* slider_mixer_master_gain
      { text_mixer_master_volume = new Fl_Text_Display(352, 63, 50, 10, gettext("+0.0 dB"));
        text_mixer_master_volume->box(FL_NO_BOX);
        text_mixer_master_volume->labelsize(11);
        text_mixer_master_volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      } // Fl_Text_Display* text_mixer_master_volume
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(340, 11, 80, 19, gettext("Reset"));
      o->box(FL_ENGRAVED_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Reset2);
    } // Fl_Button* o
    window_mixer->end();
  } // Fl_My_Double_Window* window_mixer
}

flgui::~flgui() {
  return;
}
